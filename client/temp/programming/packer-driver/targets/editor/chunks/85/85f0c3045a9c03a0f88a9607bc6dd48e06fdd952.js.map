{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/login-ui.ts"],"names":["_decorator","Component","EditBox","Button","Label","director","LoginManager","NetworkManager","NetworkStatus","loadColyseusClient","isColyseusLoaded","ccclass","property","LoginUI","start","loginButton","node","on","EventType","CLICK","onLogin","guestLoginButton","onGuestLogin","usernameInput","passwordInput","statusLabel","console","error","username","string","password","setButtonsInteractable","log","currentStatus","getInstance","status","DISCONNECTED","ERROR","login","onLoginSuccess","bind","onLoginFailure","message","guestName","Math","floor","random","playerName","guestLogin","response","playerId","currentPlayerId","loadScene","err","interactable"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, EditBox, Button, Label, director, sys } from 'cc'; // 导入 director 和 sys\nimport { LoginManager } from '../core/login-manager';\nimport { NetworkManager, NetworkStatus } from '../core/network'; // 导入 NetworkManager 和 NetworkStatus\nimport { loadColyseusClient, isColyseusLoaded } from '../libs/colyseus-loader'; // 导入 Colyseus 加载器\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('LoginUI')\nexport class LoginUI extends Component {\n@property(EditBox)\nusernameInput: EditBox | null = null;\n\n@property(EditBox)\npasswordInput: EditBox | null = null;\n\n@property(Button)\nloginButton: Button | null = null;\n\n@property(Button)\nguestLoginButton: Button | null = null;\n\n@property(Label)\nstatusLabel: Label | null = null;\n\n    start() {\nif (this.loginButton) {\n    this.loginButton.node.on(Button.EventType.CLICK, this.onLogin, this);\n}\nif (this.guestLoginButton) {\n    this.guestLoginButton.node.on(Button.EventType.CLICK, this.onGuestLogin, this);\n}\n    }\n\n    async onLogin() { // 改为 async 方法\n        if (!this.usernameInput || !this.passwordInput || !this.statusLabel) {\n            console.error(\"UI 元素未正确配置\");\n            return;\n        }\n\n        const username = this.usernameInput.string;\n        const password = this.passwordInput.string;\n\n        if (!username || !password) {\n            this.statusLabel.string = '请输入用户名和密码';\n            return;\n        }\n\n        this.statusLabel.string = '处理中...'; // 提示用户正在处理\n        this.setButtonsInteractable(false); // 禁用按钮防止重复点击\n\n        try {\n            // 1. 确保Colyseus客户端库已加载\n            if (!isColyseusLoaded()) {\n                this.statusLabel.string = '正在加载网络组件...';\n                await loadColyseusClient();\n                console.log('[LoginUI] Colyseus客户端库加载成功');\n            }\n\n            // 2. 检查连接状态，仅在 DISCONNECTED 或 ERROR 时连接\n            const currentStatus = NetworkManager.getInstance().status;\n            if (currentStatus === NetworkStatus.DISCONNECTED || currentStatus === NetworkStatus.ERROR) {\n                this.statusLabel.string = '正在连接服务器...';\n                // NetworkManager 不需要显式初始化，实例化时会自动初始化\n                // 只需要获取实例即可\n                NetworkManager.getInstance();\n                this.statusLabel.string = '连接成功，正在登录...';\n            } else {\n                 this.statusLabel.string = '正在登录...';\n            }\n\n            // 3. 连接成功后执行登录\n            LoginManager.getInstance().login(username, password, this.onLoginSuccess.bind(this), this.onLoginFailure.bind(this));\n\n        } catch (error: any) {\n            // 连接或登录过程中发生错误\n            console.error(\"[LoginUI] 连接或登录失败:\", error);\n            this.onLoginFailure(error.message || \"连接或登录时发生错误\");\n            this.setButtonsInteractable(true); // 发生错误时重新启用按钮\n        }\n    }\n\n    async onGuestLogin() { // 改为 async 方法\n        if (!this.statusLabel) {\n            console.error(\"UI 元素未正确配置\");\n            return;\n        }\n\n        this.statusLabel.string = '处理中...'; // 提示用户正在处理\n        this.setButtonsInteractable(false); // 禁用按钮防止重复点击\n\n        try {\n            // 1. 确保Colyseus客户端库已加载\n            if (!isColyseusLoaded()) {\n                this.statusLabel.string = '正在加载网络组件...';\n                await loadColyseusClient();\n                console.log('[LoginUI] Colyseus客户端库加载成功');\n            }\n\n            // 2. 检查连接状态，仅在 DISCONNECTED 或 ERROR 时连接\n            const currentStatus = NetworkManager.getInstance().status;\n            if (currentStatus === NetworkStatus.DISCONNECTED || currentStatus === NetworkStatus.ERROR) {\n                this.statusLabel.string = '正在连接服务器...';\n                // NetworkManager 不需要显式初始化，实例化时会自动初始化\n                // 只需要获取实例即可\n                NetworkManager.getInstance();\n                this.statusLabel.string = '连接成功，正在登录...';\n            } else {\n                 this.statusLabel.string = '正在登录...';\n            }\n\n            // 3. 生成随机游客名称\n            const guestName = `游客_${Math.floor(Math.random() * 10000)}`;\n            LoginManager.playerName = guestName; // 存储玩家名称\n            console.log(`[LoginUI] 使用游客名称: ${guestName}`);\n\n            // 4. 连接成功后执行游客登录，并处理响应\n            LoginManager.getInstance().guestLogin(\n                (response: any) => { // 修改回调以接收响应\n                    if (response && response.playerId) {\n                        LoginManager.currentPlayerId = response.playerId; // 存储 Player ID\n                        console.log(`[LoginUI] Player ID stored: ${LoginManager.currentPlayerId}`);\n                        this.onLoginSuccess(); // 调用原始的成功处理\n                    } else {\n                        // 对于Colyseus，可能没有明确的playerId返回，直接进入大厅\n                        console.log(\"[LoginUI] 游客登录成功，无需明确的playerId\");\n                        this.onLoginSuccess(); // 调用原始的成功处理\n                    }\n                },\n                this.onLoginFailure.bind(this)\n            );\n\n        } catch (error: any) {\n            // 连接或登录过程中发生错误\n            console.error(\"[LoginUI] 连接或游客登录失败:\", error);\n            this.onLoginFailure(error.message || \"连接或游客登录时发生错误\");\n            this.setButtonsInteractable(true); // 发生错误时重新启用按钮\n        }\n    }\n\n    onLoginSuccess() {\n        if (this.statusLabel) {\n            this.statusLabel.string = '登录成功';\n        }\n        // 登录成功后加载大厅场景\n        director.loadScene('LobbyScene', (err) => {\n            if (err) {\n                console.error(\"加载 LobbyScene 失败:\", err);\n                if (this.statusLabel) {\n                    this.statusLabel.string = `加载大厅失败: ${err.message}`;\n                }\n                this.setButtonsInteractable(true); // 加载失败时也应恢复按钮\n            } else {\n                console.log(\"成功加载 LobbyScene\");\n                // 成功加载后无需恢复按钮，因为场景已切换\n            }\n        });\n    }\n\n    onLoginFailure(error: string) {\n        if (this.statusLabel) {\n            this.statusLabel.string = `登录失败: ${error}`;\n        }\n        this.setButtonsInteractable(true); // 登录失败时恢复按钮交互\n    }\n\n    /**\n     * 设置登录和游客按钮的可交互状态\n     * @param interactable 是否可交互\n     */\n    private setButtonsInteractable(interactable: boolean): void {\n        if (this.loginButton) {\n            this.loginButton.interactable = interactable;\n        }\n        if (this.guestLoginButton) {\n            this.guestLoginButton.interactable = interactable;\n        }\n    }\n}\n"]}