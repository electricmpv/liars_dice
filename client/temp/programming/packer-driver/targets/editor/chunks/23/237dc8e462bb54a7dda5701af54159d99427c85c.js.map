{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/game-history-panel.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Label","ScrollView","Color","GameStateManager","ccclass","property","GameHistoryPanel","gameStateManager","instance","_onHistoryUpdatedCallback","data","handleHistoryUpdated","onLoad","on","console","log","scheduleOnce","addHistoryItem","id","Date","now","text","timestamp","type","onDestroy","off","items","length","historyContent","historyItemPrefab","error","JSON","stringify","map","item","removeAllChildren","forEach","historyNodeInstance","labelNode","getChildByName","label","getComponent","string","color","addChild","scrollView","scrollToBottom","parentScrollView","node","getParent","clearHistory"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Label, ScrollView, Color } from 'cc';\nimport { GameStateManager, HistoryItem } from '../core/game-state-manager';\n\nconst { ccclass, property } = _decorator;\n\n/**\n * 游戏历史记录面板\n * 负责显示游戏历史记录\n */\n@ccclass('GameHistoryPanel')\nexport class GameHistoryPanel extends Component {\n    @property(Node)\n    private historyContent: Node | null = null;\n\n    @property(Prefab)\n    private historyItemPrefab: Prefab | null = null;\n    \n    @property(ScrollView)\n    private scrollView: ScrollView | null = null;\n\n    private gameStateManager: GameStateManager = GameStateManager.instance;\n    private _onHistoryUpdatedCallback = (data: { items: HistoryItem[] }) => this.handleHistoryUpdated(data);\n\n    onLoad() {\n        // 监听历史记录更新事件\n        this.gameStateManager.on('history-updated', this._onHistoryUpdatedCallback);\n        \n        console.log(\"[GameHistoryPanel] onLoad完成，已注册历史记录监听\");\n        \n        // 添加一条初始历史记录，测试面板是否工作\n        this.scheduleOnce(() => {\n            this.gameStateManager.addHistoryItem({\n                id: `init_history_${Date.now()}`,\n                text: `游戏历史记录面板已初始化`,\n                timestamp: Date.now(),\n                type: 'system'\n            });\n        }, 1);\n    }\n\n    onDestroy() {\n        // 移除事件监听\n        this.gameStateManager.off('history-updated', this._onHistoryUpdatedCallback);\n    }\n\n    /**\n     * 处理历史记录更新事件\n     * @param data 事件数据 { items: HistoryItem[] }\n     */\n    private handleHistoryUpdated(data: { items: HistoryItem[] }): void {\n        console.log(\"[GameHistoryPanel] handleHistoryUpdated called. Items count:\", data.items.length);\n        // 确保 historyContent 和 historyItemPrefab 都已设置\n        if (!this.historyContent || !this.historyItemPrefab) {\n            console.error(\"[GameHistoryPanel] historyContent or historyItemPrefab is not set!\");\n            return;\n        }\n\n        // 从控制台输出所有历史项，便于调试\n        console.log(\"[GameHistoryPanel] 所有历史记录项:\", JSON.stringify(data.items.map(item => item.text)));\n        \n        this.historyContent.removeAllChildren(); // 清空现有历史\n\n        data.items.forEach(item => {\n            // 在实例化之前，再次确认 Prefab 不为 null\n            if (!this.historyItemPrefab) {\n                console.error(\"[GameHistoryPanel] historyItemPrefab is null inside loop!\");\n                return; // 如果 Prefab 为空，则无法继续处理此项\n            }\n            // 实例化 Prefab 得到 Node，并显式转换为 Node 类型\n            const historyNodeInstance = instantiate(this.historyItemPrefab) as Node;\n            if (!historyNodeInstance) {\n                console.error(\"[GameHistoryPanel] Failed to instantiate historyItemPrefab!\");\n                return; // 跳过这个 item\n            }\n\n            // 在实例化的 Node 上查找 Label\n            const labelNode = historyNodeInstance.getChildByName(\"HistoryLabel\");\n            const label = labelNode?.getComponent(Label);\n            if (label) {\n                label.string = item.text; // 使用 HistoryItem 的文本\n                \n                // 根据记录类型设置颜色\n                switch (item.type) {\n                    case 'system':\n                        label.color = new Color(150, 150, 150, 255); // 灰色\n                        break;\n                    case 'bid':\n                        label.color = new Color(255, 255, 255, 255); // 白色\n                        break;\n                    case 'challenge':\n                        label.color = new Color(255, 100, 100, 255); // 红色\n                        break;\n                    case 'spot_on':\n                        label.color = new Color(100, 255, 100, 255); // 绿色\n                        break;\n                    default:\n                        label.color = new Color(255, 255, 255, 255); // 默认白色\n                }\n            } else {\n                console.error(\"[GameHistoryPanel] Failed to get Label component from instantiated history item's child 'HistoryLabel'!\");\n            }\n            // 将实例化的 Node 添加到容器中\n            if (this.historyContent) { // 再次检查 historyContent 是否有效\n                this.historyContent.addChild(historyNodeInstance);\n            }\n        });\n\n        // 滚动到底部，显示最新的历史记录\n        // 延迟到下一帧执行，确保布局已完全更新\n        this.scheduleOnce(() => {\n            if (this.scrollView) {\n                console.log(\"[GameHistoryPanel] 尝试滚动到底部 (下一帧)\");\n                this.scrollView.scrollToBottom(0.1); // 0.1秒动画时间\n            } else {\n                console.log(\"[GameHistoryPanel] scrollView不存在，无法滚动到底部\");\n                // 尝试从父节点获取ScrollView (备用逻辑，以防万一)\n                const parentScrollView = this.node.getComponent(ScrollView) || this.node.getParent()?.getComponent(ScrollView);\n                if (parentScrollView) {\n                    console.log(\"[GameHistoryPanel] 从父节点找到scrollView，尝试滚动到底部 (下一帧)\");\n                    parentScrollView.scrollToBottom(0.1);\n                }\n            }\n        }, 0); // 延迟0帧，即下一帧执行\n    }\n\n    /**\n     * 清空历史记录\n     */\n    public clearHistory(): void {\n        if (this.historyContent) {\n            this.historyContent.removeAllChildren();\n        }\n    }\n}\n"]}