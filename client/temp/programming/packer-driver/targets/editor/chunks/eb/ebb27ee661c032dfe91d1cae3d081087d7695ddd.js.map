{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/bid-controller.ts"],"names":["_decorator","Component","Node","Label","Button","ScrollView","Prefab","instantiate","Layout","Color","CountListItem","BidValidator","ccclass","property","BidController","_currentBid","_selectedBidValue","_selectedBidCount","_totalDiceInGame","_isMyTurn","_selectedCountListItemNode","_selectedValueButtonNode","_instantiatedCountItems","_minSelectableCount","initialize","totalDice","populateInitialCountItems","resetSelection","updateCurrentBidDisplay","ensureVisibility","console","log","countListContentNode","countListItemPrefab","error","removeAllChildren","i","itemNode","countListItem","getComponent","setup","addChild","push","destroy","updateLayout","countScrollView","scrollToTop","updateState","isMyTurn","currentBid","totalDiceInGame","hasPreviousBid","challengeButton","interactable","spotOnButton","currentValueFace","currentCount","currentEffectiveValue","_updateAvailableQuantities","_updateFaceButtons","valueSelectorNode","active","node","bidButton","highlightSelectedCountItem","highlightSelectedValueButton","nodeToCheck","name","parent","currentBidLabel","value","count","string","validFace","getFaceLabel","warn","handleCountSelection","detail","isNaN","minFace","getMinValidFace","onValueSelect","event","valueString","parsedValue","parseInt","targetNode","currentTarget","validateAndEnableBidButton","children","forEach","btnNode","button","faceValue","replace","firstVisibleIndex","item","index","isSelectable","countValue","setInteractable","scrollToFirstAvailableQuantity","length","percentage","vertical","scrollToPercentVertical","horizontal","scrollToPercentHorizontal","scrollToLeft","onBidClick","isBidValid","bid","emit","disableInteractionTemporarily","onChallengeClick","onSpotOnClick","isValid","reason","bidCheckResult","join","selectedButtonNode","setScale","selectedNode","label","getComponentInChildren","color","WHITE","GRAY","YELLOW","onDestroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, Button, ScrollView, Prefab, instantiate, Layout, Color, Event } from 'cc';\nimport { CountListItem } from '../prefabs/count-list-item';\nimport { Bid, Face } from '../../shared/protocols/game-types.d';\nimport { BidValidator } from '../utils/bid-validator';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('BidController')\nexport class BidController extends Component {\n\n    // --- UI References ---\n    @property(Button)\n    private bidButton: Button | null = null;\n\n    @property(Button)\n    private challengeButton: Button | null = null;\n\n    @property(Button)\n    private spotOnButton: Button | null = null;\n\n    @property(Node) // Parent node containing ValueButton1-6\n    private valueSelectorNode: Node | null = null;\n\n    @property(ScrollView) // ScrollView for quantities\n    private countScrollView: ScrollView | null = null;\n\n    @property(Node) // Content node of the ScrollView (with Layout)\n    private countListContentNode: Node | null = null;\n\n    @property(Prefab) // Prefab for quantity list items\n    private countListItemPrefab: Prefab | null = null;\n\n    @property(Label) // Label to display the current highest bid\n    private currentBidLabel: Label | null = null;\n\n    // --- Internal State ---\n    private _currentBid: Bid | [0, 0] = [0, 0]; // Current highest bid\n    private _selectedBidValue: Face | 0 = 0;    // Player's selected face value (1-6, or 0 if none)\n    private _selectedBidCount: number = 0;      // Player's selected quantity (0 if none)\n    private _totalDiceInGame: number = 0;       // Total dice currently in play\n    private _isMyTurn: boolean = false;         // Is it the current player's turn?\n    private _selectedCountListItemNode: Node | null = null; // Reference to the highlighted count item node\n    private _selectedValueButtonNode: Node | null = null; // Reference to the highlighted face value button node\n    private _instantiatedCountItems: CountListItem[] = []; // Array to hold instantiated CountListItem components\n    private _minSelectableCount: number = 1; // Minimum quantity selectable based on current bid\n\n    /**\n     * Initializes the BidController.\n     * @param totalDice Initial total number of dice in the game.\n     */\n    public initialize(totalDice: number): void {\n        this._totalDiceInGame = totalDice;\n        this._currentBid = [0, 0];\n        this._isMyTurn = false;\n        this.populateInitialCountItems(); // Create quantity items\n        this.resetSelection(); // Set initial UI state (buttons disabled, etc.)\n        this.updateCurrentBidDisplay(); // Show initial bid status\n\n        // Ensure parent nodes are visible (might be needed if panel was hidden)\n        this.ensureVisibility();\n\n        console.log(`[BidController] Initialized. Total Dice: ${totalDice}`);\n    }\n\n    /**\n     * Populates the quantity selection list based on the total dice.\n     */\n     private populateInitialCountItems(): void {\n         if (!this.countListContentNode || !this.countListItemPrefab) {\n             console.error(\"[BidController] Count list content node or item prefab not set!\");\n             return;\n         }\n         this.countListContentNode.removeAllChildren();\n         this._instantiatedCountItems = [];\n\n         console.log(`[BidController] Populating count items up to ${this._totalDiceInGame}`);\n\n         for (let i = 1; i <= this._totalDiceInGame; i++) {\n             const itemNode = instantiate(this.countListItemPrefab);\n             const countListItem = itemNode.getComponent(CountListItem);\n\n             if (countListItem) {\n                 // Pass `this` (BidController instance) as the handler target\n                 countListItem.setup(i, this); // CountListItem will call this.handleCountSelection\n                 this.countListContentNode.addChild(itemNode);\n                 this._instantiatedCountItems.push(countListItem);\n             } else {\n                 console.error(`[BidController] CountListItem component not found on prefab instance for count ${i}`);\n                 itemNode.destroy();\n             }\n         }\n         // Update layout and scroll to top\n         this.countListContentNode.getComponent(Layout)?.updateLayout();\n         this.countScrollView?.scrollToTop(0.1);\n     }\n\n    /**\n     * Updates the controller's state based on new game state data.\n     * @param isMyTurn Is it the current player's turn?\n     * @param currentBid The current highest bid [face, count].\n     * @param totalDiceInGame The total number of dice now in the game.\n     */\n    public updateState(isMyTurn: boolean, currentBid: Bid | [0, 0], totalDiceInGame: number): void {\n        console.log(`[BidController] updateState: Turn=${isMyTurn}, Bid=[${currentBid[0]}, ${currentBid[1]}], TotalDice=${totalDiceInGame}`);\n\n        this._isMyTurn = isMyTurn;\n        this._currentBid = currentBid;\n\n        // Repopulate quantity list if total dice changed\n        if (this._totalDiceInGame !== totalDiceInGame) {\n            console.log(`[BidController] Total dice changed from ${this._totalDiceInGame} to ${totalDiceInGame}. Repopulating count items.`);\n            this._totalDiceInGame = totalDiceInGame;\n            this.populateInitialCountItems(); // This also resets count item states\n        }\n\n        // Always reset selections when state updates\n        this.resetSelection();\n\n        // Update challenge/spot-on buttons\n        const hasPreviousBid = this._currentBid[1] > 0;\n        if (this.challengeButton) this.challengeButton.interactable = this._isMyTurn && hasPreviousBid;\n        if (this.spotOnButton) this.spotOnButton.interactable = this._isMyTurn && hasPreviousBid;\n\n        // Update the current bid display label\n        this.updateCurrentBidDisplay();\n\n        // Calculate the minimum quantity the player *must* select\n        const [currentValueFace, currentCount] = this._currentBid;\n        if (currentCount === 0) {\n            this._minSelectableCount = 1;\n        } else {\n            // If current bid is max possible value (1, effective value 7), must increase count\n            const currentEffectiveValue = BidValidator['getEffectiveValue'](currentValueFace); // Use helper directly\n            this._minSelectableCount = currentEffectiveValue === 7 ? currentCount + 1 : currentCount;\n        }\n        console.log(`[BidController] updateState: Minimum selectable count is ${this._minSelectableCount}`);\n\n        // Update quantity buttons based on the minimum required count\n        this._updateAvailableQuantities();\n\n        // Initially disable all face buttons (they get enabled after quantity selection)\n        this._updateFaceButtons(7 as Face); // 7 disables all\n\n        // Show/hide selectors based on turn\n        if (this.valueSelectorNode) this.valueSelectorNode.active = this._isMyTurn;\n        if (this.countScrollView?.node) this.countScrollView.node.active = this._isMyTurn;\n\n        // Ensure bid button is disabled\n        if (this.bidButton) this.bidButton.interactable = false;\n\n        // Ensure the controller node itself is active\n        this.ensureVisibility();\n    }\n\n    /**\n     * Resets the player's current selection (quantity and face).\n     */\n    public resetSelection(): void {\n        console.log(\"[BidController] Resetting selection.\");\n        // Reset internal state\n        this._selectedBidCount = 0;\n        this._selectedBidValue = 0;\n        // Reset UI highlights\n        this.highlightSelectedCountItem(null);\n        this.highlightSelectedValueButton(null);\n        // Disable bid button\n        if (this.bidButton) this.bidButton.interactable = false;\n        // Disable all face buttons\n        this._updateFaceButtons(7 as Face); // 7 disables all\n    }\n\n    /**\n     * Ensures the BidController node and its parents are active.\n     */\n    private ensureVisibility(): void {\n        let nodeToCheck: Node | null = this.node;\n        while (nodeToCheck) {\n            if (!nodeToCheck.active) {\n                console.log(`[BidController] Activating inactive node: ${nodeToCheck.name}`);\n                nodeToCheck.active = true;\n            }\n            nodeToCheck = nodeToCheck.parent;\n        }\n    }\n\n    /**\n     * Updates the label displaying the current highest bid.\n     */\n    private updateCurrentBidDisplay(): void {\n        if (!this.currentBidLabel) return;\n        const [value, count] = this._currentBid;\n\n        if (count === 0) {\n            this.currentBidLabel.string = \"等待首次叫价\";\n        } else {\n            // Use BidValidator's helpers for consistency\n            if (BidValidator.validFace(value)) {\n                this.currentBidLabel.string = `当前: ${count}个 ${BidValidator.getFaceLabel(value)}`;\n            } else {\n                console.warn(\"[BidController] updateCurrentBidDisplay: Invalid face value in _currentBid:\", value);\n                this.currentBidLabel.string = `当前: ${count}个 ?`;\n            }\n        }\n    }\n\n    // --- Selection Handlers (New Flow: Quantity -> Face) ---\n\n    /**\n     * Handles clicks on quantity list items. Called by CountListItem instances.\n     * @param detail Contains `{ count: number, node: Node }` from the clicked item.\n     */\n    public handleCountSelection(detail: { count: number, node: Node }): void {\n         if (!this._isMyTurn) return; // Ignore if not player's turn\n\n        console.log(`[BidController] handleCountSelection: Count=${detail.count}`);\n        if (!detail || typeof detail.count !== 'number' || isNaN(detail.count) || !detail.node) {\n            console.error(\"[BidController] Invalid data from count-selected event:\", detail);\n            return;\n        }\n\n        // Update selected count and highlight\n        this._selectedBidCount = detail.count;\n        this.highlightSelectedCountItem(detail.node);\n\n        // Reset selected face value and highlight\n        this._selectedBidValue = 0;\n        this.highlightSelectedValueButton(null);\n\n        // Determine the minimum face value allowed for the selected quantity\n        const minFace = BidValidator.getMinValidFace(this._selectedBidCount, this._currentBid);\n        console.log(`[BidController] Minimum valid face for count ${this._selectedBidCount} is: ${minFace}`);\n\n        // Update the interactability of face buttons based on the minimum face\n        this._updateFaceButtons(minFace);\n\n        // Disable bid button because a face value hasn't been selected yet\n        if (this.bidButton) this.bidButton.interactable = false;\n    }\n\n    /**\n     * Handles clicks on face value buttons (1-6). Called via editor event binding.\n     * @param event The event object.\n     * @param valueString The string value (\"1\" to \"6\") associated with the button.\n     */\n    public onValueSelect(event: Event, valueString: string): void {\n        if (!this._isMyTurn || this._selectedBidCount === 0) return; // Must select quantity first\n\n        console.log(`[BidController] onValueSelect: Value=${valueString}`);\n        const parsedValue = parseInt(valueString);\n\n        if (BidValidator.validFace(parsedValue)) {\n            this._selectedBidValue = parsedValue;\n            // Highlight the selected button\n            const targetNode = event.currentTarget;\n            if (targetNode instanceof Node) {\n                this.highlightSelectedValueButton(targetNode);\n            } else {\n                this.highlightSelectedValueButton(null);\n            }\n            // Validate if the bid button can now be enabled\n            this.validateAndEnableBidButton();\n        } else {\n            console.warn(\"[BidController] Invalid face value clicked:\", valueString);\n        }\n    }\n\n    // --- UI Update Helpers ---\n\n    /**\n     * Updates the interactability of face value buttons based on the minimum allowed face.\n     * @param minFace The minimum face value (1-6) allowed. Faces below this are disabled. If 7, all are disabled.\n     */\n    private _updateFaceButtons(minFace: Face | 7): void {\n        if (!this.valueSelectorNode) return;\n\n        this.valueSelectorNode.children.forEach(btnNode => {\n            const button = btnNode.getComponent(Button);\n            // Assuming button nodes are named like \"ValueButton1\", \"ValueButton2\", etc.\n            const faceValue = parseInt(btnNode.name.replace('ValueButton', ''));\n\n            if (button && BidValidator.validFace(faceValue)) {\n                // Enable if it's player's turn, minFace is valid (<=6), and button's face >= minFace\n                button.interactable = this._isMyTurn && minFace <= 6 && faceValue >= minFace;\n            } else if (button) {\n                button.interactable = false; // Disable non-standard buttons\n            }\n        });\n    }\n\n    /**\n     * Updates the interactability and visibility of quantity list items based on the minimum required count.\n     */\n    private _updateAvailableQuantities(): void {\n        if (!this.countListContentNode) return;\n        console.log(`[BidController] Updating available quantities. Min selectable: ${this._minSelectableCount}`);\n\n        let firstVisibleIndex = -1;\n        this._instantiatedCountItems.forEach((item, index) => {\n            const isSelectable = item.countValue >= this._minSelectableCount;\n            // Node is active (visible) if count is >= minimum required\n            item.node.active = isSelectable;\n            // Button is interactable only if it's player's turn AND count is selectable\n            item.setInteractable(this._isMyTurn && isSelectable);\n\n            if (isSelectable && firstVisibleIndex === -1) {\n                firstVisibleIndex = index; // Track the first available item for scrolling\n            }\n        });\n\n        // Update layout and scroll to the first available item\n        this.countListContentNode.getComponent(Layout)?.updateLayout();\n        this.scrollToFirstAvailableQuantity(firstVisibleIndex);\n    }\n\n    /**\n     * Scrolls the quantity list to bring the first available item into view.\n     * @param firstVisibleIndex Index of the first item that is active and interactable.\n     */\n    private scrollToFirstAvailableQuantity(firstVisibleIndex: number): void {\n        if (!this.countScrollView) return;\n        if (firstVisibleIndex >= 0 && this._instantiatedCountItems.length > 0) {\n            // Calculate scroll percentage (approximate for grid layout)\n            const percentage = firstVisibleIndex / this._instantiatedCountItems.length;\n             if (this.countScrollView.vertical) {\n                 this.countScrollView.scrollToPercentVertical(percentage * 100, 0.1);\n             } else if (this.countScrollView.horizontal) {\n                 this.countScrollView.scrollToPercentHorizontal(percentage * 100, 0.1, false);\n             }\n        } else {\n             // If no items are available, scroll to the beginning\n             if (this.countScrollView.vertical) this.countScrollView.scrollToTop(0.1);\n             else if (this.countScrollView.horizontal) this.countScrollView.scrollToLeft(0.1);\n        }\n    }\n\n    // --- Action Handlers ---\n\n    /**\n     * Handles the click on the main \"Bid\" button.\n     */\n    public onBidClick(): void {\n        console.log(`[BidController] onBidClick triggered. Turn=${this._isMyTurn}, ButtonInteractable=${this.bidButton?.interactable}`);\n        if (!this._isMyTurn || !this.bidButton?.interactable) {\n            console.log(\"[BidController] Bid ignored: Not my turn or button not interactable.\");\n            return;\n        }\n\n        // Final validation before emitting\n        if (!BidValidator.validFace(this._selectedBidValue) || this._selectedBidCount <= 0 ||\n            !BidValidator.isBidValid(this._selectedBidValue, this._selectedBidCount, this._currentBid, this._totalDiceInGame))\n        {\n            console.error(`[BidController] Bid validation failed just before emitting! State: Count=${this._selectedBidCount}, Face=${this._selectedBidValue}, CurrentBid=[${this._currentBid[0]}, ${this._currentBid[1]}]`);\n            this.validateAndEnableBidButton(); // Re-check and disable button if needed\n            return;\n        }\n\n        // Emit the event for GameUI to handle network request\n        const bid: Bid = [this._selectedBidValue, this._selectedBidCount];\n        console.log(`[BidController] Emitting 'place-bid' event with bid: [${bid[0]}, ${bid[1]}]`);\n        this.node.emit('place-bid', bid);\n\n        // Disable interaction temporarily while waiting for server response\n        this.disableInteractionTemporarily();\n    }\n\n    /**\n     * Handles the click on the \"Challenge\" button.\n     */\n    public onChallengeClick(): void {\n        if (!this._isMyTurn || !this.challengeButton?.interactable) return;\n        console.log(\"[BidController] Emitting 'challenge' event.\");\n        this.node.emit('challenge');\n        this.disableInteractionTemporarily();\n    }\n\n    /**\n     * Handles the click on the \"Spot On\" button.\n     */\n    public onSpotOnClick(): void {\n        if (!this._isMyTurn || !this.spotOnButton?.interactable) return;\n        console.log(\"[BidController] Emitting 'spot-on' event.\");\n        this.node.emit('spot-on');\n        this.disableInteractionTemporarily();\n    }\n\n    /**\n     * Temporarily disables all interactive elements after an action is taken.\n     */\n    private disableInteractionTemporarily(): void {\n        console.log(\"[BidController] Disabling interaction temporarily.\");\n        if(this.bidButton) this.bidButton.interactable = false;\n        if(this.challengeButton) this.challengeButton.interactable = false;\n        if(this.spotOnButton) this.spotOnButton.interactable = false;\n\n        // Disable face buttons\n        this._updateFaceButtons(7 as Face); // 7 disables all\n\n        // Disable quantity buttons\n        this._instantiatedCountItems.forEach(item => item.setInteractable(false));\n    }\n\n    // --- Validation & Button Enabling ---\n\n    /**\n     * Validates the current selection (quantity + face) and enables/disables the bid button accordingly.\n     */\n    private validateAndEnableBidButton(): void {\n        if (!this.bidButton) {\n            console.error(\"[BidController] validateAndEnableBidButton: Bid button reference is null!\");\n            return;\n        }\n\n        let isValid = false;\n        const reason: string[] = []; // Array to store reasons for validation result\n\n        // Check basic conditions first\n        if (!this._isMyTurn) reason.push(\"Not player's turn\");\n        if (this._selectedBidCount <= 0) reason.push(\"Quantity not selected\");\n        if (!BidValidator.validFace(this._selectedBidValue)) reason.push(\"Face not selected or invalid\");\n\n        // Only proceed to isBidValid check if basic conditions are met\n        if (this._isMyTurn && this._selectedBidCount > 0 && BidValidator.validFace(this._selectedBidValue)) {\n            // Perform the actual validation against the current highest bid\n            const bidCheckResult = BidValidator.isBidValid(this._selectedBidValue, this._selectedBidCount, this._currentBid, this._totalDiceInGame);\n            if (!bidCheckResult) {\n                reason.push(`BidValidator.isBidValid returned false for bid [${this._selectedBidValue}, ${this._selectedBidCount}] vs current [${this._currentBid[0]}, ${this._currentBid[1]}]`);\n            } else {\n                 reason.push(`BidValidator.isBidValid returned true for bid [${this._selectedBidValue}, ${this._selectedBidCount}] vs current [${this._currentBid[0]}, ${this._currentBid[1]}]`);\n                 isValid = true; // Set isValid to true only if isBidValid passes\n            }\n        } else {\n             // isValid remains false if basic conditions fail\n             reason.push(\"Basic conditions failed\");\n        }\n\n        this.bidButton.interactable = isValid;\n        // Log detailed state and result\n        console.log(`[BidController] validateAndEnableBidButton: Result=${isValid}. Reason(s): ${reason.join('; ')}. State: Turn=${this._isMyTurn}, Count=${this._selectedBidCount}, Face=${this._selectedBidValue}, CurrentBid=[${this._currentBid[0]}, ${this._currentBid[1]}]`);\n    }\n\n    // --- UI Highlighting ---\n\n    /** Highlights the selected face value button and deselects the previous one. */\n    private highlightSelectedValueButton(selectedButtonNode: Node | null): void {\n        if (!this.valueSelectorNode) return;\n\n        // Reset previous highlight\n        if (this._selectedValueButtonNode && this._selectedValueButtonNode.isValid) {\n             // TODO: Implement visual deselection (e.g., reset scale, color)\n             this._selectedValueButtonNode.setScale(1.0, 1.0);\n        }\n\n        this._selectedValueButtonNode = selectedButtonNode;\n\n        // Apply new highlight\n        if (this._selectedValueButtonNode && this._selectedValueButtonNode.isValid) {\n             // TODO: Implement visual selection (e.g., scale up, change color)\n             this._selectedValueButtonNode.setScale(1.1, 1.1);\n        }\n    }\n\n    /** Highlights the selected quantity list item and deselects the previous one. */\n    private highlightSelectedCountItem(selectedNode: Node | null): void {\n        // Reset previous highlight\n        if (this._selectedCountListItemNode && this._selectedCountListItemNode.isValid) {\n            const label = this._selectedCountListItemNode.getComponentInChildren(Label);\n            const button = this._selectedCountListItemNode.getComponent(Button);\n            if (label) {\n                 // Restore color based on interactable state\n                 label.color = (button && button.interactable) ? Color.WHITE : Color.GRAY;\n            }\n            this._selectedCountListItemNode.setScale(1.0, 1.0);\n        }\n\n        this._selectedCountListItemNode = selectedNode;\n\n        // Apply new highlight\n        if (this._selectedCountListItemNode && this._selectedCountListItemNode.isValid) {\n             const label = this._selectedCountListItemNode.getComponentInChildren(Label);\n             if (label) {\n                 label.color = Color.YELLOW; // Highlight color\n             }\n             this._selectedCountListItemNode.setScale(1.1, 1.1); // Example scale highlight\n        }\n    }\n\n    // --- Lifecycle ---\n    onDestroy() {\n        console.log(\"[BidController] onDestroy called.\");\n        // No explicit listeners on this.node to remove anymore\n    }\n}\n"]}