{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/libs/events-polyfill.ts"],"names":["EventEmitter","events","on","event","listener","push","once","onceWrapper","args","off","filter","l","emit","forEach","removeAllListeners"],"mappings":";;;iBAIaA,Y;;;;;;;;;;;;;AAJb;AACA;AACA;AACA;8BACaA,Y,GAAN,MAAMA,YAAN,CAAmB;AAAA;AAAA,eAChBC,MADgB,GACqB,EADrB;AAAA;;AAGxBC,QAAAA,EAAE,CAACC,KAAD,EAAgBC,QAAhB,EAA0C;AAC1C,cAAI,CAAC,KAAKH,MAAL,CAAYE,KAAZ,CAAL,EAAyB;AACvB,iBAAKF,MAAL,CAAYE,KAAZ,IAAqB,EAArB;AACD;;AACD,eAAKF,MAAL,CAAYE,KAAZ,EAAmBE,IAAnB,CAAwBD,QAAxB;AACA,iBAAO,IAAP;AACD;;AAEDE,QAAAA,IAAI,CAACH,KAAD,EAAgBC,QAAhB,EAA0C;AAC5C,gBAAMG,WAAW,GAAG,CAAC,GAAGC,IAAJ,KAAoB;AACtCJ,YAAAA,QAAQ,CAAC,GAAGI,IAAJ,CAAR;AACA,iBAAKC,GAAL,CAASN,KAAT,EAAgBI,WAAhB;AACD,WAHD;;AAIA,iBAAO,KAAKL,EAAL,CAAQC,KAAR,EAAeI,WAAf,CAAP;AACD;;AAEDE,QAAAA,GAAG,CAACN,KAAD,EAAgBC,QAAhB,EAA0C;AAC3C,cAAI,KAAKH,MAAL,CAAYE,KAAZ,CAAJ,EAAwB;AACtB,iBAAKF,MAAL,CAAYE,KAAZ,IAAqB,KAAKF,MAAL,CAAYE,KAAZ,EAAmBO,MAAnB,CAA0BC,CAAC,IAAIA,CAAC,KAAKP,QAArC,CAArB;AACD;;AACD,iBAAO,IAAP;AACD;;AAEDQ,QAAAA,IAAI,CAACT,KAAD,EAAgB,GAAGK,IAAnB,EAAyC;AAC3C,cAAI,KAAKP,MAAL,CAAYE,KAAZ,CAAJ,EAAwB;AACtB,iBAAKF,MAAL,CAAYE,KAAZ,EAAmBU,OAAnB,CAA2BT,QAAQ,IAAIA,QAAQ,CAAC,GAAGI,IAAJ,CAA/C;AACA,mBAAO,IAAP;AACD;;AACD,iBAAO,KAAP;AACD;;AAEDM,QAAAA,kBAAkB,CAACX,KAAD,EAAuB;AACvC,cAAIA,KAAJ,EAAW;AACT,iBAAKF,MAAL,CAAYE,KAAZ,IAAqB,EAArB;AACD,WAFD,MAEO;AACL,iBAAKF,MAAL,GAAc,EAAd;AACD;;AACD,iBAAO,IAAP;AACD;;AAzCuB,O,GA4C1B;;;yBACe;AAAED,QAAAA;AAAF,O","sourcesContent":["/**\n * 简单的浏览器兼容版 EventEmitter 实现\n * 替代 Node.js 的 events 模块\n */\nexport class EventEmitter {\n  private events: Record<string, Function[]> = {};\n\n  on(event: string, listener: Function): this {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(listener);\n    return this;\n  }\n\n  once(event: string, listener: Function): this {\n    const onceWrapper = (...args: any[]) => {\n      listener(...args);\n      this.off(event, onceWrapper);\n    };\n    return this.on(event, onceWrapper);\n  }\n\n  off(event: string, listener: Function): this {\n    if (this.events[event]) {\n      this.events[event] = this.events[event].filter(l => l !== listener);\n    }\n    return this;\n  }\n\n  emit(event: string, ...args: any[]): boolean {\n    if (this.events[event]) {\n      this.events[event].forEach(listener => listener(...args));\n      return true;\n    }\n    return false;\n  }\n\n  removeAllListeners(event?: string): this {\n    if (event) {\n      this.events[event] = [];\n    } else {\n      this.events = {};\n    }\n    return this;\n  }\n}\n\n// 创建默认的导出\nexport default { EventEmitter };\n"]}