{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/core/game-engine.ts"],"names":["_decorator","Component","Node","Animation","Label","CCInteger","ccclass","property","GameEngine","type","diceNodes","diceAnimations","diceLabels","start","console","warn","initDiceNodes","diceContainer","children","forEach","diceNode","push","anim","getComponent","label","getComponentInChildren","log","playShakeAnimation","shakeAnimation","play","showDiceResult","results","node","index","active","length","i","string","toString"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Animation, Label, CCInteger } from 'cc';\n// 移除了大部分导入，特别是与核心游戏逻辑和类型相关的\n// import { Face, Hand, Bid, EmptyBid, PlayerID, BidData, DiceResult, EventEmitter } from '../../shared/protocols/game-types.d';\n// import { network } from './network'; // 移除网络依赖，UI层处理\n\nconst { ccclass, property } = _decorator;\n\n/**\n * GameEngine (已简化)\n * 注意：此类中的大部分核心游戏逻辑已被移除，因为服务器是权威。\n * 此文件可能需要进一步重构或删除，具体取决于项目需求。\n * 目前保留了与潜在动画相关的属性和方法框架。\n */\n@ccclass('GameEngine')\nexport class GameEngine extends Component {\n\n  // --- 保留与动画/视觉效果可能相关的属性 ---\n  @property({type: CCInteger})\n  animationDuration: number = 1.5; // 动画持续时间示例\n\n  @property(Node)\n  diceContainer: Node | null = null; // 骰子容器引用示例\n\n  @property(Animation)\n  shakeAnimation: Animation | null = null; // 摇动动画引用示例\n\n  // --- 移除了游戏状态相关的属性 ---\n  // public readonly gameId: string;\n  // public roundNumber: number = 0;\n  // public moveNumber: number = 0;\n  // private players: Player[] = []; // 移除 Player 类和实例\n  // private activePlayers: PlayerID[] = [];\n  // private currentBid: GameBid = new GameBid(); // 移除 GameBid 类和实例\n  // private currentPlayerIndex: number = 0;\n  // private serverSeed: string = '';\n\n  // --- 移除了事件发射器 ---\n  // public onBidSubmitted = new SimpleEventEmitter<BidData>();\n  // ... 其他事件\n\n  // --- 保留与节点/动画初始化和控制相关的方法框架 ---\n  private diceNodes: Node[] = [];\n  private diceAnimations: Animation[] = [];\n  private diceLabels: Label[] = [];\n\n  /**\n   * 组件启动时\n   */\n  start() {\n    // this.initDiceNodes(); // 如果需要初始化骰子节点\n    // this.setupNetworkListeners(); // 移除网络监听，由 UI 层处理\n    console.warn(\"GameEngine component started, but most core logic is removed/handled by the server and GameUI.\");\n  }\n\n  /**\n   * 初始化骰子节点 (示例，如果需要)\n   */\n  private initDiceNodes() {\n    if (!this.diceContainer) return;\n\n    this.diceNodes = [];\n    this.diceAnimations = [];\n    this.diceLabels = [];\n\n    this.diceContainer.children.forEach(diceNode => {\n      this.diceNodes.push(diceNode);\n      const anim = diceNode.getComponent(Animation);\n      if (anim) this.diceAnimations.push(anim);\n      const label = diceNode.getComponentInChildren(Label);\n      if (label) this.diceLabels.push(label);\n    });\n    console.log(\"Dice nodes initialized (if container is set).\");\n  }\n\n  /**\n   * 播放摇骰子动画 (示例，如果需要)\n   */\n  playShakeAnimation() {\n    if (this.shakeAnimation) {\n      this.shakeAnimation.play();\n      console.log(\"Playing shake animation (if set).\");\n    } else {\n      console.warn(\"Shake animation node not set in GameEngine.\");\n    }\n\n    // 播放每个骰子的动画 (示例)\n    this.diceAnimations.forEach(anim => {\n      if (anim) {\n        // anim.play('dice_roll'); // 假设有 'dice_roll' 动画剪辑\n      }\n    });\n  }\n\n  /**\n   * 显示骰子结果 (示例，如果需要独立于 GameUI 控制)\n   * @param results 骰子结果 (Face[])\n   */\n  showDiceResult(results: number[]) { // 使用 number[] 简化，避免依赖 Face 类型\n    if (!this.diceContainer) {\n        console.warn(\"Dice container not set in GameEngine, cannot show results.\");\n        return;\n    }\n    console.log(\"GameEngine attempting to show dice results:\", results);\n\n    // 先隐藏所有骰子\n    this.diceNodes.forEach((node, index) => {\n      node.active = index < results.length;\n    });\n\n    // 显示结果\n    for (let i = 0; i < results.length && i < this.diceLabels.length; i++) {\n      if (this.diceLabels[i]) {\n        this.diceLabels[i].string = results[i].toString();\n      }\n    }\n  }\n\n  // --- 移除了所有核心游戏逻辑方法 ---\n  // setupNetworkListeners()\n  // handleChallengeResult()\n  // rollDices()\n  // syncWithServer()\n  // getCurrentPlayer()\n  // checkBidValidity()\n  // nextTurn()\n  // startNewRound()\n  // placeBid()\n  // challengeBid()\n  // handlePlayerLoss()\n  // public static rollDices() // 移除了静态方法\n\n}\n\n// --- 移除了 Player 和 GameBid 类定义 ---\n// class Player { ... }\n// class GameBid { ... }\n// class SimpleEventEmitter { ... } // 如果其他地方不用，也移除\n"]}