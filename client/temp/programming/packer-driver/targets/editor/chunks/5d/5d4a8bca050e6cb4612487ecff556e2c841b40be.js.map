{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/game-result-panel.ts"],"names":["_decorator","Component","Label","Color","Button","PlayerDisplayController","ccclass","property","GameResultPanel","onLoad","node","active","backToLobbyButton","on","onBackToLobbyClick","onDestroy","btnNode","off","showResult","data","console","log","JSON","stringify","activeInHierarchy","winnerLabel","winnerName","playerDisplayController","getPlayerNameWithAlias","winner","string","color","calculateAndShowFinalScore","finalScoreLabel","error","players","Array","isArray","scoreText","sortedPlayers","sort","a","b","id","diceCount","forEach","player","index","playerName","substring","emit","hidePanel"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, Color, Button } from 'cc';\nimport { PlayerDisplayController } from './player-display-controller';\n\nconst { ccclass, property } = _decorator;\n\n/**\n * 游戏结果面板\n * 负责显示游戏结束结果\n */\n@ccclass('GameResultPanel')\nexport class GameResultPanel extends Component {\n    @property(Label)\n    private winnerLabel: Label | null = null;\n\n    @property(Label)\n    private finalScoreLabel: Label | null = null;\n\n    @property(Button)\n    private backToLobbyButton: Button | null = null;\n\n    @property(PlayerDisplayController)\n    private playerDisplayController: PlayerDisplayController | null = null;\n\n    onLoad() {\n        // 初始隐藏面板\n        this.node.active = false;\n\n        // 设置返回大厅按钮点击事件\n        if (this.backToLobbyButton) {\n            this.backToLobbyButton.node.on('click', this.onBackToLobbyClick, this);\n        }\n    }\n\n    onDestroy() {\n        // // 移除按钮点击事件\n        // if (this.backToLobbyButton) {\n        //     this.backToLobbyButton.node.off('click', this.onBackToLobbyClick, this);\n        // }\n        // 移除按钮点击事件，防止访问已销毁的节点\n        const btnNode = this.backToLobbyButton?.node;\n        if (btnNode) {\n            btnNode.off('click', this.onBackToLobbyClick, this);\n        }\n    }\n\n    /**\n     * 显示游戏结果\n     * @param data 游戏结束数据 { winner, players }\n     */\n    public showResult(data: { winner: string, players: any[] }): void {\n        console.log(\"[GameResultPanel] showResult called with data:\", JSON.stringify(data));\n\n        // 显示面板\n        console.log(`[GameResultPanel] Setting node active: true. Current active state: ${this.node.active}`);\n        this.node.active = true;\n        console.log(`[GameResultPanel] Node active state after setting: ${this.node.active}`);\n        console.log(`[GameResultPanel] Node activeInHierarchy state after setting: ${this.node.activeInHierarchy}`);\n\n\n        // 显示获胜者\n        if (this.winnerLabel) {\n            const winnerName = this.playerDisplayController?.getPlayerNameWithAlias(data.winner) || data.winner;\n            this.winnerLabel.string = `${winnerName} 获胜!`;\n            this.winnerLabel.color = new Color(255, 215, 0, 255);\n        }\n\n        // 计算并显示最终得分\n        this.calculateAndShowFinalScore(data);\n    }\n\n    /**\n     * 计算并显示最终得分\n     * @param data 游戏结束数据 { winner, players }\n     */\n    private calculateAndShowFinalScore(data: { winner: string, players: any[] }): void {\n        console.log(\"[GameResultPanel] calculateAndShowFinalScore called.\");\n        if (!this.finalScoreLabel) {\n            console.error(\"[GameResultPanel] finalScoreLabel is not assigned!\");\n            return;\n        }\n        if (!data || !data.players || !Array.isArray(data.players)) {\n            console.error(\"[GameResultPanel] Invalid or missing players data in calculateAndShowFinalScore:\", data);\n            this.finalScoreLabel.string = \"错误：无法加载得分\";\n            return;\n        }\n        console.log(\"[GameResultPanel] Received players data:\", JSON.stringify(data.players));\n\n        let scoreText = \"最终得分:\\n\";\n        const sortedPlayers = [...data.players].sort((a, b) => {\n            if (a.id === data.winner) return -1;\n            if (b.id === data.winner) return 1;\n            return b.diceCount - a.diceCount; // Sort by dice count descending (winner handled first)\n        });\n        console.log(\"[GameResultPanel] Sorted players data:\", JSON.stringify(sortedPlayers));\n\n        sortedPlayers.forEach((player, index) => {\n            // Ensure player object and id exist\n            if (!player || typeof player.id === 'undefined') {\n                console.error(\"[GameResultPanel] Invalid player object in sortedPlayers:\", player);\n                scoreText += `${index + 1}. 无效玩家数据\\n`;\n                return; // Skip this player\n            }\n            const playerName = this.playerDisplayController?.getPlayerNameWithAlias(player.id) || `玩家 ${player.id.substring(0, 4)}`;\n            const diceCount = typeof player.diceCount === 'number' ? player.diceCount : '?'; // Handle missing diceCount\n            scoreText += `${index + 1}. ${playerName}: ${diceCount} 骰子\\n`;\n        });\n\n        console.log(\"[GameResultPanel] Final score text:\", scoreText);\n        this.finalScoreLabel.string = scoreText;\n    }\n\n    /**\n     * 处理返回大厅按钮点击\n     */\n    private onBackToLobbyClick(): void {\n        console.log(\"[GameResultPanel] onBackToLobbyClick called.\");\n        // 发出事件让上层管理器处理场景切换\n        this.node.emit('back-to-lobby-requested');\n    }\n\n    /**\n     * 隐藏结果面板\n     */\n    public hidePanel(): void {\n        this.node.active = false;\n    }\n}\n"]}