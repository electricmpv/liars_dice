{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/prefabs/count-list-item.ts"],"names":["_decorator","Component","Label","Button","Color","ccclass","property","CountListItem","_count","_handlerTarget","countValue","setup","count","handlerTarget","label","string","toString","buttonComponent","node","off","EventType","CLICK","onClick","on","console","warn","interactable","log","name","isValid","handlerExists","handleCountSelection","error","setInteractable","color","WHITE","GRAY"],"mappings":"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","sourcesContent":["import { _decorator, Component, Label, Button, Color, Event, Node } from 'cc'; // Import Event and Node (Remove EventCustom)\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CountListItem')\r\nexport class CountListItem extends Component {\r\n    @property(Label)\r\n    label: Label | null = null;\r\n\r\n    // 添加一个属性来关联 Button 组件\r\n    @property(Button)\r\n    buttonComponent: Button | null = null;\r\n\r\n    private _count: number = 0;\r\n    private _handlerTarget: Component | null = null; // Store the target component\r\n\r\n    /** Public getter for the count value */\r\n    public get countValue(): number {\r\n        return this._count;\r\n    }\r\n\r\n    /**\r\n     * 初始化列表项\r\n     * @param count 该项代表的数量\r\n     * @param handlerTarget 接收 'count-selected' 事件的目标组件 (e.g., BidController)\r\n     */\r\n    setup(count: number, handlerTarget: Component) {\r\n        this._count = count;\r\n        this._handlerTarget = handlerTarget; // Store the target\r\n        if (this.label) {\r\n            this.label.string = count.toString();\r\n        }\r\n\r\n        // 使用关联的 buttonComponent 属性\r\n        if (this.buttonComponent) {\r\n             // 清除旧的监听器 (更安全地针对特定节点)\r\n             this.buttonComponent.node.off(Button.EventType.CLICK, this.onClick, this);\r\n             // 不建议在代码中清除编辑器事件 (button.clickEvents = [])\r\n             // 请依赖在编辑器中手动移除错误配置\r\n\r\n             // 直接用 node.on 添加监听器\r\n             this.buttonComponent.node.on(Button.EventType.CLICK, this.onClick, this);\r\n        } else {\r\n            // 更新警告信息\r\n            console.warn(`[CountListItem] Button component property 'buttonComponent' not linked in the editor for node of count ${this._count}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理按钮点击事件\r\n     */\r\n    onClick() {\r\n        // 在发射事件前检查按钮是否可交互\r\n        if (this.buttonComponent && !this.buttonComponent.interactable) {\r\n            console.log(`[CountListItem] onClick ignored: Button not interactable for count ${this._count}`);\r\n            return;\r\n        }\r\n        console.log(`[CountListItem] onClick: Calling handler on target for count: ${this._count} from node: ${this.node.name}`);\r\n        console.log(`[CountListItem] Handler target: ${this._handlerTarget?.name}, Target valid: ${this._handlerTarget?.isValid}`); // Log target info\r\n\r\n        // Check if the target and method exist\r\n        const handlerExists = this._handlerTarget && typeof (this._handlerTarget as any).handleCountSelection === 'function';\r\n        console.log(`[CountListItem] handleCountSelection exists on target: ${handlerExists}`);\r\n\r\n        if (handlerExists) {\r\n             try {\r\n                 (this._handlerTarget as any).handleCountSelection({\r\n                     count: this._count,\r\n                     node: this.node\r\n                 });\r\n                 console.log(`[CountListItem] handleCountSelection called successfully.`);\r\n             } catch (error) {\r\n                 console.error(`[CountListItem] Error calling handleCountSelection:`, error);\r\n             }\r\n        } else {\r\n            console.error(`[CountListItem] Handler target or handleCountSelection method not found for count ${this._count}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置按钮的可交互状态和视觉效果\r\n     * @param interactable 是否可交互\r\n     */\r\n    setInteractable(interactable: boolean) {\r\n        // 使用关联的 buttonComponent 属性\r\n        if (this.buttonComponent) {\r\n            this.buttonComponent.interactable = interactable;\r\n        }\r\n         if (this.label) {\r\n             // 根据可交互状态改变标签颜色（示例）\r\n             this.label.color = interactable ? Color.WHITE : Color.GRAY;\r\n         }\r\n    }\r\n}\r\n"]}