{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/prefabs/dice-item.ts"],"names":["_decorator","Component","Node","Label","Sprite","Animation","SpriteFrame","tween","Vec3","Color","ccclass","property","DiceItem","_value","_isSelected","_isRolling","_originalScale","_originalPosition","NORMAL_COLOR","SELECTED_COLOR","HIGHLIGHT_COLOR","onLoad","node","scale","clone","position","highlightNode","active","start","on","EventType","TOUCH_END","onDiceClicked","onDestroy","off","setValue","value","console","error","updateDisplay","getValue","setSelected","selected","isSelected","diceFaces","length","faceSprite","spriteFrame","valueLabel","string","toString","background","color","playClickFeedback","emit","diceId","uuid","to","x","y","playRollAnimation","duration","callback","originalValue","originalSelected","rollSequence","shakeOffset","shakeTime","shakeCount","Math","floor","shakeTween","i","xOffset","random","yOffset","z","call","randomValue","then","rollToValue","finalValue","playHighlightAnimation","union","repeat"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, Sprite, Animation, SpriteFrame, math, tween, Vec3, UITransform, Color } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * 骰子预制体组件\n * 功能：\n * 1. 显示骰子点数\n * 2. 骰子摇动动画\n * 3. 骰子选中/未选中状态\n */\n@ccclass('DiceItem')\nexport class DiceItem extends Component {\n    @property(Sprite)\n    private background: Sprite = null!;\n\n    @property(Label)\n    private valueLabel: Label = null!;\n\n    @property(Node)\n    private highlightNode: Node = null!;\n\n    @property(Animation)\n    private animation: Animation = null!;\n\n    @property([SpriteFrame])\n    private diceFaces: SpriteFrame[] = [];\n\n    @property(Sprite)\n    private faceSprite: Sprite = null!;\n\n    private _value: number = 1;\n    private _isSelected: boolean = false;\n    private _isRolling: boolean = false;\n    private _originalScale: Vec3 = new Vec3(1, 1, 1);\n    private _originalPosition: Vec3 = new Vec3(0, 0, 0);\n    \n    // 颜色常量\n    private readonly NORMAL_COLOR: Color = new Color(255, 255, 255, 255);\n    private readonly SELECTED_COLOR: Color = new Color(255, 204, 0, 255);\n    private readonly HIGHLIGHT_COLOR: Color = new Color(66, 133, 244, 255);\n\n    onLoad() {\n        this._originalScale = this.node.scale.clone();\n        this._originalPosition = this.node.position.clone();\n        this.highlightNode.active = false;\n    }\n\n    start() {\n        // 注册点击事件\n        this.node.on(Node.EventType.TOUCH_END, this.onDiceClicked, this);\n    }\n\n    onDestroy() {\n        this.node.off(Node.EventType.TOUCH_END, this.onDiceClicked, this);\n    }\n\n    /**\n     * 设置骰子的值\n     * @param value 骰子点数 (1-6)\n     */\n    public setValue(value: number): void {\n        if (value < 1 || value > 6) {\n            console.error('骰子值必须在1到6之间');\n            return;\n        }\n\n        this._value = value;\n        this.updateDisplay();\n    }\n\n    /**\n     * 获取骰子当前值\n     */\n    public getValue(): number {\n        return this._value;\n    }\n\n    /**\n     * 设置骰子选中状态\n     * @param selected 是否选中\n     */\n    public setSelected(selected: boolean): void {\n        this._isSelected = selected;\n        this.updateDisplay();\n    }\n\n    /**\n     * 获取骰子当前选中状态\n     */\n    public isSelected(): boolean {\n        return this._isSelected;\n    }\n\n    /**\n     * 更新骰子显示\n     */\n    private updateDisplay(): void {\n        // 更新骰子面显示\n        if (this.diceFaces && this.diceFaces.length >= 6) {\n            this.faceSprite.spriteFrame = this.diceFaces[this._value - 1];\n        }\n\n        // 更新数字标签\n        if (this.valueLabel) {\n            this.valueLabel.string = this._value.toString();\n        }\n\n        // 更新选中状态\n        if (this.highlightNode) {\n            this.highlightNode.active = this._isSelected;\n        }\n\n        // 更新颜色\n        if (this.background) {\n            this.background.color = this._isSelected ? this.SELECTED_COLOR : this.NORMAL_COLOR;\n        }\n    }\n\n    /**\n     * 骰子点击事件处理\n     */\n    private onDiceClicked(): void {\n        if (this._isRolling) return;\n        \n        // 切换选中状态\n        this._isSelected = !this._isSelected;\n        this.updateDisplay();\n        \n        // 播放点击反馈动画\n        this.playClickFeedback();\n        \n        // 触发选中事件\n        this.node.emit('dice-selected', {\n            diceId: this.node.uuid,\n            value: this._value,\n            selected: this._isSelected\n        });\n    }\n\n    /**\n     * 播放点击反馈动画\n     */\n    private playClickFeedback(): void {\n        // 缩放动画\n        tween(this.node)\n            .to(0.1, { scale: new Vec3(this._originalScale.x * 0.9, this._originalScale.y * 0.9, 1) })\n            .to(0.1, { scale: this._originalScale })\n            .start();\n    }\n\n    /**\n     * 播放骰子摇动动画\n     * @param duration 动画持续时间\n     * @param callback 动画结束回调\n     */\n    public playRollAnimation(duration: number = 1.0, callback?: Function): void {\n        if (this._isRolling) return;\n        \n        this._isRolling = true;\n        \n        // 保存原始状态\n        const originalValue = this._value;\n        const originalSelected = this._isSelected;\n        \n        // 重置选中状态\n        this.setSelected(false);\n        \n        // 创建摇动动画序列\n        const rollSequence = () => {\n            const shakeOffset = 8;\n            const shakeTime = 0.05;\n            const shakeCount = Math.floor(duration / shakeTime / 2);\n            \n            const shakeTween = tween(this.node);\n            \n            // 添加多次摇动\n            for (let i = 0; i < shakeCount; i++) {\n                // 随机方向摇动\n                const xOffset = (Math.random() - 0.5) * 2 * shakeOffset;\n                const yOffset = (Math.random() - 0.5) * 2 * shakeOffset;\n                \n                shakeTween.to(shakeTime, { \n                    position: new Vec3(\n                        this._originalPosition.x + xOffset, \n                        this._originalPosition.y + yOffset, \n                        this._originalPosition.z\n                    )\n                });\n                \n                // 随机骰子值\n                shakeTween.call(() => {\n                    const randomValue = Math.floor(Math.random() * 6) + 1;\n                    this.setValue(randomValue);\n                });\n            }\n            \n            // 回到原始位置\n            shakeTween.to(shakeTime, { position: this._originalPosition });\n            \n            return shakeTween;\n        };\n        \n        // 执行动画\n        tween(this.node)\n            .to(0.15, { scale: new Vec3(this._originalScale.x * 1.2, this._originalScale.y * 1.2, 1) })\n            .to(0.15, { scale: this._originalScale })\n            .then(rollSequence())\n            .call(() => {\n                this._isRolling = false;\n                \n                // 如果有提供回调，则调用\n                if (callback) {\n                    callback(this._value);\n                }\n            })\n            .start();\n    }\n\n    /**\n     * 设置最终骰子值并播放动画\n     * @param finalValue 最终的骰子值 (1-6)\n     * @param duration 动画持续时间\n     * @param callback 动画结束回调\n     */\n    public rollToValue(finalValue: number, duration: number = 1.0, callback?: Function): void {\n        if (finalValue < 1 || finalValue > 6) {\n            console.error('骰子值必须在1到6之间');\n            return;\n        }\n        \n        this.playRollAnimation(duration, () => {\n            this.setValue(finalValue);\n            if (callback) {\n                callback(finalValue);\n            }\n        });\n    }\n\n    /**\n     * 播放高亮动画\n     * @param duration 高亮持续时间\n     */\n    public playHighlightAnimation(duration: number = 0.5): void {\n        // 显示高亮节点\n        this.highlightNode.active = true;\n        \n        // 创建呼吸效果\n        tween(this.highlightNode)\n            .to(duration / 2, { scale: new Vec3(1.2, 1.2, 1) })\n            .to(duration / 2, { scale: new Vec3(1, 1, 1) })\n            .union()\n            .repeat(3)\n            .call(() => {\n                // 结束后设置为当前选中状态\n                this.highlightNode.active = this._isSelected;\n            })\n            .start();\n    }\n}\n"]}