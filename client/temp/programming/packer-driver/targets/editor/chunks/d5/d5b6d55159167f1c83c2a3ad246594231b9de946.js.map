{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/shared/schemas/liar-dice-room-state-client.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;mGAA2D;;AAE3D;AACA;AACA;AACA;AACA","sourcesContent":["import { PlayerStateClient } from \"./player-state-client\"; // 导入客户端 PlayerState 接口\r\n\r\n/**\r\n * 客户端使用的 LiarDiceRoomState 纯接口定义。\r\n * 这个文件不包含任何 Colyseus Schema 或 @type 装饰器，\r\n * 确保在浏览器环境中可以安全使用。\r\n */\r\nexport interface LiarDiceRoomStateClient {\r\n  // 玩家列表: key 是 sessionId\r\n  players: Record<string, PlayerStateClient>; // 使用 Record<string, PlayerStateClient> 代替 MapSchema\r\n\r\n  // 参与当前游戏回合的玩家 sessionId 列表 (按顺序)\r\n  activePlayerIds: string[]; // 使用 string[] 代替 ArraySchema<string>\r\n\r\n  // 当前轮到的玩家在 activePlayerIds 中的索引\r\n  currentPlayerIndex: number;\r\n\r\n  // 当前叫价的点数 (1-6)\r\n  currentBidValue: number;\r\n\r\n  // 当前叫价的数量\r\n  currentBidCount: number;\r\n\r\n  // 上一个叫价的玩家 sessionId (用于质疑判断)\r\n  lastBidderSessionId: string;\r\n\r\n  // 游戏状态: waiting, playing, challenging, roundOver, finished\r\n  status: string;\r\n\r\n  // 房主 sessionId (用于开始游戏、踢人等权限)\r\n  hostId: string;\r\n\r\n  // 当前游戏回合数\r\n  roundNumber: number;\r\n\r\n  // 当前回合叫价次数 (用于判断是否可以质疑)\r\n  moveNumber: number;\r\n\r\n  // 回合结算信息 (用于显示谁输了，输了多少骰子等)\r\n  roundResult: string;\r\n\r\n  // 本回合是否已经叫过 1 点 (影响 1 点是否为万能骰)\r\n  isOneCalledThisRound: boolean;\r\n}\r\n"]}