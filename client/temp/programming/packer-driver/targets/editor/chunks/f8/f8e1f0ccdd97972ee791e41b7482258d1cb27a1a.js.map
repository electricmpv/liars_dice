{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/core/GameEngine.ts"],"names":["SimpleEventEmitter","Player","GameBid","GameEngine","listeners","on","callback","push","emit","data","forEach","listener","constructor","id","name","diceLeft","hand","buildHand","rollDices","value","count","playerId","toJSON","increase","gameId","playerNames","initialDiceCount","roundNumber","moveNumber","players","activePlayers","currentBid","currentPlayerIndex","onBidSubmitted","onDoubtTriggered","onSpotOnTriggered","onRoundComplete","onGameComplete","i","length","player","Promise","resolve","setTimeout","result","Math","ceil","random","sort","getCurrentPlayer","playerIndex","checkBidValidity","bid","dice","nextTurn","startNewRound","handPromises","map","all","console","log","placeBid","currentPlayer","challengeBid","previousBidValid","loserId","winnerId","handlePlayerLoss","winner","loser","playerIndexInActive","indexOf","splice"],"mappings":";;;8BAaMA,kB,EAeAC,M,EAoBAC,O,EA4BeC,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlErB;AACA;AACA;AACMH,MAAAA,kB,GAAN,MAAMA,kBAAN,CAAuD;AAAA;AAAA,eAC7CI,SAD6C,GACV,EADU;AAAA;;AAGrDC,QAAAA,EAAE,CAACC,QAAD,EAAoC;AACpC,eAAKF,SAAL,CAAeG,IAAf,CAAoBD,QAApB;AACD;;AAEDE,QAAAA,IAAI,CAACC,IAAD,EAAgB;AAClB,eAAKL,SAAL,CAAeM,OAAf,CAAuBC,QAAQ,IAAIA,QAAQ,CAACF,IAAD,CAA3C;AACD;;AAToD,O;AAYvD;AACA;AACA;;AACMR,MAAAA,M,GAAN,MAAMA,MAAN,CAAa;AAGXW,QAAAA,WAAW,CACFC,EADE,EAEFC,IAFE,EAGFC,QAHE,EAIT;AAAA,eANKC,IAML;AAAA,eAHOH,EAGP,GAHOA,EAGP;AAAA,eAFOC,IAEP,GAFOA,IAEP;AAAA,eADOC,QACP,GADOA,QACP;AAAE;AAEJ;AACF;AACA;;;AACwB,cAATE,SAAS,GAAkB;AACtC,eAAKD,IAAL,GAAY,MAAMb,UAAU,CAACe,SAAX,CAAqB,KAAKH,QAA1B,CAAlB;AACD;;AAdU,O;AAiBb;AACA;AACA;;AACMb,MAAAA,O,GAAN,MAAMA,OAAN,CAAc;AACZU,QAAAA,WAAW,CAAQO,KAAa,GAAG,CAAxB,EAAkCC,KAAa,GAAG,CAAlD,EAA4DC,QAAkB,GAAG,CAAC,CAAlF,EAAqF;AAAA,eAA7EF,KAA6E,GAA7EA,KAA6E;AAAA,eAAnDC,KAAmD,GAAnDA,KAAmD;AAAA,eAAzBC,QAAyB,GAAzBA,QAAyB;AAAE;;AAElGC,QAAAA,MAAM,GAAmB;AACvB,iBAAO,KAAKF,KAAL,KAAe,CAAf,GAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,GAA4B,CAAC,KAAKD,KAAN,EAAqB,KAAKC,KAA1B,CAAnC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEG,QAAAA,QAAQ,CAACJ,KAAD,EAAgBC,KAAhB,EAA+BC,QAA/B,EAA4D;AAClE,cAAI,EAAED,KAAK,IAAI,KAAKA,KAAd,IAAuBA,KAAK,GAAG,CAA/B,KACAA,KAAK,GAAG,KAAKA,KAAb,IAAsBD,KAAK,GAAG,KAAKA,KADnC,CAAF,CAAJ,EAEE,OAAO,KAAP;AAEF,eAAKC,KAAL,GAAaA,KAAb;AACA,eAAKD,KAAL,GAAaA,KAAb;AACA,eAAKE,QAAL,GAAgBA,QAAhB;AACA,iBAAO,IAAP;AACD;;AAtBW,O;AAyBd;AACA;AACA;;yBACqBlB,U,GAAN,MAAMA,UAAN,CAAiB;AAqB9B;AACF;AACA;AACA;AACA;AACA;AACES,QAAAA,WAAW,CACTY,MADS,EAETC,WAFS,EAGTC,gBAAwB,GAAG,CAHlB,EAIT;AA9BF;AA8BE,eA7BcF,MA6Bd;AAAA,eA5BKG,WA4BL,GA5B2B,CA4B3B;AAAA,eA3BKC,UA2BL,GA3B0B,CA2B1B;AAzBF;AAyBE,eAxBMC,OAwBN,GAxB0B,EAwB1B;AAAA,eAvBMC,aAuBN,GAvBkC,EAuBlC;AArBF;AAqBE,eApBMC,UAoBN,GApB4B,IAAI7B,OAAJ,EAoB5B;AAAA,eAnBM8B,kBAmBN,GAnBmC,CAmBnC;AAjBF;AAiBE,eAhBKC,cAgBL,GAhBsB,IAAIjC,kBAAJ,EAgBtB;AAAA,eAfKkC,gBAeL,GAfwB,IAAIlC,kBAAJ,EAexB;AAAA,eAdKmC,iBAcL,GAdyB,IAAInC,kBAAJ,EAczB;AAAA,eAbKoC,eAaL,GAbuB,IAAIpC,kBAAJ,EAavB;AAAA,eAZKqC,cAYL,GAZsB,IAAIrC,kBAAJ,EAYtB;AACA,eAAKwB,MAAL,GAAcA,MAAd,CADA,CAGA;;AACA,eAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,WAAW,CAACc,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,kBAAME,MAAM,GAAG,IAAIvC,MAAJ,CAAWqC,CAAC,GAAC,CAAb,EAAgBb,WAAW,CAACa,CAAD,CAA3B,EAAgCZ,gBAAhC,CAAf;AACA,iBAAKG,OAAL,CAAatB,IAAb,CAAkBiC,MAAlB;AACA,iBAAKV,aAAL,CAAmBvB,IAAnB,CAAwB+B,CAAxB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACyB,eAATpB,SAAS,CAACE,KAAD,EAA+B;AACpD;AACA,iBAAO,IAAIqB,OAAJ,CAAmBC,OAAD,IAAa;AACpCC,YAAAA,UAAU,CAAC,MAAM;AACf,oBAAMC,MAAY,GAAG,EAArB;;AACA,mBAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,KAApB,EAA2BkB,CAAC,EAA5B,EAAgC;AAC9B,sBAAMnB,KAAK,GAAG0B,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CAAd;AACAH,gBAAAA,MAAM,CAACrC,IAAP,CAAYY,KAAZ;AACD;;AACDyB,cAAAA,MAAM,CAACI,IAAP;AACAN,cAAAA,OAAO,CAACE,MAAD,CAAP;AACD,aARS,EAQP,GARO,CAAV,CADoC,CAS3B;AACV,WAVM,CAAP;AAWD;AAED;AACF;AACA;;;AACSK,QAAAA,gBAAgB,GAAW;AAChC,gBAAMC,WAAW,GAAG,KAAKpB,aAAL,CAAmB,KAAKE,kBAAxB,CAApB;AACA,iBAAO,KAAKH,OAAL,CAAaqB,WAAb,CAAP;AACD;AAED;AACF;AACA;;;AACUC,QAAAA,gBAAgB,CAACC,GAAD,EAAwB;AAC9C,cAAIhC,KAAK,GAAG,CAAZ;AACA,gBAAMD,KAAK,GAAGiC,GAAG,CAACjC,KAAlB,CAF8C,CAI9C;;AACA,eAAK,MAAM+B,WAAX,IAA0B,KAAKpB,aAA/B,EAA8C;AAC5C,kBAAMU,MAAM,GAAG,KAAKX,OAAL,CAAaqB,WAAb,CAAf;AACA,kBAAMlC,IAAI,GAAGwB,MAAM,CAACxB,IAAP,IAAe,EAA5B;;AAEA,iBAAK,MAAMqC,IAAX,IAAmBrC,IAAnB,EAAyB;AACvB,kBAAIqC,IAAI,KAAKlC,KAAb,EAAoB;AAClBC,gBAAAA,KAAK;AACN;AACF;AACF;;AAED,iBAAOA,KAAK,IAAIgC,GAAG,CAAChC,KAApB;AACD;AAED;AACF;AACA;;;AACUkC,QAAAA,QAAQ,GAAS;AACvB,eAAKtB,kBAAL,GAA0B,CAAC,KAAKA,kBAAL,GAA0B,CAA3B,IAAgC,KAAKF,aAAL,CAAmBS,MAA7E;AACD;AAED;AACF;AACA;;;AAC4B,cAAbgB,aAAa,GAAkB;AAC1C,eAAK5B,WAAL;AACA,eAAKC,UAAL,GAAkB,CAAlB;AACA,eAAKG,UAAL,GAAkB,IAAI7B,OAAJ,EAAlB,CAH0C,CAK1C;;AACA,gBAAMsD,YAAY,GAAG,KAAK1B,aAAL,CAAmB2B,GAAnB,CACnBP,WAAW,IAAI,KAAKrB,OAAL,CAAaqB,WAAb,EAA0BjC,SAA1B,EADI,CAArB;AAGA,gBAAMwB,OAAO,CAACiB,GAAR,CAAYF,YAAZ,CAAN;AAEAG,UAAAA,OAAO,CAACC,GAAR,CAAa,MAAK,KAAKjC,WAAY,MAAnC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACSkC,QAAAA,QAAQ,CAACxC,QAAD,EAAqBF,KAArB,EAAoCC,KAApC,EAA4D;AACzE;AACA,gBAAM0C,aAAa,GAAG,KAAKb,gBAAL,EAAtB;;AACA,cAAIa,aAAa,CAACjD,EAAd,KAAqBQ,QAAzB,EAAmC;AACjC,mBAAO,KAAP;AACD,WALwE,CAOzE;;;AACA,cAAI,CAAC,KAAKU,UAAL,CAAgBR,QAAhB,CAAyBJ,KAAzB,EAAgCC,KAAhC,EAAuCC,QAAvC,CAAL,EAAuD;AACrD,mBAAO,KAAP;AACD,WAVwE,CAYzE;;;AACA,eAAKO,UAAL;AACA,eAAK0B,QAAL,GAdyE,CAgBzE;;AACA,eAAKrB,cAAL,CAAoBzB,IAApB,CAAyB;AACvBa,YAAAA,QADuB;AAEvB+B,YAAAA,GAAG,EAAE,CAACjC,KAAD,EAAgBC,KAAhB;AAFkB,WAAzB;AAKA,iBAAO,IAAP;AACD;AAED;AACF;AACA;AACA;;;AACS2C,QAAAA,YAAY,CAAC1C,QAAD,EAAoC;AACrD;AACA,gBAAMyC,aAAa,GAAG,KAAKb,gBAAL,EAAtB;;AACA,cAAIa,aAAa,CAACjD,EAAd,KAAqBQ,QAAzB,EAAmC;AACjC,mBAAOoB,OAAO,CAACC,OAAR,EAAP;AACD,WALoD,CAOrD;;;AACA,gBAAMsB,gBAAgB,GAAG,KAAKb,gBAAL,CAAsB,KAAKpB,UAA3B,CAAzB,CARqD,CAUrD;;AACA,eAAKG,gBAAL,CAAsB1B,IAAtB,CAA2Ba,QAA3B;AAEA,cAAI4C,OAAJ;AACA,cAAIC,QAAJ;;AAEA,cAAIF,gBAAJ,EAAsB;AACpB;AACAC,YAAAA,OAAO,GAAG5C,QAAV;AACA6C,YAAAA,QAAQ,GAAG,KAAKnC,UAAL,CAAgBV,QAA3B;AACD,WAJD,MAIO;AACL;AACA4C,YAAAA,OAAO,GAAG,KAAKlC,UAAL,CAAgBV,QAA1B;AACA6C,YAAAA,QAAQ,GAAG7C,QAAX;AACD,WAxBoD,CA0BrD;;;AACA,eAAK8C,gBAAL,CAAsBF,OAAtB,EA3BqD,CA6BrD;;AACA,eAAK7B,eAAL,CAAqB5B,IAArB,CAA0B;AACxB4D,YAAAA,MAAM,EAAEF,QADgB;AAExBG,YAAAA,KAAK,EAAEJ;AAFiB,WAA1B;AAIA,iBAAOxB,OAAO,CAACC,OAAR,EAAP;AACD;AAED;AACF;AACA;AACA;;;AACUyB,QAAAA,gBAAgB,CAAC9C,QAAD,EAA2B;AACjD;AACA,eAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKT,OAAL,CAAaU,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,gBAAI,KAAKT,OAAL,CAAaS,CAAb,EAAgBzB,EAAhB,KAAuBQ,QAA3B,EAAqC;AACnC,mBAAKQ,OAAL,CAAaS,CAAb,EAAgBvB,QAAhB,IAA4B,CAA5B,CADmC,CAGnC;;AACA,kBAAI,KAAKc,OAAL,CAAaS,CAAb,EAAgBvB,QAAhB,IAA4B,CAAhC,EAAmC;AACjC,sBAAMuD,mBAAmB,GAAG,KAAKxC,aAAL,CAAmByC,OAAnB,CAA2BjC,CAA3B,CAA5B;;AACA,oBAAIgC,mBAAmB,KAAK,CAAC,CAA7B,EAAgC;AAC9B,uBAAKxC,aAAL,CAAmB0C,MAAnB,CAA0BF,mBAA1B,EAA+C,CAA/C;AACD,iBAJgC,CAMjC;;;AACA,oBAAI,KAAKxC,aAAL,CAAmBS,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,wBAAM2B,QAAQ,GAAG,KAAKrC,OAAL,CAAa,KAAKC,aAAL,CAAmB,CAAnB,CAAb,EAAoCjB,EAArD;AACA,uBAAKwB,cAAL,CAAoB7B,IAApB,CAAyB0D,QAAzB;AACD;AACF;;AACD;AACD;AACF;AACF;;AAtN6B,O","sourcesContent":["import { \n  Face, \n  Hand, \n  Bid, \n  EmptyBid, \n  PlayerID, \n  BidData,\n  EventEmitter\n} from '../../shared/protocols/game-types.d';\n\n/**\n * 简单事件发射器实现\n */\nclass SimpleEventEmitter<T> implements EventEmitter<T> {\n  private listeners: ((data: T) => void)[] = [];\n\n  on(callback: (data: T) => void): void {\n    this.listeners.push(callback);\n  }\n\n  emit(data: T): void {\n    this.listeners.forEach(listener => listener(data));\n  }\n}\n\n/**\n * 玩家类\n */\nclass Player {\n  public hand?: Hand;\n\n  constructor (\n    public id: PlayerID,\n    public name: string,\n    public diceLeft: number,\n  ) {}\n\n  /**\n   * 生成玩家的骰子\n   */\n  public async buildHand(): Promise<void> {\n    this.hand = await GameEngine.rollDices(this.diceLeft);\n  }\n}\n\n/**\n * 竞价信息类\n */\nclass GameBid {\n  constructor(public value: number = 0, public count: number = 0, public playerId: PlayerID = -1) {}\n  \n  toJSON(): Bid | EmptyBid {\n    return this.count === 0 ? [0, 0] : [this.value as Face, this.count];\n  }\n\n  /**\n   * 提高竞价\n   * @param value 骰子面值\n   * @param count 骰子数量\n   * @returns 竞价是否有效\n   */\n  increase(value: number, count: number, playerId: PlayerID): boolean {\n    if (!(count >= this.count && count > 0\n      && (count > this.count || value > this.value)))\n      return false;\n      \n    this.count = count;\n    this.value = value;\n    this.playerId = playerId;\n    return true;\n  }\n}\n\n/**\n * 游戏引擎\n */\nexport default class GameEngine {\n  // 游戏信息\n  public readonly gameId: string;\n  public roundNumber: number = 0;\n  public moveNumber: number = 0;\n\n  // 玩家相关\n  private players: Player[] = [];\n  private activePlayers: PlayerID[] = [];\n  \n  // 当前状态\n  private currentBid: GameBid = new GameBid();\n  private currentPlayerIndex: number = 0;\n\n  // 网络事件桩\n  public onBidSubmitted = new SimpleEventEmitter<BidData>();\n  public onDoubtTriggered = new SimpleEventEmitter<PlayerID>();\n  public onSpotOnTriggered = new SimpleEventEmitter<PlayerID>();\n  public onRoundComplete = new SimpleEventEmitter<{winner: PlayerID, loser: PlayerID}>();\n  public onGameComplete = new SimpleEventEmitter<PlayerID>();\n\n  /**\n   * 创建游戏引擎实例\n   * @param gameId 游戏ID\n   * @param playerNames 玩家名称数组\n   * @param initialDiceCount 初始骰子数量\n   */\n  constructor(\n    gameId: string, \n    playerNames: string[], \n    initialDiceCount: number = 5\n  ) {\n    this.gameId = gameId;\n    \n    // 初始化玩家\n    for (let i = 0; i < playerNames.length; i++) {\n      const player = new Player(i+1, playerNames[i], initialDiceCount);\n      this.players.push(player);\n      this.activePlayers.push(i);\n    }\n  }\n\n  /**\n   * 掷骰子生成结果\n   * @param count 骰子数量\n   * @returns 骰子结果\n   */\n  public static rollDices(count: number): Promise<Hand> {\n    // 模拟异步操作\n    return new Promise<Hand>((resolve) => {\n      setTimeout(() => {\n        const result: Hand = [];\n        for (let i = 0; i < count; i++) {\n          const value = Math.ceil(Math.random() * 6) as Face;\n          result.push(value);\n        }\n        result.sort();\n        resolve(result);\n      }, 500); // 添加500ms延迟模拟网络或动画效果\n    });\n  }\n\n  /**\n   * 获取当前玩家\n   */\n  public getCurrentPlayer(): Player {\n    const playerIndex = this.activePlayers[this.currentPlayerIndex];\n    return this.players[playerIndex];\n  }\n\n  /**\n   * 检查竞价有效性\n   */\n  private checkBidValidity(bid: GameBid): boolean {\n    let count = 0;\n    const value = bid.value;\n\n    // 统计所有玩家手中符合条件的骰子数量\n    for (const playerIndex of this.activePlayers) {\n      const player = this.players[playerIndex];\n      const hand = player.hand || [];\n      \n      for (const dice of hand) {\n        if (dice === value) {\n          count++;\n        }\n      }\n    }\n\n    return count >= bid.count;\n  }\n\n  /**\n   * 轮转到下一个玩家\n   */\n  private nextTurn(): void {\n    this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.activePlayers.length;\n  }\n\n  /**\n   * 开始新的回合\n   */\n  public async startNewRound(): Promise<void> {\n    this.roundNumber++;\n    this.moveNumber = 0;\n    this.currentBid = new GameBid();\n    \n    // 为所有玩家生成新的骰子\n    const handPromises = this.activePlayers.map(\n      playerIndex => this.players[playerIndex].buildHand()\n    );\n    await Promise.all(handPromises);\n    \n    console.log(`回合 ${this.roundNumber} 开始!`);\n  }\n\n  /**\n   * 处理玩家竞价\n   * @param playerId 玩家ID\n   * @param value 骰子面值\n   * @param count 骰子数量\n   */\n  public placeBid(playerId: PlayerID, value: number, count: number): boolean {\n    // 确保是当前玩家的回合\n    const currentPlayer = this.getCurrentPlayer();\n    if (currentPlayer.id !== playerId) {\n      return false;\n    }\n\n    // 尝试提高竞价\n    if (!this.currentBid.increase(value, count, playerId)) {\n      return false;\n    }\n\n    // 更新游戏状态\n    this.moveNumber++;\n    this.nextTurn();\n    \n    // 触发竞价事件\n    this.onBidSubmitted.emit({\n      playerId,\n      bid: [value as Face, count]\n    });\n    \n    return true;\n  }\n\n  /**\n   * 处理玩家质疑\n   * @param playerId 质疑的玩家ID\n   */\n  public challengeBid(playerId: PlayerID): Promise<void> {\n    // 确保是当前玩家的回合\n    const currentPlayer = this.getCurrentPlayer();\n    if (currentPlayer.id !== playerId) {\n      return Promise.resolve();\n    }\n\n    // 检查上一个竞价的有效性\n    const previousBidValid = this.checkBidValidity(this.currentBid);\n    \n    // 触发质疑事件\n    this.onDoubtTriggered.emit(playerId);\n    \n    let loserId: PlayerID;\n    let winnerId: PlayerID;\n    \n    if (previousBidValid) {\n      // 如果竞价有效，质疑者输\n      loserId = playerId;\n      winnerId = this.currentBid.playerId;\n    } else {\n      // 如果竞价无效，上一个竞价者输\n      loserId = this.currentBid.playerId;\n      winnerId = playerId;\n    }\n    \n    // 减少失败者的骰子数量\n    this.handlePlayerLoss(loserId);\n    \n    // 触发回合结束事件\n    this.onRoundComplete.emit({\n      winner: winnerId,\n      loser: loserId\n    });\n    return Promise.resolve();\n  }\n\n  /**\n   * 处理玩家失败(减少骰子数量)\n   * @param playerId 失败的玩家ID\n   */\n  private handlePlayerLoss(playerId: PlayerID): void {\n    // 找到对应的玩家并减少骰子\n    for (let i = 0; i < this.players.length; i++) {\n      if (this.players[i].id === playerId) {\n        this.players[i].diceLeft -= 1;\n        \n        // 如果玩家没有骰子了，从活跃列表中移除\n        if (this.players[i].diceLeft <= 0) {\n          const playerIndexInActive = this.activePlayers.indexOf(i);\n          if (playerIndexInActive !== -1) {\n            this.activePlayers.splice(playerIndexInActive, 1);\n          }\n          \n          // 如果只剩一个玩家，游戏结束\n          if (this.activePlayers.length === 1) {\n            const winnerId = this.players[this.activePlayers[0]].id;\n            this.onGameComplete.emit(winnerId);\n          }\n        }\n        break;\n      }\n    }\n  }\n}\n"]}