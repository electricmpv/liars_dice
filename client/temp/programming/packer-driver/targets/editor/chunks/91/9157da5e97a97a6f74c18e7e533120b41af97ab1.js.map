{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/shared/schemas/LiarDiceState.ts"],"names":["LiarDiceRoomState","PlayerState","constructor","data","players","Map","activePlayerIds","currentPlayerIndex","currentBidValue","currentBidCount","lastBidderSessionId","status","hostId","roundNumber","moveNumber","roundResult","isOneCalledThisRound","update","undefined","clear","Array","isArray","playerData","sessionId","set","getCurrentPlayer","length","currentSessionId","get","getLastBidder","getHost","getPlayersArray","from","values","getActivePlayersArray","map","filter","player"],"mappings":"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","sourcesContent":["import { PlayerState } from \"./PlayerState\";\r\n\r\n/**\r\n * 客户端专用的骰子游戏房间状态\r\n * 用于解决Colyseus Schema导入问题\r\n */\r\nexport class LiarDiceRoomState {\r\n  // 玩家列表: key 是 sessionId\r\n  players: Map<string, PlayerState> = new Map<string, PlayerState>();\r\n\r\n  // 参与当前游戏回合的玩家 sessionId 列表 (按顺序)\r\n  activePlayerIds: string[] = [];\r\n\r\n  // 当前轮到的玩家在 activePlayerIds 中的索引\r\n  currentPlayerIndex: number = 0;\r\n\r\n  // 当前叫价的点数 (1-6)\r\n  currentBidValue: number = 0; // 0 表示尚未开始叫价\r\n\r\n  // 当前叫价的数量\r\n  currentBidCount: number = 0; // 0 表示尚未开始叫价\r\n\r\n  // 上一个叫价的玩家 sessionId (用于质疑判断)\r\n  lastBidderSessionId: string = \"\";\r\n\r\n  // 游戏状态: waiting, playing, challenging, roundOver, finished\r\n  status: string = \"waiting\";\r\n\r\n  // 房主 sessionId (用于开始游戏、踢人等权限)\r\n  hostId: string = \"\";\r\n\r\n  // 当前游戏回合数\r\n  roundNumber: number = 0;\r\n\r\n  // 当前回合叫价次数 (用于判断是否可以质疑)\r\n  moveNumber: number = 0;\r\n\r\n  // 回合结算信息 (用于显示谁输了，输了多少骰子等)\r\n  roundResult: string = \"\";\r\n\r\n  // 本回合是否已经叫过 1 点 (影响 1 点是否为万能骰)\r\n  isOneCalledThisRound: boolean = false;\r\n  \r\n  // 从服务器数据构造\r\n  constructor(data?: any) {\r\n    if (data) {\r\n      this.update(data);\r\n    }\r\n  }\r\n  \r\n  // 从服务器数据更新\r\n  update(data: any): void {\r\n    if (!data) return;\r\n    \r\n    // 更新基本属性\r\n    if (data.currentPlayerIndex !== undefined) this.currentPlayerIndex = data.currentPlayerIndex;\r\n    if (data.currentBidValue !== undefined) this.currentBidValue = data.currentBidValue;\r\n    if (data.currentBidCount !== undefined) this.currentBidCount = data.currentBidCount;\r\n    if (data.lastBidderSessionId !== undefined) this.lastBidderSessionId = data.lastBidderSessionId;\r\n    if (data.status !== undefined) this.status = data.status;\r\n    if (data.hostId !== undefined) this.hostId = data.hostId;\r\n    if (data.roundNumber !== undefined) this.roundNumber = data.roundNumber;\r\n    if (data.moveNumber !== undefined) this.moveNumber = data.moveNumber;\r\n    if (data.roundResult !== undefined) this.roundResult = data.roundResult;\r\n    if (data.isOneCalledThisRound !== undefined) this.isOneCalledThisRound = data.isOneCalledThisRound;\r\n    \r\n    // 更新活跃玩家列表\r\n    if (data.activePlayerIds) {\r\n      this.activePlayerIds = [...data.activePlayerIds];\r\n    }\r\n    \r\n    // 更新玩家数据\r\n    if (data.players) {\r\n      // 清空玩家列表，重新添加\r\n      this.players.clear();\r\n      \r\n      // 如果是数组，则遍历添加\r\n      if (Array.isArray(data.players)) {\r\n        for (const playerData of data.players) {\r\n          if (playerData && playerData.sessionId) {\r\n            this.players.set(playerData.sessionId, new PlayerState(playerData));\r\n          }\r\n        }\r\n      } \r\n      // 如果是对象，则遍历键值对\r\n      else if (typeof data.players === 'object') {\r\n        for (const sessionId in data.players) {\r\n          const playerData = data.players[sessionId];\r\n          if (playerData) {\r\n            this.players.set(sessionId, new PlayerState(playerData));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // 获取当前玩家\r\n  getCurrentPlayer(): PlayerState | undefined {\r\n    if (this.activePlayerIds.length === 0) return undefined;\r\n    const currentSessionId = this.activePlayerIds[this.currentPlayerIndex];\r\n    return this.players.get(currentSessionId);\r\n  }\r\n  \r\n  // 获取上一个叫价的玩家\r\n  getLastBidder(): PlayerState | undefined {\r\n    if (!this.lastBidderSessionId) return undefined;\r\n    return this.players.get(this.lastBidderSessionId);\r\n  }\r\n  \r\n  // 获取房主\r\n  getHost(): PlayerState | undefined {\r\n    if (!this.hostId) return undefined;\r\n    return this.players.get(this.hostId);\r\n  }\r\n  \r\n  // 获取所有玩家数组\r\n  getPlayersArray(): PlayerState[] {\r\n    return Array.from(this.players.values());\r\n  }\r\n  \r\n  // 获取活跃玩家数组\r\n  getActivePlayersArray(): PlayerState[] {\r\n    return this.activePlayerIds\r\n      .map(sessionId => this.players.get(sessionId))\r\n      .filter((player): player is PlayerState => player !== undefined);\r\n  }\r\n}\r\n"]}