{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/dice-display-controller.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Sprite","Label","Color","resources","SpriteFrame","ccclass","property","DiceDisplayController","displayDices","dices","console","log","JSON","stringify","diceSpritePrefab","error","dicesContainer","warn","removeAllChildren","forEach","faceValue","diceNode","sprite","getComponent","dirPath","spriteFrameName","loadDir","err","spriteFrames","isValid","spriteFrame","find","sf","name","label","addComponent","string","color","BLACK","fontSize","horizontalAlign","HorizontalAlign","CENTER","verticalAlign","VerticalAlign","addChild","destroy","clearDices"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Sprite, Label, Color, resources, SpriteFrame } from 'cc';\nimport { Face } from '../../shared/protocols/game-types.d';\n\nconst { ccclass, property } = _decorator;\n\n/**\n * 骰子显示控制器\n * 负责显示玩家的骰子\n */\n@ccclass('DiceDisplayController')\nexport class DiceDisplayController extends Component {\n    @property(Node)\n    private dicesContainer: Node | null = null;\n\n    @property(Prefab)\n    private diceSpritePrefab: Prefab | null = null;\n\n    /**\n     * 显示骰子\n     * @param dices 骰子数组\n     */\n    public displayDices(dices: Face[]): void {\n        console.log(\"[DiceDisplayController] displayDices called. Dices:\", JSON.stringify(dices));\n        if (!this.diceSpritePrefab) {\n            console.error(\"[DiceDisplayController] Dice sprite prefab is not set!\");\n            return;\n        }\n        if (!this.dicesContainer) {\n            console.warn(\"[DiceDisplayController] Dice container is not set.\");\n            return;\n        }\n\n        this.dicesContainer.removeAllChildren();\n\n        dices.forEach(faceValue => {\n            const diceNode = instantiate(this.diceSpritePrefab);\n            if (!diceNode || !(diceNode instanceof Node)) {\n                console.error(`[DiceDisplayController] Failed to instantiate dice prefab for value: ${faceValue}`);\n                return;\n            }\n\n            let sprite = diceNode.getComponent(Sprite);\n            if (sprite) {\n                const dirPath = 'textures/dice';\n                const spriteFrameName = `dice_${faceValue}`;\n                resources.loadDir(dirPath, SpriteFrame, (err, spriteFrames) => {\n                    if (!diceNode || !diceNode.isValid || !sprite || !sprite.isValid) return;\n                    if (err) {\n                        console.error(`[DiceDisplayController] Failed to load dice directory: ${dirPath}`, err);\n                        sprite.spriteFrame = null; return;\n                    }\n                    const spriteFrame = spriteFrames.find(sf => sf.name === spriteFrameName);\n                    if (!spriteFrame) {\n                        console.warn(`[DiceDisplayController] SpriteFrame '${spriteFrameName}' not found in '${dirPath}'`);\n                        sprite.spriteFrame = null; return;\n                    }\n                    sprite.spriteFrame = spriteFrame;\n                });\n            } else {\n                console.warn(`[DiceDisplayController] Dice prefab is missing Sprite component.`);\n                let label = diceNode.getComponent(Label) || diceNode.addComponent(Label);\n                label.string = `${faceValue}`;\n                label.color = Color.BLACK;\n                label.fontSize = 20;\n                label.horizontalAlign = Label.HorizontalAlign.CENTER;\n                label.verticalAlign = Label.VerticalAlign.CENTER;\n            }\n\n            if (this.dicesContainer && diceNode.isValid) {\n                this.dicesContainer.addChild(diceNode);\n            } else if (diceNode && !diceNode.isValid) {\n                diceNode.destroy();\n            }\n        });\n    }\n\n    /**\n     * 清空骰子显示\n     */\n    public clearDices(): void {\n        if (this.dicesContainer) {\n            this.dicesContainer.removeAllChildren();\n        }\n    }\n}\n"]}