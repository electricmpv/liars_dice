{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/core/error-handler.ts"],"names":["NetworkErrorHandler","director","Color","NetworkManager","NetworkStatus","NetworkErrorType","initStatusLabel","label","statusLabel","updateConnectionStatus","getInstance","status","on","CONNECTED","DISCONNECTED","ERROR","manualReconnect","retryCount","CONNECTING","console","log","err","error","string","color","handleConnectionError","message","errorType","getErrorType","TIMEOUT","showRetryDialog","CONNECTION_REFUSED","SERVER_ERROR","toLowerCase","includes","UNKNOWN","warn","retryConnection","errorCode","maxRetryCount","loadScene","setTimeout","retryDelay"],"mappings":"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","sourcesContent":["import { _decorator, Node, Label, director, Color } from 'cc';\nimport { NetworkManager, NetworkStatus } from './network';\n\n/**\n * 网络错误类型\n */\nexport enum NetworkErrorType {\n    TIMEOUT = 'timeout',\n    CONNECTION_REFUSED = 'connection_refused',\n    SERVER_ERROR = 'server_error',\n    UNKNOWN = 'unknown'\n}\n\n/**\n * 网络错误处理器\n */\nexport class NetworkErrorHandler {\n    private static retryCount: number = 0;\n    private static maxRetryCount: number = 3;\n    private static retryDelay: number = 3000; // 3秒\n    private static statusLabel: Label | null = null;\n\n    /**\n     * 初始化状态标签\n     * @param label 状态标签组件\n     */\n    public static initStatusLabel(label: Label): void {\n        this.statusLabel = label;\n        this.updateConnectionStatus(NetworkManager.getInstance().status);\n\n        // 监听连接状态变化\n        NetworkManager.getInstance().on('connected', () => this.updateConnectionStatus(NetworkStatus.CONNECTED));\n        NetworkManager.getInstance().on('disconnected', () => this.updateConnectionStatus(NetworkStatus.DISCONNECTED));\n        NetworkManager.getInstance().on('connectionError', () => this.updateConnectionStatus(NetworkStatus.ERROR));\n    }\n\n    /**\n     * 手动重连\n     */\n    public static manualReconnect(): void {\n        this.retryCount = 0; // 重置重试次数\n        this.updateConnectionStatus(NetworkStatus.CONNECTING);\n        \n        // NetworkManager 不需要显式初始化，直接尝试重新连接\n        try {\n            // 尝试重新连接\n            console.log('[网络] 尝试重新连接...');\n        } catch (err) {\n            console.error('[网络][错误] 手动重连失败:', err);\n            this.updateConnectionStatus(NetworkStatus.ERROR);\n            // 可以显示错误提示\n            // 也可以选择自动重试\n            // this.retryConnection(NetworkErrorType.UNKNOWN);\n        }\n    }\n\n    /**\n     * 更新连接状态显示\n     * @param status 连接状态\n     */\n    public static updateConnectionStatus(status: NetworkStatus): void {\n        if (!this.statusLabel) return;\n\n        switch (status) {\n            case NetworkStatus.CONNECTED:\n                this.statusLabel.string = \"已连接\";\n                this.statusLabel.color = new Color(0, 255, 0);\n                break;\n            case NetworkStatus.CONNECTING:\n                this.statusLabel.string = \"连接中...\";\n                this.statusLabel.color = new Color(255, 255, 0);\n                break;\n            case NetworkStatus.DISCONNECTED:\n                this.statusLabel.string = \"未连接\";\n                this.statusLabel.color = new Color(255, 0, 0);\n                break;\n            case NetworkStatus.ERROR:\n                this.statusLabel.string = \"连接错误\";\n                this.statusLabel.color = new Color(255, 0, 0);\n                break;\n        }\n    }\n\n    /**\n     * 处理连接错误\n     * @param error 错误对象\n     */\n    public static handleConnectionError(error: Error): void {\n        console.error(\"[错误处理][错误] 连接错误:\", error.message);\n\n        const errorType = this.getErrorType(error);\n        this.updateConnectionStatus(NetworkStatus.ERROR);\n\n        switch (errorType) {\n            case NetworkErrorType.TIMEOUT:\n                this.showRetryDialog(\"连接超时，是否重试？\");\n                break;\n            case NetworkErrorType.CONNECTION_REFUSED:\n                this.showRetryDialog(\"连接被拒绝，服务器可能未启动，是否重试？\");\n                break;\n            case NetworkErrorType.SERVER_ERROR:\n                this.showRetryDialog(\"服务器错误，是否重试？\");\n                break;\n            default:\n                this.showRetryDialog(\"未知错误，是否重试？\");\n                break;\n        }\n    }\n\n    /**\n     * 获取错误类型\n     * @param error 错误对象\n     * @returns 错误类型\n     */\n    private static getErrorType(error: Error): NetworkErrorType {\n        const message = error.message.toLowerCase();\n        \n        if (message.includes('timeout')) {\n            return NetworkErrorType.TIMEOUT;\n        } else if (message.includes('refused') || message.includes('econnrefused')) {\n            return NetworkErrorType.CONNECTION_REFUSED;\n        } else if (message.includes('server') || message.includes('500')) {\n            return NetworkErrorType.SERVER_ERROR;\n        }\n        \n        return NetworkErrorType.UNKNOWN;\n    }\n\n    /**\n     * 显示重试对话框\n     * @param message 对话框消息\n     */\n    private static showRetryDialog(message: string): void {\n        // 这里应该调用Cocos原生对话框API，为了简单起见，我们使用console\n        console.warn(\"[错误处理][警告] \" + message);\n        \n        // 重试逻辑，实际项目中应该由用户确认后再执行\n        this.retryConnection(NetworkErrorType.UNKNOWN);\n    }\n\n    /**\n     * 重试连接\n     * @param errorCode 错误代码\n     */\n    public static retryConnection(errorCode: NetworkErrorType): void {\n        if (this.retryCount >= this.maxRetryCount) {\n            console.error(`[网络][错误] 连接失败，已达到最大重试次数 ${this.maxRetryCount}`);\n            director.loadScene('LoginScene'); // 返回登录场景\n            return;\n        }\n\n        this.retryCount++;\n        console.log(`[网络][信息] 第 ${this.retryCount} 次重试连接...`);\n\n        setTimeout(() => {\n            try {\n                // NetworkManager 不需要显式初始化，直接获取实例\n                NetworkManager.getInstance();\n                console.log('[网络][信息] 重新连接成功');\n            } catch (err) {\n                console.error('[网络][错误] 重试连接失败:', err);\n                // 继续重试或返回登录\n                this.retryConnection(errorCode);\n            }\n        }, this.retryDelay);\n    }\n}\n"]}