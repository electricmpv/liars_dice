{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/lobby/services/room-service.ts"],"names":["_decorator","EventTarget","NetworkManager","LoginManager","ccclass","RoomService","constructor","_currentFilter","_cachedRooms","_isDestroyed","fetchRooms","console","log","roomsAvailable","getInstance","getAvailableRooms","length","emit","error","message","Error","setFilter","filterId","getFilteredRooms","rooms","sourceRooms","filter","room","metadata","status","warn","joinRoom","roomId","playerName","Math","random","toString","substring","joinLiarDiceRoom","id","name","createRoom","roomInfo","options","create","roomName","onDestroy","adaptRoomAvailable","playerCount","clients","maxPlayers","maxClients","hasPassword","isPrivate"],"mappings":"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","sourcesContent":["import { _decorator, EventTarget } from 'cc';\nimport { NetworkManager } from '../../../core/network'; // 使用 NetworkManager 单例而不是 network\nimport { LoginManager } from '../../../core/login-manager'; // 用于获取玩家名\nimport type { RoomAvailable } from 'colyseus.js'; // Colyseus 提供的类型\n// 移除旧的 Room 类型导入，因为 getAvailableRooms 返回 RoomAvailable\n// import type { Room } from '../../../../../../shared/protocols/room-protocol';\n\nconst { ccclass } = _decorator;\n\n// 适配 RoomAvailable 到一个 LobbyController 可能期望的简化结构\n// 或者让 LobbyController 直接处理 RoomAvailable\nexport interface SimplifiedRoomInfo { // Export the interface\n    id: string;\n    name: string;\n    playerCount: number;\n    maxPlayers: number;\n    status: string;\n    hasPassword?: boolean; // 通常在 metadata 中\n    isPrivate?: boolean; // 通常在 metadata 中\n    // hasFriends 逻辑需要客户端实现或服务器 metadata 支持\n}\n\n\n/**\n * 房间服务类 (已适配 Colyseus)\n * 负责处理与房间相关的逻辑和网络通信\n */\n@ccclass('RoomService')\nexport class RoomService extends EventTarget {\n    private _currentFilter: string = 'all'; // 当前过滤器\n    private _cachedRooms: RoomAvailable[] = []; // 缓存原始 Colyseus 房间列表\n    private _isDestroyed: boolean = false; // 销毁状态标志\n\n    constructor() {\n        super();\n        // 不再监听 lobbyUpdate，房间列表通过主动请求获取\n        // network.on('lobbyUpdate', this.handleLobbyUpdate.bind(this));\n    }\n\n    /**\n     * 获取房间列表 (适配 Colyseus)\n     */\n    async fetchRooms(): Promise<void> {\n        console.log('[RoomService] Fetching rooms via Colyseus...');\n        if (this._isDestroyed) return;\n\n        try {\n            // 调用 NetworkManager 单例方法\n            const roomsAvailable = await NetworkManager.getInstance().getAvailableRooms();\n            if (this._isDestroyed) return; // 检查销毁状态\n\n            this._cachedRooms = roomsAvailable; // 缓存原始数据\n            console.log('[RoomService] Colyseus rooms fetched:', this._cachedRooms.length);\n\n            // 发出事件，通知 LobbyController 更新 UI，传递原始数据\n            if (!this._isDestroyed) this.emit('room-list-updated', this._cachedRooms); // 检查销毁状态\n\n        } catch (error) {\n            console.error('[RoomService] Error fetching Colyseus rooms:', error);\n            if (!this._isDestroyed) this.emit('fetch-error', { message: error instanceof Error ? error.message : '获取房间列表时发生未知错误' }); // 检查销毁状态\n        }\n    }\n\n    /**\n     * 设置过滤器\n     * @param filterId 过滤器ID ('all', 'waiting', 'playing', 'friends')\n     */\n    setFilter(filterId: string): void {\n        if (this._isDestroyed) return;\n        this._currentFilter = filterId;\n        console.log(`[RoomService] Filter set to: ${filterId}`);\n        // 触发更新，让 Controller 重新获取过滤后的列表\n        if (!this._isDestroyed) this.emit('room-list-updated', this._cachedRooms); // 使用缓存的数据触发更新\n    }\n\n    /**\n     * 获取过滤后的房间列表 (适配 Colyseus RoomAvailable)\n     * @param rooms 可选的原始 RoomAvailable 列表，如果未提供则使用缓存\n     * @returns 过滤后的 RoomAvailable 列表\n     */\n    getFilteredRooms(rooms?: RoomAvailable[]): RoomAvailable[] {\n        const sourceRooms = rooms || this._cachedRooms;\n        console.log(`[RoomService] Filtering ${sourceRooms.length} rooms with filter: ${this._currentFilter}`);\n\n        switch (this._currentFilter) {\n            case 'waiting':\n                // 需要假设 metadata 包含 status 字段\n                return sourceRooms.filter(room => room.metadata?.status === 'waiting');\n            case 'playing':\n                 // 需要假设 metadata 包含 status 字段\n                return sourceRooms.filter(room => room.metadata?.status === 'playing' || room.metadata?.status === 'gaming'); // 兼容旧状态名\n            case 'friends':\n                // TODO: 实现好友房间过滤逻辑 (需要好友服务和服务器 metadata 支持)\n                console.warn('[RoomService] Friends filter not implemented yet.');\n                return sourceRooms; // 暂时返回全部\n            case 'all':\n            default:\n                return sourceRooms;\n        }\n    }\n\n    /**\n     * 加入房间 (适配 Colyseus)\n     * @param roomId 房间ID\n     */\n    async joinRoom(roomId: string): Promise<void> {\n        if (this._isDestroyed) return;\n        console.log(`[RoomService] Attempting to join Colyseus room: ${roomId}`);\n        try {\n            const playerName = LoginManager.playerName || `Player_${Math.random().toString().substring(2, 6)}`; // 获取玩家名\n            const room = await NetworkManager.getInstance().joinLiarDiceRoom({ roomId, playerName }); // 使用新的方法\n            if (this._isDestroyed) return; // Double check after await\n\n            console.log(`[RoomService] Joined Colyseus room successfully: ${room.roomId}`);\n            // 发出事件，只传递 roomId，让 RoomUI 通过 network 获取状态\n            if (!this._isDestroyed) this.emit('room-joined', { id: room.roomId, name: room.name });\n\n        } catch (error) {\n            console.error(`[RoomService] Error joining Colyseus room ${roomId}:`, error);\n            if (!this._isDestroyed) this.emit('room-join-failed', { roomId, error: error instanceof Error ? error.message : '加入房间时发生未知错误' });\n        }\n    }\n\n    /**\n     * 创建房间 (适配 Colyseus)\n     * @param roomInfo 房间信息 (例如名称) - { name: string }\n     */\n    async createRoom(roomInfo: { name?: string }): Promise<void> {\n        if (this._isDestroyed) return;\n        console.log('[RoomService] Attempting to create Colyseus room:', roomInfo);\n        try {\n            const playerName = LoginManager.playerName || `Creator_${Math.random().toString().substring(2, 6)}`;\n            const options = {\n                playerName: playerName,\n                create: true,\n                // 从 roomInfo 获取房间名，或提供默认名\n                roomName: roomInfo?.name || `${playerName}的房间`\n                // 可以添加其他创建选项，如密码、最大玩家数，需要服务器支持\n                // maxPlayers: 6,\n                // password: '...'\n            };\n            const room = await NetworkManager.getInstance().joinLiarDiceRoom(options); // 使用 joinLiarDiceRoom 并设置 create 标志\n            if (this._isDestroyed) return; // Double check after await\n\n            console.log(`[RoomService] Created Colyseus room successfully: ${room.roomId}`);\n            // 创建即加入，发出 room-joined 事件\n            if (!this._isDestroyed) this.emit('room-joined', { id: room.roomId, name: room.name });\n\n        } catch (error) {\n            console.error(`[RoomService] Error creating Colyseus room:`, error);\n            if (!this._isDestroyed) this.emit('room-create-failed', { error: error instanceof Error ? error.message : '创建房间时发生未知错误' });\n        }\n    }\n\n    // 清理资源\n    onDestroy() {\n        console.log('[RoomService] Destroying...');\n        this._isDestroyed = true;\n        // 不再需要取消 lobbyUpdate 监听\n        // network.off('lobbyUpdate', this.handleLobbyUpdate.bind(this));\n    }\n\n    // --- 辅助函数 ---\n\n    /**\n     * 将 Colyseus RoomAvailable 转换为简化的房间信息对象 (LobbyController 可能需要)\n     * @param room RoomAvailable 对象\n     * @returns SimplifiedRoomInfo 对象\n     */\n    public static adaptRoomAvailable(room: RoomAvailable): SimplifiedRoomInfo {\n        return {\n            id: room.roomId,\n            name: room.metadata?.roomName || `房间 ${room.roomId.substring(0, 4)}`,\n            playerCount: room.clients,\n            maxPlayers: room.maxClients,\n            status: room.metadata?.status || 'waiting',\n            hasPassword: room.metadata?.hasPassword || false,\n            isPrivate: room.metadata?.isPrivate || false,\n        };\n    }\n}\n"]}