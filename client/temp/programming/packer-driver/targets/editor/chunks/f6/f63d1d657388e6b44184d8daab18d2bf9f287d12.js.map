{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/lobby/services/chat-service.ts"],"names":["ChatService","sys","constructor","_listeners","Map","_messageList","_socket","_isConnected","_userId","_userName","init","localStorage","getItem","connect","Promise","resolve","console","log","setTimeout","emit","loadHistoryMessages","setupMockMessageReceiver","disconnect","sendMessage","content","message","trim","id","Date","now","type","senderId","senderName","timestamp","isRead","push","sendSystemMessage","historyMessages","getMockHistoryMessages","setInterval","Math","random","receiveMockMessage","mockSenders","name","mockContents","sender","floor","length","baseTime","on","eventName","callback","target","has","set","get","off","listeners","i","listener","splice","args","apply"],"mappings":"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","sourcesContent":["import { sys } from 'cc';\n\n/**\n * 聊天服务类\n * 负责处理聊天相关的网络请求和数据管理\n */\nexport class ChatService {\n    private _listeners: Map<string, Array<{ callback: Function, target: any }>> = new Map();\n    private _messageList: any[] = [];\n    private _socket: any = null;\n    private _isConnected: boolean = false;\n    private _userId: string = '';\n    private _userName: string = '';\n\n    constructor() {\n        this.init();\n    }\n\n    /**\n     * 初始化\n     */\n    private init(): void {\n        // 获取用户信息（从本地存储或全局状态）\n        this._userId = sys.localStorage.getItem('userId') || 'user_123456';\n        this._userName = sys.localStorage.getItem('userName') || '玩家';\n    }\n\n    /**\n     * 连接聊天服务器\n     */\n    public async connect(): Promise<boolean> {\n        return new Promise((resolve) => {\n            console.log('[ChatService] 连接聊天服务器...');\n            \n            // 模拟连接过程\n            setTimeout(() => {\n                this._isConnected = true;\n                console.log('[ChatService] 聊天服务器连接成功');\n                \n                // 触发连接成功事件\n                this.emit('connected');\n                \n                // 加载历史消息\n                this.loadHistoryMessages();\n                \n                // 设置模拟接收消息\n                this.setupMockMessageReceiver();\n                \n                resolve(true);\n            }, 1000);\n        });\n    }\n\n    /**\n     * 断开连接\n     */\n    public disconnect(): void {\n        if (!this._isConnected) {\n            return;\n        }\n        \n        console.log('[ChatService] 断开聊天服务器连接');\n        this._isConnected = false;\n        \n        // 触发断开连接事件\n        this.emit('disconnected');\n    }\n\n    /**\n     * 发送消息\n     */\n    public sendMessage(content: string): void {\n        if (!this._isConnected) {\n            this.emit('chat-error', { message: '未连接到聊天服务器' });\n            return;\n        }\n        \n        if (!content.trim()) {\n            return;\n        }\n        \n        console.log(`[ChatService] 发送消息: ${content}`);\n        \n        // 创建消息对象\n        const message = {\n            id: `msg_${Date.now()}`,\n            type: 0, // 0: 自己, 1: 其他玩家, 2: 系统消息\n            senderId: this._userId,\n            senderName: this._userName,\n            content: content,\n            timestamp: Date.now(),\n            isRead: true\n        };\n        \n        // 添加到消息列表\n        this._messageList.push(message);\n        \n        // 触发消息发送事件\n        this.emit('message-sent', message);\n        \n        // 在真实环境中应通过WebSocket发送到服务器\n        // 这里只是模拟实现\n    }\n\n    /**\n     * 发送系统消息\n     */\n    public sendSystemMessage(content: string): void {\n        // 创建系统消息对象\n        const message = {\n            id: `sys_${Date.now()}`,\n            type: 2, // 系统消息\n            senderId: 'system',\n            senderName: '系统',\n            content: content,\n            timestamp: Date.now(),\n            isRead: false\n        };\n        \n        // 添加到消息列表\n        this._messageList.push(message);\n        \n        // 触发消息接收事件\n        this.emit('message-received', message);\n    }\n\n    /**\n     * 加载历史消息\n     */\n    private loadHistoryMessages(): void {\n        // 模拟加载历史消息\n        setTimeout(() => {\n            const historyMessages = this.getMockHistoryMessages();\n            \n            // 添加到消息列表\n            this._messageList = [...historyMessages, ...this._messageList];\n            \n            // 触发历史消息加载事件\n            this.emit('history-loaded', historyMessages);\n            \n            // 发送一条系统欢迎消息\n            this.sendSystemMessage('欢迎来到吹牛骰子游戏聊天室！');\n        }, 500);\n    }\n\n    /**\n     * 设置模拟消息接收器\n     */\n    private setupMockMessageReceiver(): void {\n        // 模拟定时接收消息\n        setInterval(() => {\n            // 30%概率收到新消息\n            if (Math.random() < 0.3) {\n                this.receiveMockMessage();\n            }\n        }, 15000); // 每15秒检查一次\n    }\n\n    /**\n     * 接收模拟消息\n     */\n    private receiveMockMessage(): void {\n        const mockSenders = [\n            { id: 'user_234567', name: '李四' },\n            { id: 'user_345678', name: '王五' },\n            { id: 'user_456789', name: '赵六' },\n            { id: 'user_567890', name: '钱七' }\n        ];\n        \n        const mockContents = [\n            '大家好！',\n            '有人一起玩吗？',\n            '这局我真是太倒霉了...',\n            '哈哈，我赢了！',\n            '这游戏太好玩了',\n            '谁来教我怎么玩？',\n            '刚才那把真精彩！',\n            '😊😊😊',\n            '有人在吗？',\n            '今天天气真好'\n        ];\n        \n        // 随机选择发送者和内容\n        const sender = mockSenders[Math.floor(Math.random() * mockSenders.length)];\n        const content = mockContents[Math.floor(Math.random() * mockContents.length)];\n        \n        // 创建消息对象\n        const message = {\n            id: `msg_${Date.now()}`,\n            type: 1, // 其他玩家\n            senderId: sender.id,\n            senderName: sender.name,\n            content: content,\n            timestamp: Date.now(),\n            isRead: false\n        };\n        \n        // 添加到消息列表\n        this._messageList.push(message);\n        \n        // 触发消息接收事件\n        this.emit('message-received', message);\n    }\n\n    /**\n     * 获取模拟历史消息\n     */\n    private getMockHistoryMessages(): any[] {\n        const baseTime = Date.now() - 1000 * 60 * 30; // 30分钟前\n        \n        return [\n            {\n                id: 'msg_001',\n                type: 2, // 系统消息\n                senderId: 'system',\n                senderName: '系统',\n                content: '欢迎来到吹牛骰子游戏聊天室！',\n                timestamp: baseTime,\n                isRead: true\n            },\n            {\n                id: 'msg_002',\n                type: 1, // 其他玩家\n                senderId: 'user_234567',\n                senderName: '李四',\n                content: '大家好，有人要一起玩吗？',\n                timestamp: baseTime + 1000 * 60 * 2, // 2分钟后\n                isRead: true\n            },\n            {\n                id: 'msg_003',\n                type: 1, // 其他玩家\n                senderId: 'user_345678',\n                senderName: '王五',\n                content: '我来！',\n                timestamp: baseTime + 1000 * 60 * 4, // 4分钟后\n                isRead: true\n            },\n            {\n                id: 'msg_004',\n                type: 0, // 自己\n                senderId: this._userId,\n                senderName: this._userName,\n                content: '算我一个',\n                timestamp: baseTime + 1000 * 60 * 5, // 5分钟后\n                isRead: true\n            },\n            {\n                id: 'msg_005',\n                type: 1, // 其他玩家\n                senderId: 'user_234567',\n                senderName: '李四',\n                content: '好，我创建房间了，房间号：R123456',\n                timestamp: baseTime + 1000 * 60 * 6, // 6分钟后\n                isRead: true\n            },\n            {\n                id: 'msg_006',\n                type: 2, // 系统消息\n                senderId: 'system',\n                senderName: '系统',\n                content: '玩家李四创建了房间 R123456',\n                timestamp: baseTime + 1000 * 60 * 6.1, // 6.1分钟后\n                isRead: true\n            },\n            {\n                id: 'msg_007',\n                type: 1, // 其他玩家\n                senderId: 'user_456789',\n                senderName: '赵六',\n                content: '我也来玩！',\n                timestamp: baseTime + 1000 * 60 * 8, // 8分钟后\n                isRead: true\n            },\n            {\n                id: 'msg_008',\n                type: 1, // 其他玩家\n                senderId: 'user_456789',\n                senderName: '赵六',\n                content: '刚才那把真是太刺激了，下次再战！',\n                timestamp: baseTime + 1000 * 60 * 20, // 20分钟后\n                isRead: true\n            }\n        ];\n    }\n\n    /**\n     * 注册事件监听\n     */\n    public on(eventName: string, callback: Function, target?: any): void {\n        if (!this._listeners.has(eventName)) {\n            this._listeners.set(eventName, []);\n        }\n        \n        this._listeners.get(eventName)?.push({ callback, target });\n    }\n\n    /**\n     * 移除事件监听\n     */\n    public off(eventName: string, callback: Function, target?: any): void {\n        if (!this._listeners.has(eventName)) {\n            return;\n        }\n        \n        const listeners = this._listeners.get(eventName);\n        if (!listeners) return;\n        \n        for (let i = listeners.length - 1; i >= 0; i--) {\n            const listener = listeners[i];\n            if (listener.callback === callback && (!target || listener.target === target)) {\n                listeners.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * 触发事件\n     */\n    private emit(eventName: string, ...args: any[]): void {\n        if (!this._listeners.has(eventName)) {\n            return;\n        }\n        \n        const listeners = this._listeners.get(eventName);\n        if (!listeners) return;\n        \n        for (const listener of listeners) {\n            if (listener.target) {\n                listener.callback.apply(listener.target, args);\n            } else {\n                listener.callback(...args);\n            }\n        }\n    }\n}\n"]}