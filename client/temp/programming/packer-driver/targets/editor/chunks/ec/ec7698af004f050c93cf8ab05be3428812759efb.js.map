{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/core/login-manager.ts"],"names":["_decorator","Component","ccclass","property","LoginManager","getInstance","instance","login","username","password","onSuccess","onFailure","playerName","tempId","Date","now","currentPlayerId","console","log","error","Error","message","guestLogin","Math","floor","random","response","success","playerId"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;;;;;;;;OAGf;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;8BAGjBI,Y,WADZF,OAAO,CAAC,cAAD,C,2BAAR,MACaE,YADb,SACkCH,SADlC,CAC4C;AAGQ;AAEvB,eAAXI,WAAW,GAAiB;AACtC,cAAI,CAACD,YAAY,CAACE,QAAlB,EAA4B;AACxBF,YAAAA,YAAY,CAACE,QAAb,GAAwB,IAAIF,YAAJ,EAAxB;AACH;;AACD,iBAAOA,YAAY,CAACE,QAApB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACWC,QAAAA,KAAK,CAACC,QAAD,EAAmBC,QAAnB,EAAqCC,SAArC,EAA4DC,SAA5D,EAAsG;AAC9G,cAAI;AACA;AACAP,YAAAA,YAAY,CAACQ,UAAb,GAA0BJ,QAA1B,CAFA,CAIA;;AACA,kBAAMK,MAAM,GAAI,QAAOC,IAAI,CAACC,GAAL,EAAW,EAAlC;AACAX,YAAAA,YAAY,CAACY,eAAb,GAA+BH,MAA/B;AAEAI,YAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BL,MAAO,UAASL,QAAS,EAAlE,EARA,CAUA;;AACAE,YAAAA,SAAS;AACZ,WAZD,CAYE,OAAOS,KAAP,EAAc;AACZF,YAAAA,OAAO,CAACE,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACAR,YAAAA,SAAS,CAACQ,KAAK,YAAYC,KAAjB,GAAyBD,KAAK,CAACE,OAA/B,GAAyC,UAA1C,CAAT;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWC,QAAAA,UAAU,CAACZ,SAAD,EAAqCC,SAArC,EAA+E;AAC5F,cAAI;AACA;AACA,gBAAI,CAACP,YAAY,CAACQ,UAAlB,EAA8B;AAC1B;AACAR,cAAAA,YAAY,CAACQ,UAAb,GAA2B,MAAKW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,CAAkC,EAAlE;AACH,aALD,CAOA;;;AACA,kBAAMZ,MAAM,GAAI,SAAQC,IAAI,CAACC,GAAL,EAAW,EAAnC;AACAX,YAAAA,YAAY,CAACY,eAAb,GAA+BH,MAA/B;AAEAI,YAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BL,MAAO,UAAST,YAAY,CAACQ,UAAW,EAAjF,EAXA,CAaA;;AACA,kBAAMc,QAAQ,GAAG;AACbC,cAAAA,OAAO,EAAE,IADI;AAEbC,cAAAA,QAAQ,EAAEf,MAFG;AAGbD,cAAAA,UAAU,EAAER,YAAY,CAACQ;AAHZ,aAAjB,CAdA,CAoBA;;AACAF,YAAAA,SAAS,CAACgB,QAAD,CAAT;AACH,WAtBD,CAsBE,OAAOP,KAAP,EAAc;AACZF,YAAAA,OAAO,CAACE,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACAR,YAAAA,SAAS,CAACQ,KAAK,YAAYC,KAAjB,GAAyBD,KAAK,CAACE,OAA/B,GAAyC,UAA1C,CAAT;AACH;AACJ;;AAxEuC,O,UACzBf,Q,mBACDU,e,GAAiC,I,UACjCJ,U,GAA4B,I","sourcesContent":["import { _decorator, Component } from 'cc';\r\nimport { NetworkManager } from './network';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('LoginManager')\r\nexport class LoginManager extends Component {\r\n    private static instance: LoginManager;\r\n    public static currentPlayerId: string | null = null; // Colyseus Session ID or other unique ID\r\n    public static playerName: string | null = null; // Add static property for player name\r\n\r\n    public static getInstance(): LoginManager {\r\n        if (!LoginManager.instance) {\r\n            LoginManager.instance = new LoginManager();\r\n        }\r\n        return LoginManager.instance;\r\n    }\r\n\r\n    /**\r\n     * 用户名密码登录\r\n     * 在Colyseus中，登录通常在加入房间时通过options传递凭据\r\n     * @param username 用户名\r\n     * @param password 密码\r\n     * @param onSuccess 成功回调\r\n     * @param onFailure 失败回调\r\n     */\r\n    public login(username: string, password: string, onSuccess: () => void, onFailure: (error: string) => void): void {\r\n        try {\r\n            // 存储用户名作为玩家名称\r\n            LoginManager.playerName = username;\r\n\r\n            // 生成临时ID（实际ID将在加入房间时由Colyseus分配）\r\n            const tempId = `user_${Date.now()}`;\r\n            LoginManager.currentPlayerId = tempId;\r\n\r\n            console.log(`[LoginManager] 用户登录成功: ID=${tempId}, Name=${username}`);\r\n\r\n            // 调用成功回调\r\n            onSuccess();\r\n        } catch (error) {\r\n            console.error(\"[LoginManager] 用户登录处理错误:\", error);\r\n            onFailure(error instanceof Error ? error.message : \"用户登录处理错误\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 游客登录\r\n     * 在Colyseus中，游客登录只是生成一个临时ID和名称，实际连接在加入房间时进行\r\n     * @param onSuccess 成功回调\r\n     * @param onFailure 失败回调\r\n     */\r\n    public guestLogin(onSuccess: (response: any) => void, onFailure: (error: string) => void): void {\r\n        try {\r\n            // 检查是否已经有玩家名称\r\n            if (!LoginManager.playerName) {\r\n                // 生成随机游客名称\r\n                LoginManager.playerName = `游客_${Math.floor(Math.random() * 10000)}`;\r\n            }\r\n\r\n            // 生成临时ID（实际ID将在加入房间时由Colyseus分配）\r\n            const tempId = `guest_${Date.now()}`;\r\n            LoginManager.currentPlayerId = tempId;\r\n\r\n            console.log(`[LoginManager] 游客登录成功: ID=${tempId}, Name=${LoginManager.playerName}`);\r\n\r\n            // 构造响应对象\r\n            const response = {\r\n                success: true,\r\n                playerId: tempId,\r\n                playerName: LoginManager.playerName\r\n            };\r\n\r\n            // 立即调用成功回调\r\n            onSuccess(response);\r\n        } catch (error) {\r\n            console.error(\"[LoginManager] 游客登录处理错误:\", error);\r\n            onFailure(error instanceof Error ? error.message : \"游客登录处理错误\");\r\n        }\r\n    }\r\n}\r\n"]}