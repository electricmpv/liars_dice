{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/libs/node-polyfills.ts"],"names":["window","require","name","nodeModules","Error","crypto","randomBytes","size","array","Uint8Array","getRandomValues","i","Math","floor","random","createHash","algorithm","console","warn","update","data","digest","encoding","Array","from","TextEncoder","encode","String","map","b","toString","padStart","join","createHmac","key","https","request","get","Agent","constructor","http","net","Socket","connect","on","write","end","tls","buffer","Buffer","alloc","isBuffer","obj","url","parse","urlString","URL","resolve","to","querystring","stringify","Object","keys","encodeURIComponent","str","result","split","forEach","pair","value","decodeURIComponent","path","paths","replace"],"mappings":"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","sourcesContent":["/**\n * 浏览器环境中的Node.js核心模块模拟\n * 为Colyseus提供兼容性支持\n */\n\n// 为浏览器环境添加全局require函数\nif (typeof window !== 'undefined' && typeof (window as any).require === 'undefined') {\n  (window as any).require = function(name: string) {\n    if (nodeModules[name]) {\n      return nodeModules[name];\n    }\n    \n    throw new Error(`Current environment does not provide a require() for requiring '${name}'`);\n  };\n}\n\n// 提供基本的Node.js模块模拟\nconst nodeModules: Record<string, any> = {\n  // 模拟crypto模块\n  crypto: {\n    // 提供基本的随机数生成功能\n    randomBytes: (size: number) => {\n      const array = new Uint8Array(size);\n      if (window.crypto && window.crypto.getRandomValues) {\n        window.crypto.getRandomValues(array);\n      } else {\n        // 降级方案，不够安全但可以工作\n        for (let i = 0; i < size; i++) {\n          array[i] = Math.floor(Math.random() * 256);\n        }\n      }\n      return array;\n    },\n    createHash: (algorithm: string) => {\n      console.warn(`crypto.createHash('${algorithm}') is not fully supported in browser environment`);\n      return {\n        update: (data: any) => {\n          return {\n            digest: (encoding: string) => {\n              // 简单实现，仅用于兼容性\n              if (encoding === 'hex') {\n                return Array.from(new TextEncoder().encode(String(data)))\n                  .map(b => b.toString(16).padStart(2, '0'))\n                  .join('');\n              }\n              return new TextEncoder().encode(String(data));\n            }\n          };\n        }\n      };\n    },\n    createHmac: (algorithm: string, key: any) => {\n      console.warn(`crypto.createHmac('${algorithm}') is not fully supported in browser environment`);\n      return {\n        update: (data: any) => {\n          return {\n            digest: (encoding: string) => {\n              // 简单实现，仅用于兼容性\n              if (encoding === 'hex') {\n                return Array.from(new TextEncoder().encode(String(data)))\n                  .map(b => b.toString(16).padStart(2, '0'))\n                  .join('');\n              }\n              return new TextEncoder().encode(String(data));\n            }\n          };\n        }\n      };\n    }\n  },\n  // events: { ... } // Removed custom events polyfill, rely on installed 'events' package\n  \n  // 空模拟的https模块\n  https: {\n    request: () => {\n      console.warn('https.request is not supported in browser environment');\n      return null;\n    },\n    get: () => {\n      console.warn('https.get is not supported in browser environment');\n      return null;\n    },\n    Agent: class Agent {\n      constructor() {\n        console.warn('https.Agent is not supported in browser environment');\n      }\n    }\n  },\n  \n  // 空模拟的http模块\n  http: {\n    request: () => {\n      console.warn('http.request is not supported in browser environment');\n      return null;\n    },\n    get: () => {\n      console.warn('http.get is not supported in browser environment');\n      return null;\n    },\n    Agent: class Agent {\n      constructor() {\n        console.warn('http.Agent is not supported in browser environment');\n      }\n    }\n  },\n  \n  // 空模拟的net模块\n  net: {\n    Socket: class Socket {\n      constructor() {\n        console.warn('net.Socket is not supported in browser environment');\n      }\n      \n      connect() {\n        console.warn('net.Socket.connect is not supported in browser environment');\n        return this;\n      }\n      \n      on() {\n        console.warn('net.Socket.on is not supported in browser environment');\n        return this;\n      }\n      \n      write() {\n        console.warn('net.Socket.write is not supported in browser environment');\n        return false;\n      }\n      \n      end() {\n        console.warn('net.Socket.end is not supported in browser environment');\n      }\n    }\n  },\n  \n  // 空模拟的tls模块\n  tls: {\n    connect: () => {\n      console.warn('tls.connect is not supported in browser environment');\n      return null;\n    }\n  },\n  \n  // 空模拟的buffer模块\n  buffer: {\n    Buffer: {\n      from: (data: any) => {\n        if (typeof data === 'string') {\n          return new TextEncoder().encode(data);\n        }\n        return new Uint8Array(data);\n      },\n      alloc: (size: number) => new Uint8Array(size),\n      isBuffer: (obj: any) => obj instanceof Uint8Array\n    }\n  },\n  \n  // 空模拟的url模块\n  url: {\n    parse: (urlString: string) => new URL(urlString),\n    resolve: (from: string, to: string) => new URL(to, from).toString()\n  },\n  \n  // 空模拟的querystring模块\n  querystring: {\n    stringify: (obj: Record<string, any>) => {\n      return Object.keys(obj)\n        .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`)\n        .join('&');\n    },\n    parse: (str: string) => {\n      const result: Record<string, string> = {};\n      str.split('&').forEach(pair => {\n        const [key, value] = pair.split('=');\n        result[decodeURIComponent(key)] = decodeURIComponent(value);\n      });\n      return result;\n    }\n  },\n  \n  // 空模拟的path模块 \n  path: {\n    join: (...paths: string[]) => paths.join('/').replace(/\\/+/g, '/'),\n    resolve: (...paths: string[]) => paths.join('/').replace(/\\/+/g, '/')\n  }\n};\n\n// // 模拟Node.js的require函数 - REMOVED as it might interfere\n// (window as any).require = function(name: string) {\n//   if (nodeModules[name]) {\n//     return nodeModules[name];\n//   }\n  \n//   console.error(`模块 '${name}' 在浏览器环境中不可用`);\n//   throw new Error(`Cannot find module '${name}'`);\n// };\n\nexport default nodeModules;\n"]}