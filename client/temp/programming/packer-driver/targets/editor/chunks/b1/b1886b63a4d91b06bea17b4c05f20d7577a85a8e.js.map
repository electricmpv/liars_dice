{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/core/dice-animation-controller.ts"],"names":["_decorator","Component","Node","Animation","Label","ccclass","property","DiceAnimationController","playAnimation","type","options","playShakeAnimation","playRollAnimation","values","Promise","resolve","diceNodes","forEach","node","active","diceLabels","label","shakeAnimation","play","diceAnimations","anim","setTimeout","animationDuration","index","length","i","string","toString","stop","hideAllDice","showDice","count"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Animation, Label } from 'cc';\nimport { Face } from '../../shared/protocols/game-types.d';\n\nconst { ccclass, property } = _decorator;\n\n/**\n * 骰子动画控制器\n * 负责管理骰子的动画效果\n */\n@ccclass('DiceAnimationController')\nexport class DiceAnimationController extends Component {\n    @property([Node])\n    private diceNodes: Node[] = [];\n    \n    @property([Animation])\n    private diceAnimations: Animation[] = [];\n    \n    @property([Label])\n    private diceLabels: Label[] = [];\n    \n    @property(Animation)\n    private shakeAnimation: Animation | null = null;\n    \n    @property\n    private animationDuration: number = 1.5;\n    \n    /**\n     * 播放骰子动画\n     * @param type 动画类型 'shake' | 'roll'\n     * @param options 动画选项\n     * @returns Promise\n     */\n    public playAnimation(type: 'shake' | 'roll', options: { values?: Face[] } | null): Promise<void> {\n        switch (type) {\n            case 'shake':\n                return this.playShakeAnimation();\n            case 'roll':\n                return this.playRollAnimation(options?.values || []);\n            default:\n                return Promise.resolve();\n        }\n    }\n    \n    /**\n     * 播放摇骰子动画\n     * @returns Promise\n     */\n    private playShakeAnimation(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            // 显示所有骰子\n            this.diceNodes.forEach(node => {\n                if (node) {\n                    node.active = true;\n                }\n            });\n            \n            // 隐藏骰子点数\n            this.diceLabels.forEach(label => {\n                if (label) {\n                    label.node.active = false;\n                }\n            });\n            \n            // 播放容器的摇动动画\n            if (this.shakeAnimation) {\n                this.shakeAnimation.play();\n            }\n            \n            // 播放每个骰子的动画\n            this.diceAnimations.forEach(anim => {\n                if (anim) {\n                    anim.play('dice_roll');\n                }\n            });\n            \n            // 动画结束后回调\n            setTimeout(() => {\n                resolve();\n            }, this.animationDuration * 1000);\n        });\n    }\n    \n    /**\n     * 播放骰子结果动画\n     * @param values 骰子值\n     * @returns Promise\n     */\n    private playRollAnimation(values: Face[]): Promise<void> {\n        return new Promise<void>((resolve) => {\n            // 先隐藏所有骰子\n            this.diceNodes.forEach((node, index) => {\n                if (node) {\n                    node.active = index < values.length;\n                }\n            });\n            \n            // 显示结果\n            for (let i = 0; i < values.length && i < this.diceLabels.length; i++) {\n                if (this.diceLabels[i]) {\n                    this.diceLabels[i].string = values[i].toString();\n                    this.diceLabels[i].node.active = true;\n                }\n            }\n            \n            // 停止所有骰子动画\n            this.diceAnimations.forEach(anim => {\n                if (anim) {\n                    anim.stop();\n                }\n            });\n            \n            // 动画结束后回调\n            setTimeout(() => {\n                resolve();\n            }, 500); // 短暂延迟，让玩家看清骰子结果\n        });\n    }\n    \n    /**\n     * 隐藏所有骰子\n     */\n    public hideAllDice(): void {\n        this.diceNodes.forEach(node => {\n            if (node) {\n                node.active = false;\n            }\n        });\n    }\n    \n    /**\n     * 显示指定数量的骰子\n     * @param count 骰子数量\n     */\n    public showDice(count: number): void {\n        this.diceNodes.forEach((node, index) => {\n            if (node) {\n                node.active = index < count;\n            }\n        });\n        \n        // 隐藏骰子点数，等待摇骰子\n        this.diceLabels.forEach(label => {\n            if (label) {\n                label.node.active = false;\n            }\n        });\n    }\n}\n"]}