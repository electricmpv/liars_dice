{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/core/network.ts"],"names":["NetworkManager","ColyseusModule","LiarDiceRoomState","PlayerState","LoginManager","NetworkErrorCode","NetworkStatus","serverUrl","serverUrls","currentServerUrlIndex","constructor","colyseusClient","colyseusRoom","_status","DISCONNECTED","_roomId","_sessionId","_lastState","eventHandlers","Map","getInstance","instance","status","roomId","sessionId","roomState","emit","eventName","data","handlers","get","forEach","handler","error","console","on","has","set","includes","push","off","index","indexOf","splice","offAll","delete","_createError","code","message","details","_initColyseusClient","log","ClientCtor","Client","default","Error","headers","urlBuilder","httpOptions","withCredentials","retryCount","retryDelay","timeout","ERROR","CLIENT_INIT_ERROR","_tryNextServerUrl","length","_resetServerUrlIndex","joinLiarDiceRoom","options","warn","leaveRoom","JOINING_ROOM","create","playerName","userId","currentPlayerId","joinById","joinOrCreate","CONNECTED","_setupRoomListeners","errorCode","ROOM_JOIN_ERROR","errorMessage","ROOM_NOT_FOUND","ROOM_FULL","CONNECTION_TIMEOUT","networkError","leave","_cleanupRoomConnection","CONNECTION_CLOSED","disconnect","send","type","payload","CONNECTION_ERROR","_initClient","stateTest","state","onStateChange","clientState","_convertSchemaToClientState","onError","SERVER_ERROR","onLeave","onMessage","eventType","String","_safelyProcessInitialPlayers","_safelyProcessPlayerChanges","originalError","players","player","playerData","_extractPlayerData","name","e","Object","keys","entries","previousPlayers","previousPlayer","JSON","stringify","lastPlayers","Array","from","entry","currentPlayers","playerExists","activePlayerIds","_extractArrayData","currentPlayerIndex","_getNumberProperty","currentBidValue","currentBidCount","lastBidderSessionId","_getStringProperty","hostId","roundNumber","moveNumber","roundResult","isOneCalledThisRound","_getBooleanProperty","id","diceCount","isReady","isConnected","isAI","aiType","currentDices","arr","toArray","isArray","result","item","values","obj","prop","defaultValue","undefined","value","num","Number","isNaN","Boolean","prevRoomId","getAvailableRooms","roomName","httpUrl","replace","path","response","http","rooms","reconnect","RECONNECTING"],"mappings":"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","sourcesContent":["// 直接从Colyseus插件导入\n// @ts-ignore - 忽略类型检查，因为这是一个JavaScript文件\nimport * as ColyseusModule from '../colyseus-cocos-creator.js';\nimport { LiarDiceRoomState } from '../../shared/schemas/liar-dice-room-state-client';\nimport { PlayerState } from '../../shared/schemas/player-state-client';\nimport { LoginManager } from './login-manager';\n\n/**\n * 网络管理器错误类型定义\n */\nexport enum NetworkErrorCode {\n    CLIENT_INIT_ERROR = 1000,\n    CONNECTION_ERROR = 1001,\n    CONNECTION_TIMEOUT = 1002,\n    CONNECTION_CLOSED = 1003,\n    ROOM_JOIN_ERROR = 2000,\n    ROOM_NOT_FOUND = 2001,\n    ROOM_FULL = 2002,\n    SERVER_ERROR = 5000,\n    UNKNOWN_ERROR = 9999\n}\n\n/**\n * 网络错误详情\n */\nexport interface NetworkError {\n    code: number;\n    message: string;\n    details?: any;\n}\n\n/**\n * 网络状态类型\n */\nexport enum NetworkStatus {\n    DISCONNECTED = 'disconnected',\n    CONNECTING = 'connecting',\n    JOINING_ROOM = 'joining',\n    CONNECTED = 'connected',\n    RECONNECTING = 'reconnecting',\n    ERROR = 'error'\n}\n\n/**\n * 骰子游戏房间选项\n */\nexport interface LiarDiceRoomOptions {\n    playerName: string;\n    create?: boolean;\n    roomId?: string;\n}\n\n/**\n * 网络管理器类\n * 负责处理与Colyseus服务器的通信\n */\nexport class NetworkManager {\n    private static instance: NetworkManager;\n    private colyseusClient: Colyseus.Client | null = null;\n    private colyseusRoom: Colyseus.Room<LiarDiceRoomState> | null = null;\n    \n    // 支持多个服务器 URL，按优先级排序\n    private serverUrls: string[] = [\n        \"ws://localhost:3000\",\n        \"ws://127.0.0.1:3000\",\n        \"wss://liars-dice-server.example.com\" // 如果有生产环境服务器，可以添加\n    ];\n    private currentServerUrlIndex: number = 0;\n    private get serverUrl(): string {\n        return this.serverUrls[this.currentServerUrlIndex];\n    }\n    \n    // 状态和会话信息\n    private _status: NetworkStatus = NetworkStatus.DISCONNECTED;\n    private _roomId: string = '';\n    private _sessionId: string = '';\n    private _lastState: LiarDiceRoomState | null = null;\n    \n    // 事件处理器\n    private eventHandlers: Map<string, Array<(data?: any) => void>> = new Map();\n    \n    /**\n     * 私有构造函数，确保单例模式\n     */\n    private constructor() {\n        // 私有构造函数，防止直接实例化\n    }\n    \n    /**\n     * 获取单例实例\n     */\n    public static getInstance(): NetworkManager {\n        if (!NetworkManager.instance) {\n            NetworkManager.instance = new NetworkManager();\n        }\n        return NetworkManager.instance;\n    }\n    \n    /**\n     * 获取当前网络状态\n     */\n    public get status(): NetworkStatus {\n        return this._status;\n    }\n    \n    /**\n     * 获取当前房间ID\n     */\n    public get roomId(): string {\n        return this._roomId;\n    }\n    \n    /**\n     * 获取当前会话ID\n     */\n    public get sessionId(): string {\n        return this._sessionId;\n    }\n    \n    /**\n     * 获取当前房间状态\n     */\n    public get roomState(): LiarDiceRoomState | null {\n        return this._lastState;\n    }\n    \n    /**\n     * 触发事件\n     * @param eventName 事件名称\n     * @param data 事件数据\n     */\n    public emit(eventName: string, data?: any): void {\n        const handlers = this.eventHandlers.get(eventName);\n        if (handlers) {\n            handlers.forEach(handler => {\n                try {\n                    handler(data);\n                } catch (error) {\n                    console.error(`[网络][错误] 事件处理器出错 ${eventName}:`, error);\n                }\n            });\n        }\n    }\n    \n    /**\n     * 注册事件监听\n     * @param eventName 事件名称\n     * @param handler 事件处理器\n     */\n    public on(eventName: string, handler: (data?: any) => void): void {\n        if (!this.eventHandlers.has(eventName)) {\n            this.eventHandlers.set(eventName, []);\n        }\n        const handlers = this.eventHandlers.get(eventName);\n        if (handlers && !handlers.includes(handler)) {\n            handlers.push(handler);\n        }\n    }\n    \n    /**\n     * 移除事件监听\n     * @param eventName 事件名称\n     * @param handler 事件处理器\n     */\n    public off(eventName: string, handler: (data?: any) => void): void {\n        const handlers = this.eventHandlers.get(eventName);\n        if (handlers) {\n            const index = handlers.indexOf(handler);\n            if (index !== -1) {\n                handlers.splice(index, 1);\n            }\n        }\n    }\n    \n    /**\n     * 移除特定事件的所有监听器\n     * @param eventName 事件名称\n     */\n    public offAll(eventName: string): void {\n        this.eventHandlers.delete(eventName);\n    }\n    \n    /**\n     * 创建错误对象\n     * @param code 错误代码\n     * @param message 错误消息\n     * @param details 详细信息\n     * @returns 错误对象\n     */\n    private _createError(code: NetworkErrorCode, message: string, details?: any): NetworkError {\n        return { code, message, details };\n    }\n    \n    /**\n     * 初始化Colyseus客户端\n     * @returns 成功返回true，失败返回false\n     */\n    private _initColyseusClient(): boolean {\n        try {\n            if (!this.colyseusClient) {\n                console.log(`[网络] 初始化 Colyseus 客户端，服务器地址: ${this.serverUrl}`);\n                \n                // 获取Client构造函数，兼容不同的导出方式\n                let ClientCtor: any;\n                if (typeof ColyseusModule === \"function\") {\n                    // 情况A：ColyseusModule本身就是构造函数\n                    ClientCtor = ColyseusModule;\n                } else if (ColyseusModule.Client) {\n                    // 情况B：ColyseusModule.Client存在\n                    ClientCtor = ColyseusModule.Client;\n                } else if (ColyseusModule.default) {\n                    // 情况C：放在.default里\n                    ClientCtor = ColyseusModule.default.Client || ColyseusModule.default;\n                } else {\n                    throw new Error(\"无法找到 Colyseus.Client 构造函数\");\n                }\n                \n                // 确保使用正确的协议和配置\n                const serverUrl = this.serverUrl;\n                console.log(`[网络] 使用服务器地址: ${serverUrl}`);\n                \n                // 禁用 withCredentials，避免 CORS 错误\n                this.colyseusClient = new ClientCtor(serverUrl, { \n                    headers: {},\n                    urlBuilder: null,\n                    // 添加自定义配置来禁用 withCredentials\n                    httpOptions: { \n                        withCredentials: false,\n                        // 添加重试和超时设置\n                        retryCount: 3,\n                        retryDelay: 1500,\n                        timeout: 10000\n                    } \n                });\n            }\n            return true;\n        } catch (error) {\n            console.error('[网络][错误] 初始化 Colyseus 客户端失败:', error);\n            this._status = NetworkStatus.ERROR;\n            this.emit('error', this._createError(NetworkErrorCode.CLIENT_INIT_ERROR, '初始化客户端失败', error));\n            return false;\n        }\n    }\n    \n    /**\n     * 尝试下一个服务器URL\n     * @returns 是否有下一个URL可尝试\n     */\n    private _tryNextServerUrl(): boolean {\n        if (this.currentServerUrlIndex < this.serverUrls.length - 1) {\n            this.currentServerUrlIndex++;\n            console.log(`[网络] 尝试下一个服务器地址: ${this.serverUrl}`);\n            this.colyseusClient = null; // 重置客户端，强制重新初始化\n            return true;\n        }\n        return false;\n    }\n    \n    /**\n     * 重置服务器URL索引到第一个\n     */\n    private _resetServerUrlIndex(): void {\n        this.currentServerUrlIndex = 0;\n    }\n    \n    /**\n     * 加入或创建骰子游戏房间\n     * @param options 选项，如玩家名称、是否创建新房间、房间ID等\n     * @returns Promise<Colyseus.Room<LiarDiceRoomState>>\n     */\n    public async joinLiarDiceRoom(options: LiarDiceRoomOptions): Promise<Colyseus.Room<LiarDiceRoomState>> {\n        // 1. 确保客户端已初始化\n        if (!this._initColyseusClient()) {\n            throw this._createError(NetworkErrorCode.CLIENT_INIT_ERROR, '初始化客户端失败');\n        }\n        \n        // 2. 如果已在房间中，先离开\n        if (this.colyseusRoom) {\n            console.warn(\"[网络][警告] 已经在一个房间中，将先离开旧房间...\");\n            try {\n                await this.leaveRoom();\n            } catch (error) {\n                console.error(\"[网络][错误] 离开旧房间失败:\", error);\n                // 继续尝试加入新房间\n            }\n        }\n        \n        // 3. 设置状态\n        this._status = NetworkStatus.JOINING_ROOM;\n        this.emit('statusChange', this._status);\n        \n        try {\n            console.log(`[网络] ${options.create ? '创建' : '加入'}房间, 玩家名称: ${options.playerName}${options.roomId ? ', 房间ID: ' + options.roomId : ''}`);\n            \n            // 4. 根据选项决定是创建还是加入房间\n            if (options.create) {\n                // 创建新房间\n                this.colyseusRoom = await this.colyseusClient!.create<LiarDiceRoomState>(\"liar_dice\", {\n                    playerName: options.playerName,\n                    userId: LoginManager.currentPlayerId // 传递用户ID\n                });\n            } else if (options.roomId) {\n                // 加入指定ID的房间\n                this.colyseusRoom = await this.colyseusClient!.joinById<LiarDiceRoomState>(\n                    options.roomId,\n                    {\n                        playerName: options.playerName,\n                        userId: LoginManager.currentPlayerId\n                    }\n                );\n            } else {\n                // 加入任意可用房间，如果没有则创建\n                this.colyseusRoom = await this.colyseusClient!.joinOrCreate<LiarDiceRoomState>(\n                    \"liar_dice\",\n                    {\n                        playerName: options.playerName,\n                        userId: LoginManager.currentPlayerId\n                    }\n                );\n            }\n            \n            // 5. 设置房间相关信息\n            this._roomId = this.colyseusRoom.roomId;\n            this._sessionId = this.colyseusRoom.sessionId;\n            this._status = NetworkStatus.CONNECTED;\n            \n            // 6. 设置房间监听器\n            this._setupRoomListeners();\n            \n            // 7. 触发连接成功事件\n            this.emit('connected', {\n                roomId: this._roomId,\n                sessionId: this._sessionId\n            });\n            this.emit('statusChange', this._status);\n            \n            console.log(`[网络] 成功${options.create ? '创建' : '加入'}房间, ID: ${this._roomId}, 会话ID: ${this._sessionId}`);\n            \n            return this.colyseusRoom;\n            \n        } catch (error) {\n            // 8. 处理连接错误\n            console.error(`[网络][错误] ${options.create ? '创建' : '加入'}房间失败:`, error);\n            \n            // 尝试下一个服务器地址\n            if (this._tryNextServerUrl()) {\n                console.log('[网络] 尝试使用下一个服务器地址重新连接...');\n                return this.joinLiarDiceRoom(options);\n            }\n            \n            // 重置服务器索引，以便下次从第一个开始尝试\n            this._resetServerUrlIndex();\n            \n            // 设置错误状态\n            this._status = NetworkStatus.ERROR;\n            this.emit('statusChange', this._status);\n            \n            // 根据错误类型创建具体错误\n            let errorCode = NetworkErrorCode.ROOM_JOIN_ERROR;\n            let errorMessage = '加入房间失败';\n            \n            if (error instanceof Error) {\n                if (error.message.includes('not found')) {\n                    errorCode = NetworkErrorCode.ROOM_NOT_FOUND;\n                    errorMessage = '房间不存在';\n                } else if (error.message.includes('full')) {\n                    errorCode = NetworkErrorCode.ROOM_FULL;\n                    errorMessage = '房间已满';\n                } else if (error.message.includes('timeout') || error.message.includes('timed out')) {\n                    errorCode = NetworkErrorCode.CONNECTION_TIMEOUT;\n                    errorMessage = '连接超时';\n                }\n            }\n            \n            const networkError = this._createError(errorCode, errorMessage, error);\n            this.emit('error', networkError);\n            throw networkError;\n        }\n    }\n    \n    /**\n     * 离开当前房间\n     */\n    public async leaveRoom(): Promise<void> {\n        if (this.colyseusRoom) {\n            try {\n                console.log(`[网络] 离开房间: ${this._roomId}`);\n                await this.colyseusRoom.leave();\n            } catch (error) {\n                console.error('[网络][错误] 离开房间时出错:', error);\n            } finally {\n                this._cleanupRoomConnection(NetworkErrorCode.CONNECTION_CLOSED);\n            }\n        } else {\n            console.warn('[网络][警告] 尝试离开房间，但当前未在任何房间中');\n        }\n    }\n    \n    /**\n     * 断开与服务器的连接\n     */\n    public disconnect(): void {\n        this.leaveRoom();\n        if (this.colyseusClient) {\n            console.log('[网络] 断开与服务器的连接');\n            // Colyseus.js 客户端没有显式的断开连接方法，离开房间即可\n            this.colyseusClient = null;\n        }\n        this._status = NetworkStatus.DISCONNECTED;\n        this.emit('statusChange', this._status);\n        this.emit('disconnected');\n    }\n    \n    /**\n     * 向服务器发送消息\n     * @param type 消息类型\n     * @param payload 消息内容\n     */\n    public send(type: string, payload?: any): void {\n        if (!this.colyseusRoom) {\n            console.error(\"[网络] 不在房间内，无法发送消息:\", type);\n            this.emit('error', this._createError(NetworkErrorCode.CONNECTION_CLOSED, '不在房间内，无法发送消息'));\n            return;\n        }\n        \n        try {\n            console.log(`[网络] 发送消息: ${type}`, payload);\n            this.colyseusRoom.send(type, payload);\n        } catch (error) {\n            console.error(`[网络][错误] 发送消息 ${type} 失败:`, error);\n            this.emit('error', this._createError(NetworkErrorCode.CONNECTION_ERROR, '发送消息失败', error));\n        }\n    }\n    \n    /**\n     * 初始化客户端\n     * @private\n     * @returns 是否初始化成功\n     */\n    private _initClient(): boolean {\n        return this._initColyseusClient();\n    }\n    \n    // 已删除重复的 getAvailableRooms 方法，使用下面的实现\n    \n    /**\n     * 设置房间监听器\n     */\n    private _setupRoomListeners(): void {\n        if (!this.colyseusRoom) {\n            console.error('[网络] 无法设置房间监听器：房间未初始化');\n            return;\n        }\n        \n        console.log(`[网络][${this.colyseusRoom.roomId}] 设置房间监听器...`);\n        \n        try {\n            // 尝试访问state，如果出错则说明Schema版本不兼容\n            const stateTest = this.colyseusRoom.state;\n            console.log(`[网络] 房间状态类型: ${stateTest ? typeof stateTest : 'undefined'}`);\n            \n            // 监听房间状态变化\n            this.colyseusRoom.onStateChange((state: any) => {\n                try {\n                    // 将服务器的Schema状态转换为客户端可用的普通对象\n                    const clientState = this._convertSchemaToClientState(state);\n                    this._lastState = clientState;\n                    this.emit('stateChange', clientState);\n                } catch (error) {\n                    console.error('[网络] 处理状态变化时出错:', error);\n                }\n            });\n            \n            // 监听房间错误\n            this.colyseusRoom.onError((code: number, message?: string) => {\n                console.error(`[网络][错误] 房间错误: ${code} - ${message}`);\n                this.emit('error', this._createError(\n                    NetworkErrorCode.SERVER_ERROR,\n                    message || '服务器错误',\n                    { code }\n                ));\n            });\n            \n            // 监听房间离开事件\n            this.colyseusRoom.onLeave((code: number) => {\n                console.log(`[网络] 离开房间，代码: ${code}`);\n                this._cleanupRoomConnection(code);\n            });\n            \n            // 监听所有消息\n            this.colyseusRoom.onMessage(\"*\", (data: any) => {\n                try {\n                    // 从数据中提取类型和消息\n                    const { type, message } = data;\n                    const eventType = String(type);\n                    console.log(`[网络] 收到消息: ${eventType}`, message);\n                    \n                    // 触发对应类型的事件\n                    this.emit(eventType, message);\n                    \n                    // 同时触发通用消息事件\n                    this.emit('message', { type: eventType, message });\n                } catch (error) {\n                    console.error('[网络] 处理消息时出错:', error);\n                }\n            });\n            \n            // 尝试安全地处理初始玩家列表\n            this._safelyProcessInitialPlayers();\n            \n            // 使用 onStateChange 来监听玩家变化\n            this.colyseusRoom.onStateChange((state: any) => {\n                try {\n                    this._safelyProcessPlayerChanges(state);\n                } catch (error) {\n                    console.error('[网络] 处理玩家变化时出错:', error);\n                }\n            });\n        } catch (error) {\n            console.error('[网络] 设置房间监听器时出错:', error);\n            // 尝试基本的错误恢复\n            this.emit('error', this._createError(\n                NetworkErrorCode.CLIENT_INIT_ERROR,\n                '设置房间监听器失败，可能是Schema版本不兼容',\n                { originalError: error }\n            ));\n        }\n    }\n    \n    /**\n     * 安全地处理初始玩家列表\n     * @private\n     */\n    private _safelyProcessInitialPlayers(): void {\n        try {\n            if (!this.colyseusRoom || !this.colyseusRoom.state) return;\n            \n            // 尝试多种方式访问玩家列表\n            const state = this.colyseusRoom.state;\n            \n            // 方法1: 使用forEach (如果是MapSchema)\n            if (state.players && typeof state.players.forEach === 'function') {\n                state.players.forEach((player: any, sessionId: string) => {\n                    try {\n                        const playerData = this._extractPlayerData(player);\n                        console.log(`[网络] 初始玩家: ${playerData.name} (${sessionId})`);\n                        this.emit('playerJoin', { player: playerData, sessionId });\n                    } catch (e) {\n                        console.error(`[网络] 处理玩家数据时出错:`, e);\n                    }\n                });\n                return;\n            }\n            \n            // 方法2: 尝试作为普通对象处理\n            if (state.players && typeof state.players === 'object') {\n                Object.keys(state.players).forEach(sessionId => {\n                    try {\n                        const player = (state.players as any)[sessionId];\n                        const playerData = this._extractPlayerData(player);\n                        console.log(`[网络] 初始玩家(对象模式): ${playerData.name} (${sessionId})`);\n                        this.emit('playerJoin', { player: playerData, sessionId });\n                    } catch (e) {\n                        console.error(`[网络] 处理玩家数据时出错:`, e);\n                    }\n                });\n                return;\n            }\n            \n            console.log(`[网络] 无法遍历玩家列表，可能是 Schema 版本不兼容`);\n        } catch (error) {\n            console.error('[网络] 处理初始玩家列表时出错:', error);\n        }\n    }\n    /**\n     * 安全地处理玩家变化\n     * @param state 服务器状态\n     * @private\n     */\n    private _safelyProcessPlayerChanges(state: any): void {\n        if (!state || !this._lastState) return;\n        \n        try {\n            // 将服务器状态转换为客户端可用的格式\n            const clientState = this._convertSchemaToClientState(state);\n            \n            // 处理玩家加入和状态变化\n            if (clientState.players) {\n                Object.entries(clientState.players).forEach(([sessionId, player]) => {\n                    const previousPlayers = this._lastState?.players;\n                    let previousPlayer = null;\n                    \n                    // 尝试获取之前的玩家数据\n                    if (previousPlayers instanceof Map) {\n                        previousPlayer = previousPlayers.get(sessionId);\n                    } else if (previousPlayers && typeof previousPlayers === 'object') {\n                        previousPlayer = (previousPlayers as any)[sessionId];\n                    }\n                    \n                    if (!previousPlayer) {\n                        // 新玩家加入\n                        console.log(`[网络] 玩家加入: ${player.name} (${sessionId})`);\n                        this.emit('playerJoin', { player, sessionId });\n                    } else if (JSON.stringify(previousPlayer) !== JSON.stringify(player)) {\n                        // 玩家状态变化\n                        console.log(`[网络] 玩家 ${player.name} (${sessionId}) 状态变化`);\n                        this.emit('playerChange', { player, sessionId });\n                    }\n                });\n            }\n            \n            // 处理玩家离开\n            if (this._lastState.players) {\n                // 获取上一个状态的玩家列表\n                const lastPlayers = this._lastState.players instanceof Map ? \n                    Array.from(this._lastState.players.entries()) : \n                    Object.entries(this._lastState.players);\n                \n                // 遍历玩家列表，使用类型断言确保类型安全\n                lastPlayers.forEach((entry) => {\n                    const sessionId = entry[0];\n                    const player = entry[1] as PlayerState;\n                    const currentPlayers = clientState.players;\n                    let playerExists = false;\n                    \n                    // 检查玩家是否还存在\n                    if (currentPlayers instanceof Map) {\n                        playerExists = currentPlayers.has(sessionId);\n                    } else if (currentPlayers && typeof currentPlayers === 'object') {\n                        playerExists = sessionId in currentPlayers;\n                    }\n                    \n                    if (!playerExists) {\n                        // 玩家离开\n                        console.log(`[网络] 玩家离开: ${player.name} (${sessionId})`);\n                        this.emit('playerLeave', { player: player as PlayerState, sessionId });\n                    }\n                });\n            }\n            \n            this._lastState = clientState;\n        } catch (error) {\n            console.error('[网络] 处理玩家变化时出错:', error);\n        }\n    }\n    \n    private _convertSchemaToClientState(state: any): LiarDiceRoomState {\n        if (!state) return new LiarDiceRoomState();\n        \n        try {\n            // 创建新的客户端状态对象\n            const clientState = new LiarDiceRoomState();\n            \n            // 复制基本属性\n            if (state.activePlayerIds) {\n                clientState.activePlayerIds = this._extractArrayData(state.activePlayerIds);\n            }\n            \n            clientState.currentPlayerIndex = this._getNumberProperty(state, 'currentPlayerIndex', 0);\n            clientState.currentBidValue = this._getNumberProperty(state, 'currentBidValue', 0);\n            clientState.currentBidCount = this._getNumberProperty(state, 'currentBidCount', 0);\n            clientState.lastBidderSessionId = this._getStringProperty(state, 'lastBidderSessionId', '');\n            clientState.status = this._getStringProperty(state, 'status', 'waiting');\n            clientState.hostId = this._getStringProperty(state, 'hostId', '');\n            clientState.roundNumber = this._getNumberProperty(state, 'roundNumber', 0);\n            clientState.moveNumber = this._getNumberProperty(state, 'moveNumber', 0);\n            clientState.roundResult = this._getStringProperty(state, 'roundResult', '');\n            clientState.isOneCalledThisRound = this._getBooleanProperty(state, 'isOneCalledThisRound', false);\n            \n            // 处理玩家列表\n            if (state.players) {\n                // 如果是MapSchema，使用forEach\n                if (typeof state.players.forEach === 'function') {\n                    state.players.forEach((player: any, sessionId: string) => {\n                        const playerData = this._extractPlayerData(player);\n                        clientState.players.set(sessionId, playerData);\n                    });\n                }\n                // 如果是普通对象，使用Object.entries\n                else if (typeof state.players === 'object') {\n                    Object.entries(state.players).forEach(([sessionId, player]) => {\n                        const playerData = this._extractPlayerData(player as any);\n                        clientState.players.set(sessionId, playerData);\n                    });\n                }\n            }\n            \n            return clientState;\n        } catch (error) {\n            console.error('[网络] 转换Schema状态时出错:', error);\n            return new LiarDiceRoomState();\n        }\n    }\n    \n    /**\n     * 提取玩家数据\n     * @param player 服务器玩家数据\n     * @returns 客户端玩家数据\n     * @private\n     */\n    private _extractPlayerData(player: any): PlayerState {\n        const playerData = new PlayerState();\n        \n        if (!player) return playerData;\n        \n        try {\n            // 复制基本属性\n            playerData.id = this._getStringProperty(player, 'id', '');\n            playerData.sessionId = this._getStringProperty(player, 'sessionId', '');\n            playerData.name = this._getStringProperty(player, 'name', '');\n            playerData.diceCount = this._getNumberProperty(player, 'diceCount', 0);\n            playerData.isReady = this._getBooleanProperty(player, 'isReady', false);\n            playerData.isConnected = this._getBooleanProperty(player, 'isConnected', true);\n            playerData.isAI = this._getBooleanProperty(player, 'isAI', false);\n            playerData.aiType = this._getStringProperty(player, 'aiType', '');\n            \n            // 如果有骰子数据，也复制过来\n            if (player.currentDices) {\n                playerData.currentDices = this._extractArrayData(player.currentDices);\n            }\n        } catch (error) {\n            console.error('[网络] 提取玩家数据时出错:', error);\n        }\n        \n        return playerData;\n    }\n    \n    /**\n     * 安全地提取数组数据\n     * @param arr 数组或ArraySchema\n     * @returns 普通数组\n     * @private\n     */\n    private _extractArrayData(arr: any): any[] {\n        if (!arr) return [];\n        \n        try {\n            // 如果是ArraySchema，使用toArray方法\n            if (typeof arr.toArray === 'function') {\n                return arr.toArray();\n            }\n            \n            // 如果是普通数组，直接返回\n            if (Array.isArray(arr)) {\n                return [...arr];\n            }\n            \n            // 如果是类数组对象，转换为数组\n            if (typeof arr.forEach === 'function') {\n                const result: any[] = [];\n                arr.forEach((item: any) => result.push(item));\n                return result;\n            }\n            \n            // 如果是普通对象，尝试转换为数组\n            if (typeof arr === 'object') {\n                return Object.values(arr);\n            }\n        } catch (error) {\n            console.error('[网络] 提取数组数据时出错:', error);\n        }\n        \n        return [];\n    }\n    \n    /**\n     * 安全地获取字符串属性\n     * @param obj 对象\n     * @param prop 属性名\n     * @param defaultValue 默认值\n     * @returns 字符串值\n     * @private\n     */\n    private _getStringProperty(obj: any, prop: string, defaultValue: string = ''): string {\n        if (!obj) return defaultValue;\n        \n        try {\n            // 尝试直接访问\n            if (obj[prop] !== undefined) {\n                return String(obj[prop]);\n            }\n            \n            // 尝试通过getter访问\n            if (typeof obj.get === 'function') {\n                const value = obj.get(prop);\n                if (value !== undefined) {\n                    return String(value);\n                }\n            }\n        } catch (error) {\n            // 忽略错误，返回默认值\n        }\n        \n        return defaultValue;\n    }\n    \n    /**\n     * 安全地获取数字属性\n     * @param obj 对象\n     * @param prop 属性名\n     * @param defaultValue 默认值\n     * @returns 数字值\n     * @private\n     */\n    private _getNumberProperty(obj: any, prop: string, defaultValue: number = 0): number {\n        if (!obj) return defaultValue;\n        \n        try {\n            // 尝试直接访问\n            if (obj[prop] !== undefined) {\n                const num = Number(obj[prop]);\n                return isNaN(num) ? defaultValue : num;\n            }\n            \n            // 尝试通过getter访问\n            if (typeof obj.get === 'function') {\n                const value = obj.get(prop);\n                if (value !== undefined) {\n                    const num = Number(value);\n                    return isNaN(num) ? defaultValue : num;\n                }\n            }\n        } catch (error) {\n            // 忽略错误，返回默认值\n        }\n        \n        return defaultValue;\n    }\n    \n    /**\n     * 安全地获取布尔属性\n     * @param obj 对象\n     * @param prop 属性名\n     * @param defaultValue 默认值\n     * @returns 布尔值\n     * @private\n     */\n    private _getBooleanProperty(obj: any, prop: string, defaultValue: boolean = false): boolean {\n        if (!obj) return defaultValue;\n        \n        try {\n            // 尝试直接访问\n            if (obj[prop] !== undefined) {\n                return Boolean(obj[prop]);\n            }\n            \n            // 尝试通过getter访问\n            if (typeof obj.get === 'function') {\n                const value = obj.get(prop);\n                if (value !== undefined) {\n                    return Boolean(value);\n                }\n            }\n        } catch (error) {\n            // 忽略错误，返回默认值\n        }\n        \n        return defaultValue;\n    }\n    \n    /**\n     * 清理房间连接相关状态并触发断开连接事件\n     * @param code 断开连接的代码\n     */\n    private _cleanupRoomConnection(code: number): void {\n        if (!this.colyseusRoom && this._status === NetworkStatus.DISCONNECTED) {\n            return; // 避免重复清理\n        }\n        \n        // 记录之前的房间ID，用于日志\n        const prevRoomId = this._roomId;\n        \n        // 重置房间相关状态\n        this.colyseusRoom = null;\n        this._roomId = '';\n        this._sessionId = '';\n        this._lastState = null;\n        this._status = NetworkStatus.DISCONNECTED;\n        \n        // 触发状态变化和断开连接事件\n        console.log(`[网络] 房间连接已清理: ${prevRoomId}`);\n        this.emit('statusChange', this._status);\n        this.emit('roomDisconnected', { code, roomId: prevRoomId });\n    }\n    \n    /**\n     * 获取可用房间列表\n     * @param roomName 可选的房间名称过滤\n     * @returns Promise<RoomAvailable[]>\n     */\n    public async getAvailableRooms(roomName?: string): Promise<any[]> {\n        if (!this._initColyseusClient()) {\n            throw this._createError(NetworkErrorCode.CLIENT_INIT_ERROR, '初始化客户端失败');\n        }\n        \n        try {\n            console.log('[网络] 获取可用房间列表...');\n            \n            // 构造正确的HTTP URL，而不是WebSocket URL\n            let httpUrl = this.serverUrl.replace('ws://', 'http://').replace('wss://', 'https://');\n            const path = roomName ? `/rooms/${roomName}` : '/rooms';\n            console.log(`[网络] 请求房间列表URL: ${httpUrl}${path}`);\n            \n            // 使用正确的HTTP URL请求\n            const response = await this.colyseusClient!.http.get(path);\n            \n            // 处理响应数据，确保返回数组\n            const rooms = Array.isArray(response) ? response : [];\n            \n            console.log(`[网络] 找到 ${rooms.length} 个可用房间`);\n            return rooms;\n        } catch (error) {\n            console.error('[网络][错误] 获取可用房间列表失败:', error);\n            \n            // 尝试下一个服务器地址\n            if (this._tryNextServerUrl()) {\n                console.log('[网络] 尝试使用下一个服务器地址重新获取房间列表...');\n                // 重置客户端并重试\n                this.colyseusClient = null;\n                this._initColyseusClient();\n                return this.getAvailableRooms(roomName);\n            }\n            \n            // 重置服务器索引，以便下次从第一个开始尝试\n            this._resetServerUrlIndex();\n            \n            const networkError = this._createError(\n                NetworkErrorCode.CONNECTION_ERROR,\n                '获取可用房间列表失败',\n                error\n            );\n            this.emit('error', networkError);\n            throw networkError;\n        }\n    }\n    \n    /**\n     * 重新连接到之前的房间\n     * @param sessionId 之前的会话ID\n     * @param roomId 之前的房间ID\n     * @returns Promise<boolean> 是否重连成功\n     */\n    public async reconnect(sessionId: string, roomId: string): Promise<boolean> {\n        if (!sessionId || !roomId) {\n            console.error('[网络][错误] 重连失败: 缺少会话ID或房间ID');\n            return false;\n        }\n        \n        if (!this._initColyseusClient()) {\n            return false;\n        }\n        \n        this._status = NetworkStatus.RECONNECTING;\n        this.emit('statusChange', this._status);\n        \n        try {\n            console.log(`[网络] 尝试重连到房间: ${roomId}, 会话ID: ${sessionId}`);\n            \n            // Colyseus.js 客户端可能没有直接的 reconnect 方法\n            // 我们使用 joinById 来模拟重连\n            this.colyseusRoom = await this.colyseusClient!.joinById<LiarDiceRoomState>(\n                roomId,\n                {\n                    sessionId: sessionId,\n                    reconnect: true\n                }\n            );\n            \n            this._roomId = this.colyseusRoom.roomId;\n            this._sessionId = this.colyseusRoom.sessionId;\n            this._status = NetworkStatus.CONNECTED;\n            \n            this._setupRoomListeners();\n            \n            this.emit('reconnected', {\n                roomId: this._roomId,\n                sessionId: this._sessionId\n            });\n            this.emit('statusChange', this._status);\n            \n            console.log(`[网络] 重连成功, 房间ID: ${this._roomId}, 会话ID: ${this._sessionId}`);\n            \n            return true;\n        } catch (error) {\n            console.error('[网络][错误] 重连失败:', error);\n            \n            // 尝试下一个服务器地址\n            if (this._tryNextServerUrl()) {\n                console.log('[网络] 尝试使用下一个服务器地址重新重连...');\n                return this.reconnect(sessionId, roomId);\n            }\n            \n            // 重置服务器索引，以便下次从第一个开始尝试\n            this._resetServerUrlIndex();\n            \n            this._status = NetworkStatus.ERROR;\n            this.emit('statusChange', this._status);\n            \n            const networkError = this._createError(\n                NetworkErrorCode.CONNECTION_ERROR,\n                '重连失败',\n                error\n            );\n            this.emit('error', networkError);\n            \n            return false;\n        }\n    }\n}\n"]}