{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/prefabs/filter-tab.ts"],"names":["_decorator","Component","Node","Label","Button","Color","tween","Vec3","UIOpacity","ccclass","property","FilterTab","_isSelected","_tabId","_originalScale","_groupManager","SELECTED_COLOR","NORMAL_COLOR","onLoad","node","scale","clone","updateAppearance","start","button","on","onTabClicked","EventType","TOUCH_END","onDestroy","off","setTabId","id","getTabId","setTabName","name","tabName","string","setGroupId","groupId","getGroupId","setTabIndex","index","tabIndex","getTabIndex","setGroupManager","manager","setSelected","selected","fireEvent","playSelectionAnimation","selectTab","emit","tabId","isSelected","indicator","active","color","interactable","playClickFeedback","to","x","y","uiOpacity","getComponent","addComponent","opacity","call"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, Button, Color, tween, Vec3, UIOpacity } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * 过滤标签预制体\n * 功能：\n * 1. 显示标签名称\n * 2. 支持选中状态显示\n * 3. 点击切换选中状态\n * 4. 支持动画效果\n * 5. 支持标签分组管理\n */\n@ccclass('FilterTab')\nexport class FilterTab extends Component {\n    @property(Label)\n    tabName: Label = null!;\n    \n    @property(Node)\n    indicator: Node = null!;\n    \n    @property(Button)\n    button: Button = null!;\n\n    @property\n    groupId: string = \"default\";  // 标签所属分组ID\n    \n    @property\n    tabIndex: number = 0;  // 标签在组内的索引\n\n    private _isSelected: boolean = false;\n    private _tabId: string = '';\n    private _originalScale: Vec3 = new Vec3(1, 1, 1);\n    private _groupManager: any = null; // 标签组管理器引用\n\n    // 颜色常量\n    private readonly SELECTED_COLOR: Color = new Color(255, 204, 0, 255); // 选中时标签颜色（金色）\n    private readonly NORMAL_COLOR: Color = new Color(255, 255, 255, 255); // 未选中时标签颜色（白色）\n\n    onLoad() {\n        this._originalScale = this.node.scale.clone();\n        \n        // 初始状态\n        this.updateAppearance();\n    }\n\n    start() {\n        // 注册点击事件\n        if (this.button) {\n            this.button.node.on('click', this.onTabClicked, this);\n        } else {\n            this.node.on(Node.EventType.TOUCH_END, this.onTabClicked, this);\n        }\n    }\n\n    onDestroy() {\n        // 移除事件监听\n        if (this.button) {\n            this.button.node.off('click', this.onTabClicked, this);\n        } else {\n            this.node.off(Node.EventType.TOUCH_END, this.onTabClicked, this);\n        }\n    }\n\n    /**\n     * 设置标签ID\n     */\n    public setTabId(id: string): void {\n        this._tabId = id;\n    }\n\n    /**\n     * 获取标签ID\n     */\n    public getTabId(): string {\n        return this._tabId;\n    }\n\n    /**\n     * 设置标签名称\n     */\n    public setTabName(name: string): void {\n        if (this.tabName) {\n            this.tabName.string = name;\n        }\n    }\n\n    /**\n     * 设置分组ID\n     */\n    public setGroupId(id: string): void {\n        this.groupId = id;\n    }\n\n    /**\n     * 获取分组ID\n     */\n    public getGroupId(): string {\n        return this.groupId;\n    }\n\n    /**\n     * 设置标签在组内的索引\n     */\n    public setTabIndex(index: number): void {\n        this.tabIndex = index;\n    }\n\n    /**\n     * 获取标签在组内的索引\n     */\n    public getTabIndex(): number {\n        return this.tabIndex;\n    }\n\n    /**\n     * 设置标签组管理器\n     */\n    public setGroupManager(manager: any): void {\n        this._groupManager = manager;\n    }\n\n    /**\n     * 设置选中状态\n     */\n    public setSelected(selected: boolean, fireEvent: boolean = false): void {\n        if (this._isSelected === selected) return;\n        \n        this._isSelected = selected;\n        this.updateAppearance();\n        \n        // 播放选中/取消选中动画\n        this.playSelectionAnimation();\n        \n        // 通知组管理器（如果存在）\n        if (selected && this._groupManager) {\n            this._groupManager.selectTab(this);\n        }\n        \n        // 触发事件（如果需要）\n        if (fireEvent) {\n            this.node.emit('tab-selected', {\n                tabId: this._tabId,\n                groupId: this.groupId,\n                tabIndex: this.tabIndex,\n                isSelected: this._isSelected\n            });\n        }\n    }\n\n    /**\n     * 获取选中状态\n     */\n    public isSelected(): boolean {\n        return this._isSelected;\n    }\n\n    /**\n     * 更新外观\n     */\n    private updateAppearance(): void {\n        // 更新指示器\n        if (this.indicator) {\n            this.indicator.active = this._isSelected;\n        }\n        \n        // 更新标签文字颜色\n        if (this.tabName) {\n            this.tabName.color = this._isSelected ? this.SELECTED_COLOR : this.NORMAL_COLOR;\n        }\n        \n        // 更新按钮状态\n        if (this.button) {\n            this.button.interactable = !this._isSelected; // 已选中的标签不可再点击\n        }\n    }\n\n    /**\n     * 标签点击事件处理\n     */\n    private onTabClicked(): void {\n        // 如果已选中则不处理\n        if (this._isSelected) return;\n        \n        // 设置为选中状态\n        this.setSelected(true, true);\n        \n        // 播放点击反馈动画\n        this.playClickFeedback();\n    }\n\n    /**\n     * 播放点击反馈动画\n     */\n    private playClickFeedback(): void {\n        tween(this.node)\n            .to(0.1, { scale: new Vec3(this._originalScale.x * 0.9, this._originalScale.y * 0.9, 1) })\n            .to(0.1, { scale: this._originalScale })\n            .start();\n    }\n\n    /**\n     * 播放选中/取消选中动画\n     */\n    private playSelectionAnimation(): void {\n        if (this._isSelected) {\n            // 选中动画\n            tween(this.node)\n                .to(0.2, { scale: new Vec3(this._originalScale.x * 1.1, this._originalScale.y * 1.1, 1) })\n                .to(0.2, { scale: this._originalScale })\n                .start();\n                \n            // 指示器动画\n            if (this.indicator) {\n                this.indicator.active = true;\n                const uiOpacity = this.indicator.getComponent(UIOpacity) || this.indicator.addComponent(UIOpacity);\n                uiOpacity.opacity = 0;\n                \n                tween(uiOpacity)\n                    .to(0.3, { opacity: 255 })\n                    .start();\n            }\n        } else {\n            // 取消选中动画\n            if (this.indicator) {\n                const uiOpacity = this.indicator.getComponent(UIOpacity) || this.indicator.addComponent(UIOpacity);\n                \n                tween(uiOpacity)\n                    .to(0.2, { opacity: 0 })\n                    .call(() => {\n                        this.indicator.active = false;\n                    })\n                    .start();\n            }\n        }\n    }\n}\n"]}