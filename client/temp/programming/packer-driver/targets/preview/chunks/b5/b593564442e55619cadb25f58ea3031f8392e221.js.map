{"version":3,"sources":["file:///d:/editors/liars_dice_demo/node_modules/zod/lib/locales/en.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","Object","defineProperty","value","util_1","ZodError_1","errorMap","issue","_ctx","message","code","ZodIssueCode","invalid_type","received","ZodParsedType","undefined","expected","invalid_literal","JSON","stringify","util","jsonStringifyReplacer","unrecognized_keys","joinValues","keys","invalid_union","invalid_union_discriminator","options","invalid_enum_value","invalid_arguments","invalid_return_type","invalid_date","invalid_string","validation","includes","position","startsWith","endsWith","assertNever","too_small","type","exact","inclusive","minimum","Date","Number","too_big","maximum","custom","invalid_intersection_types","not_multiple_of","multipleOf","not_finite","defaultError","default","_cjsExports","___esModule","__esModule","_default"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../helpers/util';\nimport { __cjsMetaURL as _req0} from '../ZodError';\nlet _cjsExports;\nlet ___esModule;\nlet _default;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n Object.defineProperty(exports, \"__esModule\", { value: true });\n const util_1 = require(\"../helpers/util\");\n const ZodError_1 = require(\"../ZodError\");\n const errorMap = (issue, _ctx) => {\n     let message;\n     switch (issue.code) {\n         case ZodError_1.ZodIssueCode.invalid_type:\n             if (issue.received === util_1.ZodParsedType.undefined) {\n                 message = \"Required\";\n             }\n             else {\n                 message = `Expected ${issue.expected}, received ${issue.received}`;\n             }\n             break;\n         case ZodError_1.ZodIssueCode.invalid_literal:\n             message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;\n             break;\n         case ZodError_1.ZodIssueCode.unrecognized_keys:\n             message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, \", \")}`;\n             break;\n         case ZodError_1.ZodIssueCode.invalid_union:\n             message = `Invalid input`;\n             break;\n         case ZodError_1.ZodIssueCode.invalid_union_discriminator:\n             message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;\n             break;\n         case ZodError_1.ZodIssueCode.invalid_enum_value:\n             message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;\n             break;\n         case ZodError_1.ZodIssueCode.invalid_arguments:\n             message = `Invalid function arguments`;\n             break;\n         case ZodError_1.ZodIssueCode.invalid_return_type:\n             message = `Invalid function return type`;\n             break;\n         case ZodError_1.ZodIssueCode.invalid_date:\n             message = `Invalid date`;\n             break;\n         case ZodError_1.ZodIssueCode.invalid_string:\n             if (typeof issue.validation === \"object\") {\n                 if (\"includes\" in issue.validation) {\n                     message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                     if (typeof issue.validation.position === \"number\") {\n                         message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                     }\n                 }\n                 else if (\"startsWith\" in issue.validation) {\n                     message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                 }\n                 else if (\"endsWith\" in issue.validation) {\n                     message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                 }\n                 else {\n                     util_1.util.assertNever(issue.validation);\n                 }\n             }\n             else if (issue.validation !== \"regex\") {\n                 message = `Invalid ${issue.validation}`;\n             }\n             else {\n                 message = \"Invalid\";\n             }\n             break;\n         case ZodError_1.ZodIssueCode.too_small:\n             if (issue.type === \"array\")\n                 message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n             else if (issue.type === \"string\")\n                 message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n             else if (issue.type === \"number\")\n                 message = `Number must be ${issue.exact\n                     ? `exactly equal to `\n                     : issue.inclusive\n                         ? `greater than or equal to `\n                         : `greater than `}${issue.minimum}`;\n             else if (issue.type === \"date\")\n                 message = `Date must be ${issue.exact\n                     ? `exactly equal to `\n                     : issue.inclusive\n                         ? `greater than or equal to `\n                         : `greater than `}${new Date(Number(issue.minimum))}`;\n             else\n                 message = \"Invalid input\";\n             break;\n         case ZodError_1.ZodIssueCode.too_big:\n             if (issue.type === \"array\")\n                 message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n             else if (issue.type === \"string\")\n                 message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n             else if (issue.type === \"number\")\n                 message = `Number must be ${issue.exact\n                     ? `exactly`\n                     : issue.inclusive\n                         ? `less than or equal to`\n                         : `less than`} ${issue.maximum}`;\n             else if (issue.type === \"bigint\")\n                 message = `BigInt must be ${issue.exact\n                     ? `exactly`\n                     : issue.inclusive\n                         ? `less than or equal to`\n                         : `less than`} ${issue.maximum}`;\n             else if (issue.type === \"date\")\n                 message = `Date must be ${issue.exact\n                     ? `exactly`\n                     : issue.inclusive\n                         ? `smaller than or equal to`\n                         : `smaller than`} ${new Date(Number(issue.maximum))}`;\n             else\n                 message = \"Invalid input\";\n             break;\n         case ZodError_1.ZodIssueCode.custom:\n             message = `Invalid input`;\n             break;\n         case ZodError_1.ZodIssueCode.invalid_intersection_types:\n             message = `Intersection results could not be merged`;\n             break;\n         case ZodError_1.ZodIssueCode.not_multiple_of:\n             message = `Number must be a multiple of ${issue.multipleOf}`;\n             break;\n         case ZodError_1.ZodIssueCode.not_finite:\n             message = \"Number must be finite\";\n             break;\n         default:\n             message = _ctx.defaultError;\n             util_1.util.assertNever(issue);\n     }\n     return { message };\n };\n exports.default = errorMap;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n___esModule = module.exports.__esModule;\n_default = module.exports.default;\n\n}, () => ({\n  '../helpers/util': _req,\n  '../ZodError': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}