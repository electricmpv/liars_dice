{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/core/game-state-manager.ts"],"names":["GameStateManager","EventTarget","NetworkManager","currentState","_gameState","instance","_instance","constructor","_historyItems","_currentPlayerId","_playerDices","getInstance","on","handleChallengeResult","bind","console","log","data","JSON","stringify","bid","Array","isArray","error","challengerId","challengedId","isValid","actualCount","challenger","players","find","p","id","challenged","challengeSucceeded","addChallengeHistory","name","initialize","playerId","updateGameState","stateData","prevState","emit","addHistoryItem","item","existingIndex","findIndex","h","push","length","shift","items","newItem","addBidHistory","playerName","addSystemHistory","value","count","faceLabel","getFaceLabel","Date","now","text","timestamp","type","valid","totalCount","challengerName","challengedName","resultText","addSpotOnHistory","updatePlayerDices","dices","gameState","historyItems","currentPlayerId","playerDices","isPlayerTurn","isMyTurn","activePlayers","currentPlayerIndex","undefined","currentBid","totalDiceCount","reduce","sum","diceCount","face","clear","off"],"mappings":"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","sourcesContent":["import { EventTarget } from 'cc';\nimport { Bid, Face } from '../../shared/protocols/game-types.d';\n// Import NetworkManager\nimport { NetworkManager } from './network';\n\n// Define the expected payload structure for game:challenge_result\n// (Adjust based on actual server implementation if different)\ninterface ChallengeResultPayload {\n    challengerId: string;\n    challengedId: string;\n    bid: Bid; // The bid that was challenged\n    isValid: boolean; // Whether the bid was valid (true) or invalid (false) -> challenge failed/succeeded\n    actualCount: number; // The actual count of the bid value (including wilds if applicable)\n    allDice?: { [playerId: string]: Face[] }; // Optional: might be sent by server\n    loserId: string; // Who lost the die\n    // Player names might be sent, or we look them up\n    challengerName?: string;\n    challengedName?: string;\n}\n\n\n// 历史记录项类型\nexport interface HistoryItem {\n    id: string;\n    text: string;\n    timestamp: number;\n    type: 'bid' | 'challenge' | 'spot_on' | 'system';\n    playerId?: string;\n}\n\n// 游戏状态类型\nexport interface GameStateData {\n    gameId: string;\n    players: PlayerData[];\n    activePlayers: string[];\n    currentPlayerIndex: number;\n    currentBid: Bid | [0, 0];\n    roundNumber: number;\n    moveNumber: number;\n    status: \"waiting\" | \"playing\" | \"finished\";\n    winner?: string;\n}\n\n// 玩家数据类型\nexport interface PlayerData {\n    id: string;\n    name: string;\n    diceCount: number;\n}\n\n/**\n * 游戏状态管理器\n * 负责管理游戏状态和历史记录，确保所有客户端状态同步\n */\nexport class GameStateManager extends EventTarget {\n    private static _instance: GameStateManager;\n\n    // 游戏状态\n    private _gameState: GameStateData | null = null;\n\n    // 历史记录\n    private _historyItems: HistoryItem[] = [];\n\n    // 当前玩家ID\n    private _currentPlayerId: string = '';\n\n    // 当前玩家骰子\n    private _playerDices: Face[] = [];\n    \n    /**\n     * 获取当前游戏状态\n     */\n    public get currentState(): GameStateData | null {\n        return this._gameState;\n    }\n\n    /**\n     * 获取单例实例\n     */\n    public static get instance(): GameStateManager {\n        if (!this._instance) {\n            this._instance = new GameStateManager();\n        }\n        return this._instance;\n    }\n\n    /**\n     * 私有构造函数，确保单例\n     */\n    private constructor() {\n        super();\n        // Add listener for challenge results from NetworkManager\n        NetworkManager.getInstance().on('game:challenge_result', this.handleChallengeResult.bind(this));\n        console.log(\"[GameStateManager] Constructor: Registered listener for 'game:challenge_result'\");\n    }\n\n    // Add the event handler method\n    private handleChallengeResult(data: ChallengeResultPayload): void {\n        console.log(\"[GameStateManager] handleChallengeResult received data:\", JSON.stringify(data)); // Log the full received data\n\n        // --- DEBUGGING: Log the bid from the event data ---\n        console.log(`[GameStateManager] handleChallengeResult: Received bid from event data:`, data?.bid, `Type: ${typeof data?.bid}`, `IsArray: ${Array.isArray(data?.bid)}`);\n        // --- END DEBUGGING ---\n\n        if (!this._gameState) {\n            console.error(\"[GameStateManager] Cannot process challenge result: game state is null.\");\n            return;\n        }\n\n        const { challengerId, challengedId, bid, isValid, actualCount } = data;\n\n        // Find player names from current game state\n        const challenger = this._gameState.players.find(p => p.id === challengerId);\n        const challenged = this._gameState.players.find(p => p.id === challengedId);\n\n        if (!challenger || !challenged) {\n            console.error(\"[GameStateManager] Cannot find challenger or challenged player in game state.\");\n            return;\n        }\n\n        // Determine if the challenge was successful from the challenger's perspective\n        // addChallengeHistory expects 'valid' to mean \"challenge succeeded\" (bid was invalid)\n        const challengeSucceeded = !isValid; // If bid was NOT valid, challenge succeeded\n\n        this.addChallengeHistory(\n            challengerId,\n            challengedId,\n            challengeSucceeded, // Pass whether the challenge succeeded\n            actualCount,\n            challenger.name,\n            challenged.name,\n            bid\n        );\n    }\n\n\n    /**\n     * 初始化游戏状态管理器\n     * @param playerId 当前玩家ID\n     */\n    public initialize(playerId: string): void {\n        this._currentPlayerId = playerId;\n        this._historyItems = [];\n        this._gameState = null;\n        this._playerDices = [];\n    }\n\n    /**\n     * 更新游戏状态\n     * @param stateData 游戏状态数据\n     */\n    public updateGameState(stateData: GameStateData): void {\n        const prevState = this._gameState;\n        this._gameState = stateData;\n\n        // 触发状态更新事件\n        this.emit('state-updated', {\n            prevState,\n            currentState: stateData\n        });\n    }\n\n    /**\n     * 添加历史记录\n     * @param item 历史记录项\n     */\n    public addHistoryItem(item: HistoryItem): void {\n        // 检查是否已存在相同ID的历史记录\n        const existingIndex = this._historyItems.findIndex(h => h.id === item.id);\n        if (existingIndex >= 0) {\n            // 如果已存在，更新而不是添加\n            this._historyItems[existingIndex] = item;\n        } else {\n            // 添加新的历史记录\n            this._historyItems.push(item);\n        }\n\n        // 限制历史记录数量\n        if (this._historyItems.length > 100) {\n            this._historyItems.shift();\n        }\n\n        // 触发历史记录更新事件\n        this.emit('history-updated', {\n            items: this._historyItems,\n            newItem: item\n        });\n    }\n\n    /**\n     * 添加竞价历史记录\n     * @param playerId 玩家ID\n     * @param bid 竞价\n     * @param playerName 玩家名称\n     */\n    public addBidHistory(playerId: string, bid: Bid, playerName: string): void {\n        // --- DEBUGGING: Log the received bid value and type ---\n        console.log(`[GameStateManager] addBidHistory called for player ${playerName} (${playerId}). Received bid:`, bid, `Type: ${typeof bid}`, `IsArray: ${Array.isArray(bid)}`);\n\n        // Defensive check before destructuring\n        if (!Array.isArray(bid) || bid.length !== 2) {\n            console.error(`[GameStateManager] addBidHistory received invalid bid format. Expected [value, count], got:`, bid);\n            // Optionally add a generic history item indicating an error\n            this.addSystemHistory(`错误：处理 ${playerName} 的出价时遇到问题。`);\n            return; // Prevent the TypeError\n        }\n        // --- END DEBUGGING ---\n\n        const [value, count] = bid; // Destructuring should be safe now\n        const faceLabel = this.getFaceLabel(value as Face);\n\n        this.addHistoryItem({\n            id: `bid_${playerId}_${Date.now()}`,\n            text: `${playerName} 出价: ${count}个 ${faceLabel}`,\n            timestamp: Date.now(),\n            type: 'bid',\n            playerId\n        });\n    }\n\n    /**\n     * 添加质疑历史记录\n     * @param challengerId 质疑者ID\n     * @param challengedId 被质疑者ID\n     * @param valid 质疑是否有效\n     * @param totalCount 实际骰子数量\n     * @param challengerName 质疑者名称\n     * @param challengedName 被质疑者名称\n     * @param bid 当前竞价\n     */\n    public addChallengeHistory(\n        challengerId: string,\n        challengedId: string,\n        valid: boolean,\n        totalCount: number,\n        challengerName: string,\n        challengedName: string,\n        bid: Bid | [0, 0]\n    ): void {\n        // --- DEBUGGING: Log the bid parameter received by this function ---\n        console.log(`[GameStateManager] addChallengeHistory called. Received bid parameter:`, bid, `Type: ${typeof bid}`, `IsArray: ${Array.isArray(bid)}`);\n\n        // Defensive check before destructuring\n        if (!Array.isArray(bid) || bid.length !== 2) {\n            console.error(`[GameStateManager] addChallengeHistory received invalid bid format. Expected [value, count], got:`, bid);\n            this.addSystemHistory(`错误：处理挑战结果时遇到无效的出价数据。`);\n            return; // Prevent the TypeError\n        }\n        // --- END DEBUGGING ---\n\n        const [value, count] = bid; // Destructuring should be safe now\n        const faceLabel = this.getFaceLabel(value as Face);\n\n        let resultText = \"\";\n\n        if (valid) { // 质疑成功 (对方叫大了)\n            resultText = `${challengerName} 质疑 ${challengedName} (${count}个${faceLabel}) 成功! 实际数量: ${totalCount}`;\n        } else { // 质疑失败 (对方没叫大)\n            resultText = `${challengerName} 质疑 ${challengedName} (${count}个${faceLabel}) 失败! 实际数量: ${totalCount}`;\n        }\n\n        this.addHistoryItem({\n            id: `challenge_${challengerId}_${Date.now()}`,\n            text: resultText,\n            timestamp: Date.now(),\n            type: 'challenge',\n            playerId: challengerId\n        });\n    }\n\n    /**\n     * 添加即时喊历史记录\n     * @param playerId 玩家ID\n     * @param valid 即时喊是否有效\n     * @param totalCount 实际骰子数量\n     * @param playerName 玩家名称\n     * @param bid 当前竞价\n     */\n    public addSpotOnHistory(\n        playerId: string,\n        valid: boolean,\n        totalCount: number,\n        playerName: string,\n        bid: Bid | [0, 0]\n    ): void {\n        const [value, count] = bid;\n        const faceLabel = this.getFaceLabel(value as Face);\n\n        let resultText = \"\";\n\n        if (valid) { // 开点成功\n            resultText = `${playerName} 开点 (${count}个${faceLabel}) 正确! 实际数量: ${totalCount}`;\n        } else { // 开点失败\n            resultText = `${playerName} 开点 (${count}个${faceLabel}) 错误! 实际数量: ${totalCount}`;\n        }\n\n        this.addHistoryItem({\n            id: `spot_on_${playerId}_${Date.now()}`,\n            text: resultText,\n            timestamp: Date.now(),\n            type: 'spot_on',\n            playerId\n        });\n    }\n\n    /**\n     * 添加系统历史记录\n     * @param text 系统消息文本\n     */\n    public addSystemHistory(text: string): void {\n        this.addHistoryItem({\n            id: `system_${Date.now()}`,\n            text,\n            timestamp: Date.now(),\n            type: 'system'\n        });\n    }\n\n    /**\n     * 更新玩家骰子\n     * @param dices 骰子数组\n     */\n    public updatePlayerDices(dices: Face[]): void {\n        this._playerDices = dices;\n        this.emit('dices-updated', { dices });\n    }\n\n    /**\n     * 获取当前游戏状态\n     */\n    public get gameState(): GameStateData | null {\n        return this._gameState;\n    }\n\n    /**\n     * 获取历史记录\n     */\n    public get historyItems(): HistoryItem[] {\n        return [...this._historyItems];\n    }\n\n    /**\n     * 获取当前玩家ID\n     */\n    public get currentPlayerId(): string {\n        return this._currentPlayerId;\n    }\n\n    /**\n     * 获取当前玩家骰子\n     */\n    public get playerDices(): Face[] {\n        return [...this._playerDices];\n    }\n\n    /**\n     * 判断当前是否是玩家的回合\n     */\n    public get isPlayerTurn(): boolean {\n        if (!this._gameState) {\n            console.log(`[GameStateManager] isPlayerTurn: 游戏状态为空，返回false`);\n            return false;\n        }\n\n        const isMyTurn = this._gameState.activePlayers &&\n            this._gameState.currentPlayerIndex !== undefined &&\n            this._gameState.activePlayers[this._gameState.currentPlayerIndex] === this._currentPlayerId;\n\n        console.log(`[GameStateManager] isPlayerTurn: 当前玩家ID=${this._currentPlayerId}, 活跃玩家列表=${JSON.stringify(this._gameState.activePlayers)}, 当前玩家索引=${this._gameState.currentPlayerIndex}, 结果=${isMyTurn}`);\n\n        // 测试代码已移除，使用实际的回合状态\n        return isMyTurn;\n    }\n\n    /**\n     * 获取当前竞价\n     */\n    public get currentBid(): Bid | [0, 0] {\n        if (!this._gameState) return [0, 0];\n        return this._gameState.currentBid;\n    }\n\n    /**\n     * 获取总骰子数量\n     */\n    public get totalDiceCount(): number {\n        if (!this._gameState || !this._gameState.players) return 0;\n        return this._gameState.players.reduce((sum, p) => sum + p.diceCount, 0);\n    }\n\n    /**\n     * 获取骰子面值标签\n     */\n    private getFaceLabel(face: Face): string {\n        return [\"?\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"][face] || `${face}`;\n    }\n\n    /**\n     * 清理资源\n     */\n    public clear(): void {\n        this._historyItems = [];\n        this._gameState = null;\n        this._playerDices = [];\n        this._currentPlayerId = '';\n        // 移除监听器\n        NetworkManager.getInstance().off('game:challenge_result', this.handleChallengeResult.bind(this));\n        console.log(\"[GameStateManager] Clear: Removed listener for 'game:challenge_result'\");\n    }\n}\n"]}