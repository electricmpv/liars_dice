{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/prefabs/chat-item.ts"],"names":["_decorator","Component","Node","Label","Sprite","RichText","Color","UITransform","tween","Vec3","Widget","UIOpacity","ccclass","property","MessageType","ChatItem","_messageData","id","type","OTHER","senderId","senderName","content","timestamp","isRead","_originalScale","SELF_MSG_COLOR","OTHER_MSG_COLOR","SYSTEM_MSG_COLOR","GAME_MSG_COLOR","NOTICE_MSG_COLOR","onLoad","node","scale","clone","start","on","EventType","TOUCH_END","onChatItemClicked","onDestroy","off","setMessageData","data","undefined","updateMessageDisplay","getMessageId","getSenderId","setMessageType","updateMessageNodeVisibility","updateMessageColor","setMessageContent","messageText","string","formatMessageContent","updateMessageSize","setSenderName","name","senderNameLabel","setMessageTime","timeLabel","formatTime","setIsRead","setAvatar","spriteFrame","avatarSprite","selfMessageNode","active","SELF","otherMessageNode","systemMessageNode","SYSTEM","GAME","NOTICE","messageContainer","sprite","getComponent","color","textSize","contentSize","padding","minWidth","maxWidth","newWidth","Math","max","width","min","containerTransform","widget","updateAlignment","replace","match","p1","url","date","Date","now","toDateString","padZero","getHours","getMinutes","yesterday","setDate","getDate","getFullYear","getMonth","num","toString","playClickFeedback","emit","messageId","to","x","y","playNewMessageAnimation","originalPos","position","uiOpacity","addComponent","z","opacity","playHighlightAnimation","originalColor","highlightColor","union","repeat","playRemoveAnimation","callback","call"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, Sprite, RichText, Color, UITransform, tween, Vec3, Widget, UIOpacity } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * 聊天消息预制体\n * 功能：\n * 1. 支持不同类型消息（玩家消息、系统消息、公告等）\n * 2. 显示发送者头像、名称、消息内容和时间\n * 3. 支持消息动画效果\n * 4. 适配不同长度的消息内容\n */\n\n// 消息类型枚举\nenum MessageType {\n    SELF,       // 自己发送的消息\n    OTHER,      // 其他玩家发送的消息\n    SYSTEM,     // 系统消息\n    GAME,       // 游戏消息\n    NOTICE      // 公告信息\n}\n\n@ccclass('ChatItem')\nexport class ChatItem extends Component {\n    @property(Node)\n    private selfMessageNode: Node = null!;\n\n    @property(Node)\n    private otherMessageNode: Node = null!;\n\n    @property(Node)\n    private systemMessageNode: Node = null!;\n\n    @property(Sprite)\n    private avatarSprite: Sprite = null!;\n\n    @property(Label)\n    private senderNameLabel: Label = null!;\n\n    @property(RichText)\n    private messageText: RichText = null!;\n\n    @property(Label)\n    private timeLabel: Label = null!;\n\n    @property(Node)\n    private messageContainer: Node = null!;\n\n    // 消息数据\n    private _messageData = {\n        id: '',\n        type: MessageType.OTHER,\n        senderId: '',\n        senderName: '',\n        content: '',\n        timestamp: 0,\n        isRead: false\n    };\n\n    private _originalScale: Vec3 = new Vec3(1, 1, 1);\n\n    // 颜色常量\n    private readonly SELF_MSG_COLOR = new Color(220, 248, 198, 255);  // 浅绿色\n    private readonly OTHER_MSG_COLOR = new Color(255, 255, 255, 255); // 白色\n    private readonly SYSTEM_MSG_COLOR = new Color(200, 200, 200, 255); // 浅灰色\n    private readonly GAME_MSG_COLOR = new Color(255, 236, 217, 255);  // 浅黄色\n    private readonly NOTICE_MSG_COLOR = new Color(217, 237, 255, 255); // 浅蓝色\n\n    onLoad() {\n        this._originalScale = this.node.scale.clone();\n    }\n\n    start() {\n        this.node.on(Node.EventType.TOUCH_END, this.onChatItemClicked, this);\n    }\n\n    onDestroy() {\n        this.node.off(Node.EventType.TOUCH_END, this.onChatItemClicked, this);\n    }\n\n    /**\n     * 设置消息数据\n     */\n    public setMessageData(data: {\n        id: string,\n        type: MessageType,\n        senderId: string,\n        senderName: string,\n        content: string,\n        timestamp: number,\n        isRead?: boolean\n    }): void {\n        this._messageData = {\n            ...data,\n            isRead: data.isRead !== undefined ? data.isRead : false\n        };\n        \n        this.updateMessageDisplay();\n    }\n\n    /**\n     * 获取消息ID\n     */\n    public getMessageId(): string {\n        return this._messageData.id;\n    }\n\n    /**\n     * 获取发送者ID\n     */\n    public getSenderId(): string {\n        return this._messageData.senderId;\n    }\n\n    /**\n     * 设置消息类型\n     */\n    public setMessageType(type: MessageType): void {\n        this._messageData.type = type;\n        this.updateMessageNodeVisibility();\n        this.updateMessageColor();\n    }\n\n    /**\n     * 设置消息内容\n     */\n    public setMessageContent(content: string): void {\n        this._messageData.content = content;\n        if (this.messageText) {\n            this.messageText.string = this.formatMessageContent(content);\n        }\n        this.updateMessageSize();\n    }\n\n    /**\n     * 设置发送者名称\n     */\n    public setSenderName(name: string): void {\n        this._messageData.senderName = name;\n        if (this.senderNameLabel) {\n            this.senderNameLabel.string = name;\n        }\n    }\n\n    /**\n     * 设置消息时间\n     * @param timestamp 时间戳\n     */\n    public setMessageTime(timestamp: number): void {\n        this._messageData.timestamp = timestamp;\n        if (this.timeLabel) {\n            this.timeLabel.string = this.formatTime(timestamp);\n        }\n    }\n\n    /**\n     * 设置消息已读状态\n     */\n    public setIsRead(isRead: boolean): void {\n        this._messageData.isRead = isRead;\n    }\n\n    /**\n     * 设置发送者头像\n     */\n    public setAvatar(spriteFrame: any): void {\n        if (this.avatarSprite && spriteFrame) {\n            this.avatarSprite.spriteFrame = spriteFrame;\n        }\n    }\n\n    /**\n     * 更新消息显示\n     */\n    private updateMessageDisplay(): void {\n        this.updateMessageNodeVisibility();\n        \n        if (this.senderNameLabel) {\n            this.senderNameLabel.string = this._messageData.senderName;\n        }\n        \n        if (this.messageText) {\n            this.messageText.string = this.formatMessageContent(this._messageData.content);\n        }\n        \n        if (this.timeLabel) {\n            this.timeLabel.string = this.formatTime(this._messageData.timestamp);\n        }\n        \n        this.updateMessageColor();\n        this.updateMessageSize();\n    }\n\n    /**\n     * 更新消息节点可见性\n     */\n    private updateMessageNodeVisibility(): void {\n        if (this.selfMessageNode) {\n            this.selfMessageNode.active = this._messageData.type === MessageType.SELF;\n        }\n        \n        if (this.otherMessageNode) {\n            this.otherMessageNode.active = this._messageData.type === MessageType.OTHER;\n        }\n        \n        if (this.systemMessageNode) {\n            this.systemMessageNode.active = this._messageData.type === MessageType.SYSTEM \n                                         || this._messageData.type === MessageType.GAME\n                                         || this._messageData.type === MessageType.NOTICE;\n        }\n    }\n\n    /**\n     * 更新消息颜色\n     */\n    private updateMessageColor(): void {\n        if (!this.messageContainer) return;\n        \n        const sprite = this.messageContainer.getComponent(Sprite);\n        if (!sprite) return;\n        \n        // 根据消息类型设置不同颜色\n        switch (this._messageData.type) {\n            case MessageType.SELF:\n                sprite.color = this.SELF_MSG_COLOR;\n                break;\n                \n            case MessageType.OTHER:\n                sprite.color = this.OTHER_MSG_COLOR;\n                break;\n                \n            case MessageType.SYSTEM:\n                sprite.color = this.SYSTEM_MSG_COLOR;\n                break;\n                \n            case MessageType.GAME:\n                sprite.color = this.GAME_MSG_COLOR;\n                break;\n                \n            case MessageType.NOTICE:\n                sprite.color = this.NOTICE_MSG_COLOR;\n                break;\n        }\n    }\n\n    /**\n     * 根据内容更新消息大小\n     */\n    private updateMessageSize(): void {\n        if (!this.messageText || !this.messageContainer) return;\n        \n        // 获取富文本内容大小\n        const textSize = this.messageText.node.getComponent(UITransform)?.contentSize;\n        if (!textSize) return;\n        \n        // 设置消息容器的最小宽度和高度（考虑内边距）\n        const padding = 20; // 左右内边距\n        const minWidth = 60; // 最小宽度\n        const maxWidth = 240; // 最大宽度（避免消息过宽）\n        \n        // 根据文本大小调整容器宽度，并确保在最小和最大宽度之间\n        let newWidth = Math.max(minWidth, textSize.width + padding * 2);\n        newWidth = Math.min(newWidth, maxWidth);\n        \n        // 更新容器大小\n        const containerTransform = this.messageContainer.getComponent(UITransform);\n        if (containerTransform) {\n            containerTransform.width = newWidth;\n            \n            // 强制重新布局\n            const widget = this.messageContainer.getComponent(Widget);\n            if (widget) {\n                widget.updateAlignment();\n            }\n        }\n    }\n\n    /**\n     * 格式化消息内容\n     * @param content 原始消息内容\n     * @returns 格式化后的富文本内容\n     */\n    private formatMessageContent(content: string): string {\n        // 处理表情符号\n        content = content.replace(/:([\\w]+):/g, (match, p1) => {\n            return `<img src=\"emoji_${p1}\" width=24 height=24 />`;\n        });\n        \n        // 处理URL链接\n        content = content.replace(/(https?:\\/\\/[^\\s]+)/g, (url) => {\n            return `<color=#0000ff><u>${url}</u></color>`;\n        });\n        \n        return content;\n    }\n\n    /**\n     * 格式化时间\n     * @param timestamp 时间戳（毫秒）\n     * @returns 格式化的时间字符串\n     */\n    private formatTime(timestamp: number): string {\n        if (!timestamp) return '';\n        \n        const date = new Date(timestamp);\n        const now = new Date();\n        \n        // 如果是今天的消息，只显示时间\n        if (date.toDateString() === now.toDateString()) {\n            return this.padZero(date.getHours()) + ':' + this.padZero(date.getMinutes());\n        }\n        \n        // 如果是昨天的消息\n        const yesterday = new Date(now);\n        yesterday.setDate(now.getDate() - 1);\n        if (date.toDateString() === yesterday.toDateString()) {\n            return '昨天 ' + this.padZero(date.getHours()) + ':' + this.padZero(date.getMinutes());\n        }\n        \n        // 如果是今年的消息\n        if (date.getFullYear() === now.getFullYear()) {\n            return (date.getMonth() + 1) + '月' + date.getDate() + '日 ' \n                 + this.padZero(date.getHours()) + ':' + this.padZero(date.getMinutes());\n        }\n        \n        // 其他情况显示完整日期\n        return date.getFullYear() + '/' + (date.getMonth() + 1) + '/' + date.getDate() + ' ' \n             + this.padZero(date.getHours()) + ':' + this.padZero(date.getMinutes());\n    }\n\n    /**\n     * 数字补零\n     */\n    private padZero(num: number): string {\n        return num < 10 ? '0' + num : num.toString();\n    }\n\n    /**\n     * 消息项被点击的事件处理\n     */\n    private onChatItemClicked(): void {\n        // 播放点击反馈动画\n        this.playClickFeedback();\n        \n        // 发出消息被点击的事件\n        this.node.emit('chat-item-clicked', {\n            messageId: this._messageData.id,\n            senderId: this._messageData.senderId,\n            senderName: this._messageData.senderName,\n            content: this._messageData.content\n        });\n    }\n\n    /**\n     * 播放点击反馈动画\n     */\n    private playClickFeedback(): void {\n        tween(this.node)\n            .to(0.1, { scale: new Vec3(this._originalScale.x * 0.95, this._originalScale.y * 0.95, 1) })\n            .to(0.1, { scale: this._originalScale })\n            .start();\n    }\n\n    /**\n     * 播放新消息动画（从下方滑入）\n     */\n    public playNewMessageAnimation(): void {\n        const originalPos = this.node.position.clone();\n        const uiOpacity = this.node.getComponent(UIOpacity) || this.node.addComponent(UIOpacity);\n        \n        // 设置初始位置在下方\n        this.node.position = new Vec3(originalPos.x, originalPos.y - 50, originalPos.z);\n        uiOpacity.opacity = 0;\n        \n        // 播放动画\n        tween(this.node)\n            .to(0.3, { position: originalPos })\n            .start();\n            \n        tween(uiOpacity)\n            .to(0.3, { opacity: 255 })\n            .start();\n    }\n\n    /**\n     * 播放消息高亮动画（用于提醒用户查看）\n     */\n    public playHighlightAnimation(): void {\n        const originalColor = this.messageContainer?.getComponent(Sprite)?.color.clone();\n        if (!originalColor || !this.messageContainer) return;\n        \n        // 高亮色\n        const highlightColor = new Color(255, 242, 204, 255);\n        \n        const sprite = this.messageContainer.getComponent(Sprite);\n        if (!sprite) return;\n        \n        // 播放颜色变换动画\n        tween(sprite)\n            .to(0.3, { color: highlightColor })\n            .to(0.3, { color: originalColor })\n            .union()\n            .repeat(2)\n            .start();\n    }\n\n    /**\n     * 播放删除动画（消息被撤回）\n     * @param callback 动画完成后回调\n     */\n    public playRemoveAnimation(callback?: Function): void {\n        const uiOpacity = this.node.getComponent(UIOpacity) || this.node.addComponent(UIOpacity);\n        \n        tween(this.node)\n            .to(0.3, { scale: new Vec3(0.5, 0.5, 1) })\n            .start();\n            \n        tween(uiOpacity)\n            .to(0.3, { opacity: 0 })\n            .call(() => {\n                if (callback) callback();\n            })\n            .start();\n    }\n}\n"]}