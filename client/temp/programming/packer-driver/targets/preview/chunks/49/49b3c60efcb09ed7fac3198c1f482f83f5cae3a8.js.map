{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/shared/protocols/game-protocol.ts"],"names":["z","FaceSchema","number","int","min","max","BidSchema","tuple","RollDiceRequestSchema","object","gameId","string","uuid","count","optional","BidRequestSchema","playerId","bid","ChallengeRequestSchema","SpotOnRequestSchema","GetInitialGameStateRequestSchema","GameErrorSchema","type","message","PlayerDataSchema","id","name","diceCount","isAI","boolean","GameStateUpdateSchema","players","array","activePlayers","currentPlayerIndex","currentBid","or","literal","roundNumber","moveNumber","status","enum","DiceRollResultSchema","dices","BidUpdateSchema","ChallengeResultSchema","challengerId","challengedId","valid","totalCount","loserId","SpotOnResultSchema","winner","GameEndSchema"],"mappings":"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","sourcesContent":["import { z } from \"zod\";\r\nimport type { Face, Bid } from \"./game-types\"; // 假设 game-types.d.ts 定义了 Face 和 Bid\r\n\r\n// Zod Schema for Face (1 to 6)\r\nconst FaceSchema = z.number().int().min(1).max(6) as z.ZodSchema<Face>;\r\n\r\n// Zod Schema for Bid [Face, count]\r\nconst BidSchema = z.tuple([\r\n  FaceSchema, // Dice value (1-6)\r\n  z.number().int().min(1) // Count (at least 1)\r\n]) as z.ZodSchema<Bid>;\r\n\r\n// 获取房间信息请求验证 (虽然在 room-protocol.ts 中，但与游戏场景相关，放这里也合理)\r\n// 如果 room-protocol.ts 已有，则不需要重复定义\r\n// export const GetRoomInfoRequestSchema = z.object({\r\n//   roomId: z.string(),\r\n// });\r\n\r\n// 开始游戏请求验证 - 注意：服务器端实现不接收参数，所以不需要 Schema\r\n// export const StartGameRequestSchema = z.object({});\r\n\r\n// 摇骰子请求验证\r\nexport const RollDiceRequestSchema = z.object({\r\n  gameId: z.string().uuid(), // 假设 gameId 是 UUID\r\n  count: z.number().int().min(1).optional(), // 骰子数量，可选\r\n});\r\n\r\n// 叫价请求验证\r\nexport const BidRequestSchema = z.object({\r\n  gameId: z.string().uuid(),\r\n  playerId: z.string().uuid(), // 假设 playerId 是 UUID\r\n  bid: BidSchema,\r\n});\r\n\r\n// 质疑请求验证\r\nexport const ChallengeRequestSchema = z.object({\r\n  gameId: z.string().uuid(),\r\n  playerId: z.string().uuid(),\r\n});\r\n\r\n// 即时喊 (Spot On) 请求验证\r\nexport const SpotOnRequestSchema = z.object({\r\n  gameId: z.string().uuid(),\r\n  playerId: z.string().uuid(),\r\n});\r\n\r\n// 获取初始游戏状态请求 Schema (客户端发送)\r\nexport const GetInitialGameStateRequestSchema = z.object({\r\n  gameId: z.string().uuid(),\r\n});\r\n\r\n// 游戏错误信息 Schema (用于服务器向客户端发送错误)\r\nexport const GameErrorSchema = z.object({\r\n  type: z.string(), // e.g., \"bid_error\", \"challenge_error\"\r\n  message: z.string(),\r\n});\r\n\r\n// 玩家数据 Schema (用于游戏状态更新)\r\nexport const PlayerDataSchema = z.object({\r\n  id: z.string().uuid(),\r\n  name: z.string(),\r\n  diceCount: z.number().int().min(0), // 骰子数可以为 0\r\n  isAI: z.boolean(), // Added for AI player identification\r\n  // socketId: z.string().optional(), // 通常不在广播中发送 socketId\r\n});\r\n\r\n// 游戏状态更新 Schema (部分，根据需要补充)\r\n// 注意：这个 Schema 用于服务器广播，不是客户端输入验证\r\nexport const GameStateUpdateSchema = z.object({\r\n  gameId: z.string().uuid(),\r\n  players: z.array(PlayerDataSchema), // 添加玩家数据数组\r\n  activePlayers: z.array(z.string().uuid()),\r\n  currentPlayerIndex: z.number().int(),\r\n  currentBid: BidSchema.or(z.tuple([z.literal(0), z.literal(0)])), // 允许空叫价 [0, 0]\r\n  roundNumber: z.number().int(),\r\n  moveNumber: z.number().int(),\r\n  status: z.enum([\"waiting\", \"playing\", \"finished\"]),\r\n});\r\n\r\n// 骰子结果 Schema (服务器发送给单个玩家)\r\nexport const DiceRollResultSchema = z.object({\r\n    gameId: z.string().uuid(),\r\n    playerId: z.string().uuid(),\r\n    dices: z.array(FaceSchema)\r\n});\r\n\r\n// 叫价更新 Schema (服务器广播)\r\nexport const BidUpdateSchema = z.object({\r\n    gameId: z.string().uuid(),\r\n    playerId: z.string().uuid(),\r\n    bid: BidSchema\r\n});\r\n\r\n// 质疑结果 Schema (服务器广播)\r\nexport const ChallengeResultSchema = z.object({\r\n    gameId: z.string().uuid(),\r\n    challengerId: z.string().uuid(),\r\n    challengedId: z.string().uuid(), // 添加被质疑者ID\r\n    valid: z.boolean(),\r\n    totalCount: z.number().int(),\r\n    loserId: z.string().uuid() // 添加失败者ID\r\n    // winner: z.string().uuid().optional() // GameManager 内部广播的是 loserId\r\n});\r\n\r\n// 即时喊结果 Schema (服务器广播)\r\nexport const SpotOnResultSchema = z.object({\r\n    gameId: z.string().uuid(),\r\n    playerId: z.string().uuid(),\r\n    valid: z.boolean(),\r\n    totalCount: z.number().int(),\r\n    winner: z.string().uuid().optional() // SpotOn 成功时没有赢家，失败时有\r\n});\r\n\r\n// 游戏结束 Schema (服务器广播)\r\nexport const GameEndSchema = z.object({\r\n    gameId: z.string().uuid(),\r\n    winner: z.string().uuid().optional(), // 可能没有赢家（平局？）\r\n    status: z.enum([\"finished\", \"completed\"]) // 包含服务器和客户端的状态\r\n});\r\n"]}