{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/libs/colyseus-browser.ts"],"names":["Client","Room","castRoomState","state","console","warn","log","e","error","ColyseusImport","ColyseusLib","default","Schema","schema","type","undefined","MapSchema","ArraySchema","constructor","endpoint","originalClient","Error","joinOrCreate","roomName","options","colyseusRoom","enhancedError","message","stack","joinById","roomId","create","getAvailableRooms","rooms","length","originalRoom","id","name","sessionId","hasState","stateInfo","hasPlayers","players","playerCount","hostId","status","size","Object","keys","Array","isArray","forEach","tempPlayers","value","key","entries","onStateChange","callback","safeCallback","onMessage","onError","onLeave","code","send","leave","consented"],"mappings":"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","sourcesContent":["/**\n * colyseus-browser.ts\n * Cocos Creator客户端使用的Colyseus适配器和类型声明\n * 使用官方推荐的导入方式\n */\n\n// @ts-ignore - 忽略类型检查，因为这是一个 JavaScript 文件\nimport * as ColyseusImport from \"../colyseus-cocos-creator.js\";\n\n// 使用导入的 Colyseus\nconst ColyseusLib = ColyseusImport.default || ColyseusImport;\n\n// 检查必要的 API 是否存在\nif (!ColyseusLib.Client) {\n  console.error('[Colyseus] ColyseusLib.Client 不存在');\n}\n\nif (!ColyseusLib.Schema) {\n  console.error('[Colyseus] ColyseusLib.Schema 不存在');\n}\n\nif (!ColyseusLib.schema || !ColyseusLib.schema.type) {\n  console.error('[Colyseus] ColyseusLib.schema.type 不存在');\n}\n\n// 导出 Schema 相关类和装饰器\nexport const Schema = ColyseusLib.Schema;\nexport const type = ColyseusLib.schema ? ColyseusLib.schema.type : undefined;\nexport const MapSchema = ColyseusLib.MapSchema;\nexport const ArraySchema = ColyseusLib.ArraySchema;\n\n// 导出其他必要的类型\nexport type RoomAvailable<T = any> = {\n  roomId: string;\n  name: string;\n  clients: number;\n  maxClients: number;\n  metadata?: T;\n};\n\n// 客户端类 - 使用导入的 Colyseus 模块\nexport class Client {\n  private originalClient: any;\n\n  constructor(endpoint: string) {\n    try {\n      if (!ColyseusLib || !ColyseusLib.Client) {\n        console.error('[网络][错误] Colyseus模块不存在或无效，请确保 colyseus-cocos-creator.js 已正确加载');\n        throw new Error('Colyseus模块不存在或无效');\n      }\n      \n      this.originalClient = new ColyseusLib.Client(endpoint);\n      console.log(`[网络][信息] Colyseus客户端初始化成功: ${endpoint}`);\n    } catch (error) {\n      console.error('[网络][错误] Colyseus客户端初始化失败:', error);\n      throw error;\n    }\n  }\n\n  // 加入或创建房间\n  async joinOrCreate<T>(roomName: string, options?: any): Promise<Room<T>> {\n    try {\n      console.log(`[网络][信息] 加入或创建房间: ${roomName}`, options);\n      const colyseusRoom = await this.originalClient.joinOrCreate(roomName, options);\n      return new Room<T>(colyseusRoom);\n    } catch (error) {\n      console.error(`[网络][错误] 加入或创建房间失败: ${roomName}`, error);\n      // 增强错误信息\n      if (error instanceof Error) {\n        const enhancedError = new Error(`加入或创建房间失败: ${error.message}`);\n        enhancedError.stack = error.stack;\n        throw enhancedError;\n      }\n      throw error;\n    }\n  }\n\n  // 通过ID加入房间\n  async joinById<T>(roomId: string, options?: any): Promise<Room<T>> {\n    try {\n      console.log(`[网络][信息] 加入指定房间ID: ${roomId}`, options);\n      const colyseusRoom = await this.originalClient.joinById(roomId, options);\n      return new Room<T>(colyseusRoom);\n    } catch (error) {\n      console.error(`[网络][错误] 加入指定房间失败: ${roomId}`, error);\n      // 增强错误信息\n      if (error instanceof Error) {\n        const enhancedError = new Error(`加入指定房间失败: ${error.message}`);\n        enhancedError.stack = error.stack;\n        throw enhancedError;\n      }\n      throw error;\n    }\n  }\n\n  // 创建房间\n  async create<T>(roomName: string, options?: any): Promise<Room<T>> {\n    try {\n      console.log(`[网络][信息] 创建新房间: ${roomName}`, options);\n      const colyseusRoom = await this.originalClient.create(roomName, options);\n      return new Room<T>(colyseusRoom);\n    } catch (error) {\n      console.error(`[网络][错误] 创建新房间失败: ${roomName}`, error);\n      // 增强错误信息\n      if (error instanceof Error) {\n        const enhancedError = new Error(`创建新房间失败: ${error.message}`);\n        enhancedError.stack = error.stack;\n        throw enhancedError;\n      }\n      throw error;\n    }\n  }\n\n  // 获取可用房间列表\n  async getAvailableRooms<T = any>(roomName: string): Promise<RoomAvailable<T>[]> {\n    try {\n      console.log(`[网络][信息] 获取可用房间列表: ${roomName}`);\n      const rooms = await this.originalClient.getAvailableRooms(roomName);\n      console.log(`[网络][信息] 获取到 ${rooms.length} 个可用房间`);\n      return rooms;\n    } catch (error) {\n      console.error(`[网络][错误] 获取可用房间列表失败: ${roomName}`, error);\n      // 出错时返回空数组\n      return [];\n    }\n  }\n}\n\n// 房间类 - 包装Colyseus.Room\nexport class Room<T = any> {\n  private originalRoom: any;\n\n  constructor(originalRoom: any) {\n    this.originalRoom = originalRoom;\n    console.log(`[网络][调试] 创建房间包装器，原始房间:`, {\n      id: originalRoom?.id,\n      roomId: originalRoom?.roomId,\n      name: originalRoom?.name,\n      sessionId: originalRoom?.sessionId,\n      hasState: !!originalRoom?.state\n    });\n\n    // 添加额外的错误处理\n    if (!originalRoom) {\n      console.error('[网络][错误] 创建房间包装器失败: 原始房间对象为空');\n    }\n  }\n\n  // 获取房间ID\n  get id(): string {\n    return this.originalRoom?.id || '';\n  }\n\n  // 获取房间ID\n  get roomId(): string {\n    return this.originalRoom?.roomId || '';\n  }\n\n  // 获取房间名称\n  get name(): string {\n    return this.originalRoom?.name || '';\n  }\n\n  // 获取会话 ID\n  get sessionId(): string {\n    return this.originalRoom?.sessionId || '';\n  }\n\n  // 获取房间状态\n  get state(): T {\n    // 添加调试日志\n    if (!this.originalRoom) {\n      console.warn('[网络][警告] 原始房间对象为空');\n      return {} as T;\n    }\n\n    if (!this.originalRoom.state) {\n      console.warn('[网络][警告] 房间状态为空或未定义');\n      return {} as T;\n    }\n\n    try {\n      // 安全地获取状态信息\n      const stateInfo = {\n        hasPlayers: !!this.originalRoom.state.players,\n        playerCount: 0,\n        hostId: this.originalRoom.state.hostId || '未设置',\n        status: this.originalRoom.state.status || '未知'\n      };\n\n      // 安全地获取玩家数量\n      if (this.originalRoom.state.players) {\n        // 检查 players 对象类型\n        if (typeof this.originalRoom.state.players === 'object') {\n          // 处理 MapSchema 类型\n          if (typeof this.originalRoom.state.players.size === 'number') {\n            stateInfo.playerCount = this.originalRoom.state.players.size;\n          } \n          // 处理普通对象类型\n          else if (this.originalRoom.state.players.constructor === Object) {\n            stateInfo.playerCount = Object.keys(this.originalRoom.state.players).length;\n          }\n          // 处理数组类型\n          else if (Array.isArray(this.originalRoom.state.players)) {\n            stateInfo.playerCount = this.originalRoom.state.players.length;\n          }\n        }\n      }\n\n      console.log(`[网络][调试] 获取房间状态:`, stateInfo);\n\n      // 检查并修复 players 对象，确保它可以被正确处理\n      if (this.originalRoom.state.players) {\n        // 记录 players 对象的类型信息，用于调试\n        console.log(`[网络][调试] players 类型: ${typeof this.originalRoom.state.players}, 构造函数: ${this.originalRoom.state.players.constructor?.name || '未知'}`);\n        \n        // 如果 players 是 MapSchema 但缺少必要的方法，尝试转换为普通对象\n        if (typeof this.originalRoom.state.players === 'object' && \n            this.originalRoom.state.players.constructor.name !== 'Object' && \n            typeof this.originalRoom.state.players.forEach === 'function') {\n          \n          // 添加调试日志，记录转换前的状态\n          console.log('[网络][调试] 尝试将 MapSchema 转换为普通对象以兼容处理');\n          \n          try {\n            // 创建一个临时对象来存储转换后的 players\n            const tempPlayers: Record<string, any> = {};\n            \n            // 使用 forEach 方法遍历 MapSchema\n            this.originalRoom.state.players.forEach((value: any, key: string) => {\n              tempPlayers[key] = value;\n            });\n            \n            // 为原始 players 对象添加一些辅助方法，以便客户端代码能正确处理\n            if (typeof this.originalRoom.state.players.entries !== 'function') {\n              this.originalRoom.state.players.entries = function() {\n                return Object.entries(tempPlayers);\n              };\n            }\n            \n            if (typeof this.originalRoom.state.players.keys !== 'function') {\n              this.originalRoom.state.players.keys = function() {\n                return Object.keys(tempPlayers);\n              };\n            }\n            \n            console.log('[网络][调试] MapSchema 转换成功');\n          } catch (e) {\n            console.error('[网络][错误] 转换 MapSchema 时出错:', e);\n          }\n        }\n      }\n\n      // 安全返回状态\n      return this.originalRoom.state as T;\n    } catch (e) {\n      console.error('[网络][错误] 处理房间状态时出错:', e);\n      return {} as T;\n    }\n  }\n\n  // 监听状态变化\n  onStateChange(callback: (state: T) => void): void {\n    if (!this.originalRoom) {\n      console.error('[网络][错误] 无法监听状态变化: 原始房间对象为空');\n      return;\n    }\n\n    try {\n      // 包装回调以添加错误处理\n      const safeCallback = (state: any) => {\n        try {\n          callback(state as T);\n        } catch (e) {\n          console.error('[网络][错误] 状态变化回调执行出错:', e);\n        }\n      };\n\n      this.originalRoom.onStateChange(safeCallback);\n      console.log('[网络][信息] 已注册状态变化监听器');\n    } catch (e) {\n      console.error('[网络][错误] 注册状态变化监听器失败:', e);\n    }\n  }\n\n  // 监听消息\n  onMessage(type: string, callback: (message: any) => void): void {\n    if (!this.originalRoom) {\n      console.error(`[网络][错误] 无法监听消息 ${type}: 原始房间对象为空`);\n      return;\n    }\n\n    try {\n      // 包装回调以添加错误处理\n      const safeCallback = (message: any) => {\n        try {\n          callback(message);\n        } catch (e) {\n          console.error(`[网络][错误] 消息 ${type} 回调执行出错:`, e);\n        }\n      };\n\n      this.originalRoom.onMessage(type, safeCallback);\n      console.log(`[网络][信息] 已注册消息 ${type} 监听器`);\n    } catch (e) {\n      console.error(`[网络][错误] 注册消息 ${type} 监听器失败:`, e);\n    }\n  }\n\n  // 监听错误\n  onError(callback: (error: any) => void): void {\n    if (!this.originalRoom) {\n      console.error('[网络][错误] 无法监听错误: 原始房间对象为空');\n      return;\n    }\n\n    try {\n      // 包装回调以添加错误处理\n      const safeCallback = (error: any) => {\n        try {\n          console.error('[网络][错误] 房间发生错误:', error);\n          callback(error);\n        } catch (e) {\n          console.error('[网络][错误] 错误回调执行出错:', e);\n        }\n      };\n\n      this.originalRoom.onError(safeCallback);\n      console.log('[网络][信息] 已注册错误监听器');\n    } catch (e) {\n      console.error('[网络][错误] 注册错误监听器失败:', e);\n    }\n  }\n\n  // 监听离开房间\n  onLeave(callback: (code: number) => void): void {\n    if (!this.originalRoom) {\n      console.error('[网络][错误] 无法监听离开房间: 原始房间对象为空');\n      return;\n    }\n\n    try {\n      // 包装回调以添加错误处理\n      const safeCallback = (code: number) => {\n        try {\n          console.log(`[网络][信息] 离开房间，代码: ${code}`);\n          callback(code);\n        } catch (e) {\n          console.error('[网络][错误] 离开房间回调执行出错:', e);\n        }\n      };\n\n      this.originalRoom.onLeave(safeCallback);\n      console.log('[网络][信息] 已注册离开房间监听器');\n    } catch (e) {\n      console.error('[网络][错误] 注册离开房间监听器失败:', e);\n    }\n  }\n\n  // 发送消息\n  send(type: string, message?: any): void {\n    if (!this.originalRoom) {\n      console.error(`[网络][错误] 无法发送消息 ${type}: 原始房间对象为空`);\n      return;\n    }\n\n    try {\n      this.originalRoom.send(type, message);\n      console.log(`[网络][信息] 发送消息: ${type}`, message);\n    } catch (e) {\n      console.error(`[网络][错误] 发送消息 ${type} 失败:`, e);\n    }\n  }\n\n  // 离开房间\n  leave(consented: boolean = true): void {\n    if (!this.originalRoom) {\n      console.error('[网络][错误] 无法离开房间: 原始房间对象为空');\n      return;\n    }\n\n    try {\n      this.originalRoom.leave(consented);\n      console.log('[网络][信息] 离开房间请求已发送');\n    } catch (e) {\n      console.error('[网络][错误] 离开房间失败:', e);\n    }\n  }\n}\n\n// 辅助函数：将Room状态转换为强类型对象\nexport function castRoomState<T>(state: any): T {\n  if (!state) {\n    console.warn('[网络][警告] 尝试转换空状态');\n    return {} as T;\n  }\n\n  try {\n    // 添加类型转换的调试信息\n    console.log('[网络][调试] 转换房间状态类型');\n    return state as T;\n  } catch (e) {\n    console.error('[网络][错误] 转换房间状态类型失败:', e);\n    return {} as T;\n  }\n}\n"]}