{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/player-display-controller.ts"],"names":["_decorator","Component","Node","Label","Prefab","instantiate","Color","ccclass","property","PlayerDisplayController","_playerInfoNodes","Map","_myPlayerId","initialize","myPlayerId","playerInfoContainer","removeAllChildren","clear","console","error","updatePlayerDisplays","players","currentPlayerId","playerInfoPrefab","oldNodes","forEach","player","playerNode","get","id","isValid","addChild","delete","set","updateSinglePlayerDisplay","node","destroy","playerData","nameLabel","getChildByName","getComponent","diceInfoNode","diceCountLabel","string","name","color","WHITE","diceCount","aiIconNode","active","isAI","currentPlayerIndicatorNode","getPlayerNameWithAlias","playerId"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, Prefab, instantiate, Color } from 'cc';\r\n// 移除不再需要的 PlayerItem 导入，除非 PlayerData 仍然依赖它（但看起来不依赖）\r\n// import { PlayerItem } from '../prefabs/player-item';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n// Import the shared Player type which includes isAI\r\nimport type { Player as SharedPlayer } from '../../shared/protocols/room-protocol';\r\n// Use the shared Player type or define a local one that includes isAI\r\n// Export the interface so it can be imported by other modules\r\nexport interface PlayerData extends SharedPlayer { // Extend or redefine to include isAI\r\n    // id, name, isReady, isAI, aiType? are inherited or defined in SharedPlayer\r\n    diceCount: number; // Add game-specific fields if needed\r\n    // Add other potential fields needed for display, like isOnline, isActive?\r\n    // isOnline?: boolean;\r\n    // isActive?: boolean;\r\n}\r\n\r\n@ccclass('PlayerDisplayController')\r\nexport class PlayerDisplayController extends Component {\r\n\r\n    @property(Node)\r\n    private playerInfoContainer: Node | null = null;\r\n\r\n    @property(Prefab)\r\n    private playerInfoPrefab: Prefab | null = null;\r\n\r\n    private _playerInfoNodes: Map<string, Node> = new Map();\r\n    private _myPlayerId: string = '';\r\n\r\n    /**\r\n     * 初始化玩家显示控制器\r\n     * @param myPlayerId 当前玩家的ID\r\n     */\r\n    public initialize(myPlayerId: string): void {\r\n        this._myPlayerId = myPlayerId;\r\n        if (this.playerInfoContainer) {\r\n            this.playerInfoContainer.removeAllChildren();\r\n            this._playerInfoNodes.clear();\r\n        } else {\r\n            console.error(\"[PlayerDisplayController] playerInfoContainer is not set!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新所有玩家的显示信息\r\n     * @param players 玩家数据列表\r\n     * @param currentPlayerId 当前回合玩家ID (可选，用于高亮)\r\n     */\r\n    public updatePlayerDisplays(players: PlayerData[], currentPlayerId?: string): void {\r\n        if (!this.playerInfoContainer || !this.playerInfoPrefab) {\r\n            console.error(\"[PlayerDisplayController] Container or Prefab not set!\");\r\n            return;\r\n        }\r\n\r\n        // 暂存旧节点，稍后移除未更新的\r\n        const oldNodes = new Map(this._playerInfoNodes);\r\n        this._playerInfoNodes.clear();\r\n\r\n        players.forEach(player => {\r\n            let playerNode = oldNodes.get(player.id);\r\n\r\n            // 如果节点不存在，则创建新的\r\n            if (!playerNode || !playerNode.isValid) {\r\n                playerNode = instantiate(this.playerInfoPrefab!);\r\n                if (!playerNode) {\r\n                    console.error(\"[PlayerDisplayController] Failed to instantiate player info prefab for player:\", player.id);\r\n                    return;\r\n                }\r\n                this.playerInfoContainer!.addChild(playerNode);\r\n            } else {\r\n                // 从旧节点中移除，表示此节点已更新\r\n                oldNodes.delete(player.id);\r\n            }\r\n\r\n            this._playerInfoNodes.set(player.id, playerNode);\r\n\r\n            // 更新节点内容\r\n            this.updateSinglePlayerDisplay(playerNode, player, currentPlayerId);\r\n        });\r\n\r\n        // 移除不再存在的玩家节点\r\n        oldNodes.forEach(node => {\r\n            if (node && node.isValid) {\r\n                node.destroy();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 更新单个玩家的显示信息\r\n     * @param playerNode 玩家对应的UI节点\r\n     * @param playerData 玩家数据\r\n     * @param currentPlayerId 当前回合玩家ID (可选)\r\n     */\r\n    private updateSinglePlayerDisplay(playerNode: Node, playerData: PlayerData, currentPlayerId?: string): void {\r\n        // 不再获取 PlayerItem 组件，因为 PlayerInfo prefab 没有挂载它\r\n\r\n        const nameLabel = playerNode.getChildByName('NameLabel')?.getComponent(Label);\r\n        // 修正查找路径：PlayerInfo -> DiceInfo -> DiceCountLabel\r\n        const diceInfoNode = playerNode.getChildByName('DiceInfo');\r\n        const diceCountLabel = diceInfoNode?.getChildByName('DiceCountLabel')?.getComponent(Label);\r\n        // const background = playerNode.getChildByName('Background'); // 用于高亮\r\n\r\n        // 更新名字和颜色\r\n        if (nameLabel) {\r\n            nameLabel.string = playerData.id === this._myPlayerId ? `${playerData.name} (你)` : playerData.name;\r\n            nameLabel.color = playerData.id === this._myPlayerId ? new Color(255, 215, 0, 255) : Color.WHITE; // 自己金色，他人白色\r\n        }\r\n\r\n        // 更新骰子数量\r\n        if (diceCountLabel) {\r\n            diceCountLabel.string = `骰子: ${playerData.diceCount}`;\r\n        }\r\n\r\n        // 更新高亮状态 (可选)\r\n        // const isCurrent = playerData.id === currentPlayerId;\r\n        // if (background) {\r\n        //     const sprite = background.getComponent(Sprite); // 或者其他表示高亮的组件\r\n        //     if (sprite) {\r\n        //         sprite.color = isCurrent ? new Color(100, 149, 237, 255) : new Color(50, 50, 50, 255); // 示例颜色\r\n        //     }\r\n        // }\r\n\r\n        // --- 新增：直接控制 PlayerInfo 内部的子节点 ---\r\n\r\n        // 控制 AI 图标 (假设 PlayerInfo prefab 内有一个名为 'AiIcon' 的节点)\r\n        const aiIconNode = playerNode.getChildByName('AiIcon');\r\n        if (aiIconNode) {\r\n            aiIconNode.active = playerData.isAI;\r\n        } else {\r\n            // 首次运行时可能 prefab 还没更新，打印警告\r\n            // console.warn(`[PlayerDisplayController] 'AiIcon' node not found in PlayerInfo for player ${playerData.id}`);\r\n        }\r\n\r\n        // 控制当前玩家指示器 (假设 PlayerInfo prefab 内有一个名为 'CurrentPlayerIndicator' 的节点)\r\n        const currentPlayerIndicatorNode = playerNode.getChildByName('CurrentPlayerIndicator');\r\n        if (currentPlayerIndicatorNode) {\r\n            currentPlayerIndicatorNode.active = playerData.id === currentPlayerId;\r\n        } else {\r\n            // console.warn(`[PlayerDisplayController] 'CurrentPlayerIndicator' node not found in PlayerInfo for player ${playerData.id}`);\r\n        }\r\n\r\n        // 控制活跃玩家指示器 (假设 PlayerInfo prefab 内有一个名为 'ActiveIndicator' 的节点)\r\n        // 注意：playerData 中目前没有 isActive 字段，需要从 GameState 或其他地方获取此信息\r\n        // const isActivePlayer = ...; // 需要逻辑来判断玩家是否活跃\r\n        // const activeIndicatorNode = playerNode.getChildByName('ActiveIndicator');\r\n        // if (activeIndicatorNode) {\r\n        //     activeIndicatorNode.active = isActivePlayer;\r\n        // } else {\r\n        //     // console.warn(`[PlayerDisplayController] 'ActiveIndicator' node not found in PlayerInfo for player ${playerData.id}`);\r\n        // }\r\n\r\n        // 控制离线指示器 (假设 PlayerInfo prefab 内有一个名为 'OfflineIndicator' 的节点)\r\n        // 注意：playerData 中目前没有 isOnline 字段，需要从 GameState 或其他地方获取此信息\r\n        // const isOnline = ...; // 需要逻辑来判断玩家是否在线\r\n        // const offlineIndicatorNode = playerNode.getChildByName('OfflineIndicator');\r\n        // if (offlineIndicatorNode) {\r\n        //     offlineIndicatorNode.active = !isOnline;\r\n        // } else {\r\n        //     // console.warn(`[PlayerDisplayController] 'OfflineIndicator' node not found in PlayerInfo for player ${playerData.id}`);\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * 根据玩家ID获取玩家名字（带\"(你)\"标识）\r\n     * @param playerId 玩家ID\r\n     * @returns 玩家名字字符串，如果找不到返回ID本身\r\n     */\r\n    public getPlayerNameWithAlias(playerId: string): string {\r\n        const playerNode = this._playerInfoNodes.get(playerId);\r\n        if (playerNode && playerNode.isValid) {\r\n            const nameLabel = playerNode.getChildByName('NameLabel')?.getComponent(Label);\r\n            if (nameLabel) {\r\n                return nameLabel.string; // 直接返回 Label 的内容，因为它已经包含了 \"(你)\"\r\n            }\r\n        }\r\n        // Fallback: 如果节点或 Label 找不到，返回原始 ID\r\n        return playerId;\r\n    }\r\n}\r\n"]}