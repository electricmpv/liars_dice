{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/room-ui.ts"],"names":["_decorator","Component","Node","Label","Button","director","Prefab","NetworkManager","NetworkErrorCode","NetworkErrorHandler","PlayerState","UIUpdater","EventHandler","ccclass","property","RoomUI","_roomId","_sessionId","_isReady","_isHost","_colyseusState","maxClients","uiUpdater","getInstance","eventHandler","onLoad","console","log","statusLabel","initStatusLabel","roomId","sessionId","error","showError","scheduleOnce","loadScene","roomIdLabel","string","setupEventListeners","updateReadyButtonLabel","readyButtonLabel","inviteAIButton","node","on","EventType","CLICK","onQuickInviteAI","interactable","showInfo","initialState","roomState","handleStateChange","start","onDestroy","removeEventListeners","state","getScene","name","warn","playerCount","playersList","players","constructor","forEach","player","key","push","playerId","id","playerSessionId","isReady","hostId","length","Object","values","myPlayerState","get","undefined","updateRoomIdLabel","updatePlayerList","playerListContent","playerItemPrefab","updateReadyButtonInternal","updateStartGameButtonInternal","playerCountLabel","currentCount","keys","updatePlayerCountLabel","canInviteAI","status","updateInviteAIButton","active","handlePlayerData","data","hasOwnProperty","isHost","playerList","Array","isArray","removeAllChildren","handleFullRoomState","playersMap","Map","pData","playerState","diceCount","isConnected","isAI","aiType","set","size","handleGameStarted","gameId","handleKicked","reason","handleDisconnect","code","handleNetworkError","CONNECTION_TIMEOUT","message","readyButton","isWaiting","canStart","checkIfCanStartGame","updateStartGameButton","startGameButton","onReadyClick","newState","send","ready","onStartGameClick","currentIsWaiting","onLeaveRoomClick","leaveRoomButton","leaveRoom","catch","currentSize","currentSizeAfterWait"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, Button, Color, director, Prefab, instantiate, ScrollView, Layout } from 'cc';\nimport { NetworkManager, NetworkError, NetworkErrorCode } from '../core/network'; // 导入 NetworkManager 而不是 network\nimport { NetworkErrorHandler } from '../core/error-handler'; // Use relative path without .ts\nimport { PlayerItem } from '../prefabs/player-item'; // Import from relative path without .ts\n// 修正导入路径并移除 .ts 后缀\nimport { LiarDiceRoomState } from '../../shared/schemas/liar-dice-room-state-client'; // 导入客户端专用房间状态\nimport { PlayerState } from '../../shared/schemas/player-state-client'; // 导入客户端专用玩家状态\n// 导入 MapSchema\n// 不再需要导入 MapSchema，改用原生 Map 类型\n// import { LoginManager } from '../core/login-manager'; // Likely not needed directly anymore\n\nimport { UIUpdater } from './ui-updater'; // Import from relative path without .ts\nimport { EventHandler } from './event-handler'; // Import from relative path without .ts\n// 移除 networkManager 导入，直接使用 NetworkManager\n\nconst { ccclass, property } = _decorator;\n\n/**image.png\n * 房间内等待场景 UI 组件 (适配 Colyseus)\n */\n@ccclass('RoomUI')\nexport class RoomUI extends Component {\n\n    @property(Label)\n    private roomIdLabel: Label | null = null;\n\n    @property(Node)\n    private playerListContent: Node = null!;\n\n    @property(Prefab)\n    private playerItemPrefab: Prefab = null!;\n\n    @property(Button)\n    private readyButton: Button = null!;\n\n    @property(Label)\n    private readyButtonLabel: Label | null = null;\n\n    @property(Button)\n    private startGameButton: Button = null!;\n\n    @property(Button)\n    private leaveRoomButton: Button = null!;\n\n    @property(Label)\n    private statusLabel: Label | null = null;\n\n    @property(Label)\n    private playerCountLabel: Label | null = null;\n\n    @property(Button)\n    private inviteAIButton: Button | null = null;\n\n    // Internal state\n    private _roomId: string = '';\n    private _sessionId: string = ''; // Use Colyseus Session ID\n    private _isReady: boolean = false;\n    private _isHost: boolean = false;\n    private _colyseusState: LiarDiceRoomState | null = null; // Store full Colyseus state\n    private maxClients: number = 6; // 最大玩家数量\n\n    // Singletons - Initialize directly at declaration\n    private uiUpdater: UIUpdater = UIUpdater.getInstance();\n    private eventHandler: EventHandler = EventHandler.getInstance();\n    // networkManager is used directly via import\n\n    // Component Lifecycle Methods\n    onLoad() {\n        console.log(\"[RoomUI] onLoad method started.\");\n        // Initialization moved to declaration\n\n        console.log(\"[RoomUI] onLoad: Before setupEventListeners\");\n        if (this.statusLabel) {\n            NetworkErrorHandler.initStatusLabel(this.statusLabel);\n        }\n\n        // Get roomId and sessionId from network manager singleton\n        this._roomId = NetworkManager.getInstance().roomId;\n        this._sessionId = NetworkManager.getInstance().sessionId;\n\n        if (!this._roomId || !this._sessionId) {\n             console.error(\"[RoomUI] Missing roomId or sessionId from network module!\");\n             // Use UIUpdater for showing error, pass 'this' (Component) for scheduling\n             this.uiUpdater.showError(this.statusLabel, \"无法获取玩家或房间信息\", true, this);\n             // Consider returning to lobby after delay\n             this.scheduleOnce(() => director.loadScene('LobbyScene'), 3);\n             return;\n        }\n\n        if (this.roomIdLabel) {\n            this.roomIdLabel.string = `房间号: ${this._roomId}`;\n            this.roomIdLabel.string = `房间号: ${this._roomId}`;\n        }\n\n        // 使用事件处理单例统一注册事件，并传入 RoomUI 实例作为上下文\n        this.eventHandler.setupEventListeners(this); // Pass 'this'\n        console.log(\"[RoomUI] onLoad: After setupEventListeners\");\n        this.uiUpdater.updateReadyButtonLabel(this.readyButtonLabel, this._isReady); // Update initial button label\n        // Start game button update requires state, will be handled in handleStateChange\n        // this.updateStartGameButtonInternal(); // Remove this initial call\n\n        // Bind AI button click\n        if (this.inviteAIButton) {\n            this.inviteAIButton.node.on(Button.EventType.CLICK, this.onQuickInviteAI, this);\n            this.inviteAIButton.interactable = false; // Disable until state loaded and confirmed host\n        }\n\n        // Initial state will come via the 'stateUpdate' event listener\n        this.uiUpdater.showInfo(this.statusLabel, \"等待房间状态...\", true, this); // Show loading state\n        // Check if state is already available from NetworkManager cache\n        const initialState = NetworkManager.getInstance().roomState;\n        if (initialState) {\n            console.log(\"[RoomUI] Initial state found in network cache.\");\n            this.handleStateChange(initialState); // Process initial state if available\n        }\n    }\n\n    // 添加 start 方法用于测试\n    start() {\n        console.log(\"[RoomUI] start method called.\");\n    }\n\n    onDestroy() {\n        console.log(\"[RoomUI] onDestroy method called.\");\n        console.log(\"[RoomUI] onDestroy: Before removeEventListeners\");\n        // Use the initialized EventHandler instance to remove listeners\n        // No need for fallback as it's initialized at declaration\n        this.eventHandler.removeEventListeners();\n        console.log(\"[RoomUI] onDestroy: After removeEventListeners\");\n    }\n\n    // Removed setupEventListeners and removeEventListeners methods\n\n    // --- Event Handling Methods (called by EventHandler) ---\n    // Make them public so EventHandler can call them\n\n    public handleStateChange(state: LiarDiceRoomState): void {\n        console.log(`[RoomUI] handleStateChange ENTERED. Current Scene: ${director.getScene()?.name}`);\n        \n        // 检查状态是否为空\n        if (!state) {\n             console.warn(\"[RoomUI] handleStateChange received null state. Aborting.\");\n             return;\n        }\n        \n        // 存储最新状态\n        this._colyseusState = state;\n        console.log(\"[RoomUI] State stored locally.\");\n\n        // 确保 sessionId 设置正确（可能在加入后稍有延迟）\n        if (!this._sessionId && NetworkManager.getInstance().sessionId) {\n             this._sessionId = NetworkManager.getInstance().sessionId;\n             console.log(`[RoomUI] Session ID updated internally: ${this._sessionId}`);\n        }\n        if (!this._sessionId) {\n             console.error(\"[RoomUI] Cannot process state update without a session ID! Network Session ID:\", NetworkManager.getInstance().sessionId, \". Aborting.\");\n             return; // Cannot identify self without sessionId\n        }\n        console.log(`[RoomUI] Processing state for sessionId: ${this._sessionId}`);\n\n        // 安全处理 players 对象\n        let playerCount = 0;\n        let playersList: PlayerState[] = [];\n        \n        // 检查 players 对象是否存在\n        if (state.players) {\n            try {\n                // 记录 players 对象的类型信息，用于调试\n                console.log(`[RoomUI] players 类型: ${typeof state.players}, 构造函数: ${state.players.constructor?.name || '未知'}`);\n                \n                // 尝试不同的方法获取玩家列表\n                if (typeof state.players.forEach === 'function') {\n                    // 如果 players 是 MapSchema 或类似对象，使用 forEach 方法\n                    console.log('[RoomUI] 使用 forEach 方法处理 players');\n                    state.players.forEach((player: any, key: string) => {\n                        // 安全地处理玩家数据，同时支持 id 和 sessionId\n                        playersList.push(player);\n                        const playerId = player.id || '';\n                        const playerSessionId = player.sessionId || key;\n                        console.log(`[RoomUI] 玩家: ID=${playerId}, SessionID=${playerSessionId}, 名称: ${player.name}, 准备: ${player.isReady}, 主机: ${playerSessionId === state.hostId || key === state.hostId}`);\n                    });\n                    playerCount = playersList.length;\n                } else if (typeof state.players === 'object') {\n                    // 如果 players 是普通对象，使用 Object.values\n                    console.log('[RoomUI] 使用 Object.values 方法处理 players');\n                    playersList = Object.values(state.players);\n                    playerCount = playersList.length;\n                    \n                    playersList.forEach((player: any) => {\n                        // 安全地处理玩家数据，同时支持 id 和 sessionId\n                        const playerId = player.id || '';\n                        const playerSessionId = player.sessionId || '';\n                        console.log(`[RoomUI] 玩家: ID=${playerId}, SessionID=${playerSessionId}, 名称: ${player.name}, 准备: ${player.isReady}, 主机: ${playerSessionId === state.hostId}`);\n                    });\n                }\n                \n                console.log(`[RoomUI] 共找到 ${playerCount} 名玩家`);\n            } catch (error) {\n                console.error('[RoomUI] 处理 players 对象时出错:', error);\n            }\n        } else {\n            console.warn('[RoomUI] state.players 不存在或为空');\n        }\n\n\n        // Update internal flags\n        // console.log(\"[RoomUI] Updating internal flags (isHost, isReady)...\", state.hostId, this._sessionId);\n        this._isHost = (this._sessionId === state.hostId);\n        // 使用 MapSchema 的 get 方法访问玩家状态\n        const myPlayerState = state.players ? state.players.get(this._sessionId) : undefined;\n        this._isReady = myPlayerState?.isReady || false;\n        console.log(`[RoomUI] State processed: isHost=${this._isHost}, isReady=${this._isReady}, myPlayerState found: ${!!myPlayerState}`);\n\n        // Update UI elements using UIUpdater and internal methods\n        if (this.roomIdLabel && this._roomId !== NetworkManager.getInstance().roomId) { // 使用 NetworkManager.getInstance()\n            this._roomId = NetworkManager.getInstance().roomId;\n            this.uiUpdater.updateRoomIdLabel(this.roomIdLabel, this._roomId);\n            console.log(`[RoomUI] Room ID label updated to: ${this._roomId}`);\n        }\n\n        // Update Player List using UIUpdater (provide all required args)\n        console.log(\"[RoomUI] Calling uiUpdater.updatePlayerList...\");\n        this.uiUpdater.updatePlayerList(\n            this.playerListContent,\n            this.playerItemPrefab,\n            state.players,\n            this._sessionId,\n            state.hostId\n        );\n\n        // Update Ready Button (Label via UIUpdater, interactability handled internally)\n        // console.log(\"[RoomUI] Calling updateReadyButtonInternal...\");\n        this.updateReadyButtonInternal(); // Use internal method\n\n        // Update Start Game Button (via UIUpdater, conditions calculated internally)\n        // console.log(\"[RoomUI] Calling updateStartGameButtonInternal...\");\n        this.updateStartGameButtonInternal(); // Use internal method\n\n        // Update Player Count Label using Object.keys length\n        if (this.playerCountLabel) {\n            const currentCount = state.players ? Object.keys(state.players).length : 0;\n            this.uiUpdater.updatePlayerCountLabel(this.playerCountLabel, currentCount, this.maxClients);\n            // console.log(`[RoomUI] Player count label updated: ${currentCount}/${this.maxClients}`);\n        }\n\n        // Update AI Button interactability using Object.keys length\n        if (this.inviteAIButton) {\n            const currentCount = state.players ? Object.keys(state.players).length : 0;\n            const canInviteAI = this._isHost && currentCount < this.maxClients && state.status === 'waiting';\n            this.uiUpdater.updateInviteAIButton(this.inviteAIButton, canInviteAI);\n            // console.log(`[RoomUI] Invite AI button interactable set to: ${canInviteAI}`);\n        }\n\n        // Clear loading/status message once state is received\n        if (this.statusLabel && this.statusLabel.node.active && this.statusLabel.string === \"等待房间状态...\") {\n             this.statusLabel.node.active = false; // Directly hide it\n             console.log(\"[RoomUI] Cleared 'Waiting for state...' status label.\");\n        }\n\n        // Check game status for scene transition (alternative to 'gameStarted' message)\n        console.log(`[RoomUI] Checking game status for scene transition. Current status: ${state.status}, Current scene: ${director.getScene()?.name}`);\n        if (state.status === 'playing' && director.getScene()?.name === 'RoomScene') {\n            console.log(\"[RoomUI] Game state is 'playing', navigating to GameScene.\");\n            // 无需显式传递 gameId，GameUI 将通过 NetworkManager.getInstance().roomId 获取\n            director.loadScene('GameScene');\n        } else if (state.status === 'finished' && director.getScene()?.name === 'RoomScene') {\n             // Game finished while waiting? Show message and return to lobby?\n             console.log(\"[RoomUI] Game state is 'finished' while in RoomScene, returning to Lobby.\");\n             this.uiUpdater.showError(this.statusLabel, \"游戏已结束，即将返回大厅...\", true, this);\n             this.scheduleOnce(() => director.loadScene('LobbyScene'), 3);\n        }\n        console.log(\"[RoomUI] handleStateChange finished.\");\n    }\n\n    // Handle player data message (might be partial update)\n    public handlePlayerData(data: any): void {\n        console.log(`[RoomUI] Received player data:`, data);\n\n        // 更新当前玩家信息\n        if (data.id) {\n          this._sessionId = data.id;\n          console.log(`[RoomUI] 更新会话ID: ${this._sessionId}`);\n        }\n        \n        // Update host status if provided\n        if (data.hasOwnProperty('isHost')) {\n          this._isHost = data.isHost;\n          console.log(`[RoomUI] Updated host status: ${this._isHost}`);\n          this.updateStartGameButtonInternal(); // Update button state\n        }\n\n        // 如果包含玩家列表，更新UI\n        if (data.playerList && Array.isArray(data.playerList)) {\n          console.log(`[RoomUI] 收到玩家列表，包含 ${data.playerList.length} 名玩家`);\n          \n          // 清空现有玩家列表\n          if (this.playerListContent) {\n            this.playerListContent.removeAllChildren();\n          }\n          \n          // 创建玩家项 - 这部分逻辑似乎与 handleStateChange 重复，\n          // 并且 tempPlayer 未被使用。暂时注释掉以避免错误和冗余。\n          // data.playerList.forEach((playerData: any) => {\n          //   if (playerData.id && playerData.name) {\n          //     // PlayerState is a type, cannot use 'new'\n          //     // const tempPlayer: PlayerState = { /* ... */ };\n          //     // ... (rest of the logic using tempPlayer)\n          //   }\n          // });\n\n          // Update player count label if list is provided here\n          if (this.playerCountLabel) {\n             this.uiUpdater.updatePlayerCountLabel(this.playerCountLabel, data.playerList.length, this.maxClients);\n          }\n        }\n\n        // Update UI button states based on potentially changed isHost or isReady\n        this.updateReadyButtonInternal();\n        this.updateStartGameButtonInternal();\n    }\n\n    // Handle full room state message (might be initial connection or specific request)\n    public handleFullRoomState(data: any): void {\n        console.log(`[RoomUI] Received full room state:`, data);\n\n        // 更新房间状态\n        if (data.status) {\n          // Ensure state object exists before accessing properties\n          // Use {} as Type for interfaces/types\n          if (!this._colyseusState) this._colyseusState = {} as LiarDiceRoomState;\n          // Add null check before assignment\n          if (this._colyseusState) {\n              this._colyseusState.status = data.status;\n          }\n        }\n\n        // Update host ID and status\n        if (data.hostId) {\n          // Ensure state object exists\n          // Use {} as Type for interfaces/types\n          if (!this._colyseusState) this._colyseusState = {} as LiarDiceRoomState;\n           // Add null check before assignment\n          if (this._colyseusState) {\n              this._colyseusState.hostId = data.hostId;\n              this._isHost = data.hostId === this._sessionId;\n              console.log(`[RoomUI] Updated host status from full state: ${this._isHost}`);\n          } else {\n              // Handle case where state is null but hostId is provided\n              this._isHost = data.hostId === this._sessionId;\n              console.log(`[RoomUI] Updated host status from full state (state was null): ${this._isHost}`);\n          }\n        }\n\n        // 如果包含玩家列表，更新UI\n        if (data.players && Array.isArray(data.players)) {\n          console.log(`[RoomUI] 收到玩家列表，包含 ${data.players.length} 名玩家`);\n          \n          // 清空现有玩家列表\n          if (this.playerListContent) {\n            this.playerListContent.removeAllChildren();\n          }\n          \n          // Ensure _colyseusState exists before proceeding\n          if (!this._colyseusState) this._colyseusState = {} as LiarDiceRoomState; // Initialize as empty object if needed\n\n          // 创建新的 PlayerState 实例并添加到 Map 中\n          // 使用原生 Map 替代 MapSchema\n          const playersMap = new Map<string, PlayerState>();\n          \n          data.players.forEach((pData: any) => {\n              // 检查 pData.id 是否存在\n              if (pData && typeof pData === 'object' && pData.hasOwnProperty('id')) {\n                  // 创建新的 PlayerState 实例\n                  const playerState = new PlayerState();\n                  \n                  // 设置属性\n                  playerState.id = pData.id || ''; // 设置 id\n                  playerState.sessionId = pData.sessionId || pData.id || ''; // 优先使用 sessionId，如果没有则使用 id\n                  playerState.name = pData.name || 'Unknown';\n                  playerState.isReady = pData.isReady || false;\n                  playerState.diceCount = pData.diceCount || 5; // 默认给 5 个骰子\n                  playerState.isConnected = pData.isConnected !== undefined ? pData.isConnected : true;\n                  playerState.isAI = pData.isAI || false;\n                  playerState.aiType = pData.aiType || '';\n                  \n                  // 将玩家状态添加到 MapSchema 中\n                  playersMap.set(pData.id, playerState);\n\n                  // Update current player's ready state\n                  if (pData.id === this._sessionId) {\n                      this._isReady = playerState.isReady;\n                  }\n              } else {\n                  console.warn(\"[RoomUI] Invalid player data structure in fullRoomState:\", pData);\n              }\n          });\n\n          // 更新状态的 players 对象\n          this._colyseusState.players = playersMap;\n\n          // 使用 MapSchema 调用 updatePlayerList\n          this.uiUpdater.updatePlayerList(\n              this.playerListContent,\n              this.playerItemPrefab,\n              playersMap, // 传递 MapSchema\n              this._sessionId,\n              this._colyseusState.hostId // 使用可能更新的 hostId\n          );\n\n          // 更新玩家数量标签\n          if (this.playerCountLabel) {\n              const currentCount = playersMap.size;\n              this.uiUpdater.updatePlayerCountLabel(this.playerCountLabel, currentCount, this.maxClients);\n          }\n\n          // 更新按钮状态\n          this.updateReadyButtonInternal();\n          this.updateStartGameButtonInternal();\n\n          // 检查游戏状态并切换场景\n          if (data.status === 'playing' && director.getScene()?.name === 'RoomScene') {\n              console.log(\"[RoomUI] 游戏状态为'playing'，正在切换到GameScene。\");\n              director.loadScene('GameScene');\n          }\n        }\n    } // This is the correct closing brace for handleFullRoomState\n\n    // Handle specific game started message\n    public handleGameStarted(data: { gameId: string }): void {\n        console.log(`[RoomUI] Received 'gameStarted' message with ID: ${data.gameId} (Current Scene: ${director.getScene()?.name})`);\n        // Transition only if still in RoomScene\n        if (director.getScene()?.name === 'RoomScene') {\n            // Check state status as well to prevent duplicate navigation\n            if (this._colyseusState?.status !== 'playing') {\n                 console.log(\"[RoomUI] Navigating to GameScene based on 'gameStarted' message.\");\n                 director.loadScene('GameScene');\n            } else {\n                 console.log(\"[RoomUI] State already 'playing', ignoring redundant 'gameStarted' message.\");\n            }\n        }\n    }\n\n    public handleKicked(data: { reason?: string }): void {\n        console.warn('[RoomUI] Kicked from room:', data?.reason);\n        this.uiUpdater.showError(this.statusLabel, `您已被踢出房间${data?.reason ? ': ' + data.reason : ''}`, true, this);\n        this.scheduleOnce(() => director.loadScene('LobbyScene'), 3);\n    }\n\n    public handleDisconnect(code: number): void {\n        console.error(`[RoomUI] Network disconnected. Code: ${code}`);\n        // Avoid showing error if it was a graceful leave (code 1000) or already leaving\n        if (code !== 1000 /* && !this.isLeaving */) { // Add isLeaving flag if needed\n             this.uiUpdater.showError(this.statusLabel, \"网络连接已断开\", true, this);\n        }\n        // Always return to lobby on disconnect from room scene\n        this.scheduleOnce(() => director.loadScene('LobbyScene'), 3);\n    }\n\n    public handleNetworkError(error: NetworkError): void {\n        console.error('[RoomUI] Network error:', error);\n        // Avoid showing redundant timeout errors or normal leave errors\n        if (error.code === NetworkErrorCode.CONNECTION_TIMEOUT || error.code === 1000) {\n            // console.warn('[RoomUI] Suppressed timeout or normal disconnect error display.');\n            return;\n        }\n        this.uiUpdater.showError(this.statusLabel, `网络错误 (${error.code}): ${error.message}`, false, this);\n        // Consider returning to lobby on certain critical errors\n    }\n\n    // --- Internal UI Update Methods ---\n    // These methods now primarily manage button interactability and call UIUpdater\n\n    private updateReadyButtonInternal(): void {\n        // Update label via UIUpdater\n        this.uiUpdater.updateReadyButtonLabel(this.readyButtonLabel, this._isReady);\n\n        // Handle interactability based on game state\n        if (this.readyButton) {\n            const isWaiting = this._colyseusState?.status === 'waiting';\n            this.readyButton.interactable = isWaiting; // Can only change ready state while waiting\n        }\n    }\n\n    private updateStartGameButtonInternal(): void {\n        const isWaiting = this._colyseusState?.status === 'waiting';\n        // Check if conditions are met using UIUpdater's method\n        const canStart = this.uiUpdater.checkIfCanStartGame(this._isHost, this._colyseusState);\n\n        // Update button state (active and interactable) via UIUpdater\n        // Ensure _colyseusState is checked before accessing status\n        // No need to redeclare isWaiting here, it's declared above in the function scope\n        this.uiUpdater.updateStartGameButton(this.startGameButton, this._isHost, canStart, isWaiting);\n    }\n\n    // --- Button Click Handlers ---\n\n    public onReadyClick(): void {\n        const newState = !this._isReady;\n        console.log(`[RoomUI] Ready button clicked. Current state: ${this._isReady}, attempting to set: ${newState}`);\n        // Disable button temporarily to prevent double clicks\n        if(this.readyButton) this.readyButton.interactable = false;\n        // 通过 NetworkManager 发送消息到服务器\n        NetworkManager.getInstance().send('setReady', { ready: newState });\n        // Re-enable button after a short delay, state update will handle visual change and final interactability\n        this.scheduleOnce(() => {\n             // Re-enable only if still in waiting state\n             if (this.readyButton && this._colyseusState?.status === 'waiting') {\n                 this.readyButton.interactable = true;\n             }\n         }, 0.5);\n    }\n\n    public onStartGameClick(): void {\n        console.log('[RoomUI] Start Game button clicked.');\n        const currentIsWaiting = this._colyseusState?.status === 'waiting'; // Use correct check\n        if (!this._isHost || !currentIsWaiting) {\n            this.uiUpdater.showError(this.statusLabel, \"只有房主才能在等待时开始游戏\", false, this);\n            return;\n        }\n        // Use UIUpdater to check conditions\n        if (!this.uiUpdater.checkIfCanStartGame(this._isHost, this._colyseusState)) {\n             this.uiUpdater.showError(this.statusLabel, \"有玩家未准备好或人数不足\", false, this);\n             return;\n        }\n\n        if (this.startGameButton) this.startGameButton.interactable = false; // Prevent double click\n        this.uiUpdater.showInfo(this.statusLabel, \"正在开始游戏...\", false, this);\n        NetworkManager.getInstance().send('startGame', {}); // 使用 NetworkManager.getInstance()\n        // Server state update or 'gameStarted' message will trigger scene change\n    }\n\n    public onLeaveRoomClick(): void {\n        console.log('[RoomUI] Leave Room button clicked.');\n        if (this.leaveRoomButton) this.leaveRoomButton.interactable = false;\n        this.uiUpdater.showInfo(this.statusLabel, \"正在离开房间...\", true, this); // Persistent message\n        NetworkManager.getInstance().leaveRoom().catch((error: any) => { // 使用 NetworkManager.getInstance()\n            // leaveRoom itself shouldn't really reject, errors handled by onError/onLeave\n            console.error(\"Error during leaveRoom call (unexpected):\", error);\n             // Re-enable button only if leave fails unexpectedly AND we are still in room scene\n             if (this.leaveRoomButton && director.getScene()?.name === 'RoomScene') {\n                 this.leaveRoomButton.interactable = true;\n                 this.uiUpdater.showError(this.statusLabel, \"离开房间失败\", false, this); // Show error\n             }\n        });\n        // handleDisconnect listener (called via EventHandler) will handle scene change\n    }\n\n    public onQuickInviteAI(): void {\n        const isWaiting = this._colyseusState?.status === 'waiting';\n        if (!this._isHost || !isWaiting) {\n             this.uiUpdater.showError(this.statusLabel, \"只有房主才能在等待时邀请AI\", false, this);\n             return;\n         }\n         // Check player count using Object.keys length\n         const currentSize = this._colyseusState?.players ? Object.keys(this._colyseusState.players).length : 0;\n        if (currentSize >= this.maxClients) {\n             this.uiUpdater.showError(this.statusLabel, \"房间已满，无法邀请AI\", false, this);\n             return;\n        }\n\n        if (this.inviteAIButton) this.inviteAIButton.interactable = false; // Prevent double click\n        this.uiUpdater.showInfo(this.statusLabel, \"正在邀请 AI 加入...\", false, this);\n        NetworkManager.getInstance().send('addAI', { aiType: 'simple_random' }); // 使用 NetworkManager.getInstance()\n         // Re-enable button after a delay, state update will handle list change and final interactability\n         this.scheduleOnce(() => {\n              const currentIsWaiting = this._colyseusState?.status === 'waiting';\n              // Check player count using Object.keys length\n              const currentSizeAfterWait = this._colyseusState?.players ? Object.keys(this._colyseusState.players).length : 0;\n              if (this.inviteAIButton && this._isHost && currentIsWaiting && currentSizeAfterWait < this.maxClients) {\n                  this.inviteAIButton.interactable = true;\n              }\n          }, 1.0);\n    }\n\n    // Removed old UI update methods (updatePlayerList, createPlayerItem, updateReadyButton, updateStartGameButton, checkIfCanStartGame)\n    // Removed old status display methods (showError, showInfo)\n}\n"]}