{"version":3,"sources":["file:///d:/editors/liars_dice_demo/shared/schemas/LiarDiceState.ts"],"names":["Schema","MapSchema","ArraySchema","type","PlayerState","LiarDiceRoomState","map"],"mappings":";;;;;;;;;;;;;AAASA,MAAAA,M,mBAAAA,M;AAAQC,MAAAA,S,mBAAAA,S;AAAWC,MAAAA,W,mBAAAA,W;AAAaC,MAAAA,I,mBAAAA,I;;;AAEzC;6BACaC,W,WACVD,IAAI,CAAC,QAAD,C,UACJA,IAAI,CAAC,QAAD,C,UACJA,IAAI,CAAC,QAAD,C,UACJA,IAAI,CAAC,QAAD,C,UACJA,IAAI,CAAC,SAAD,C,UACJA,IAAI,CAAC,SAAD,C,UACJA,IAAI,CAAC,SAAD,C,UACJA,IAAI,CAAC,QAAD,C,UACJA,IAAI,CAAC,CAAC,QAAD,CAAD,C,YATA,MAAMC,WAAN,SAA0BJ,MAA1B,CAAiC;AAAA;AAAA;;AAAA;;AACT;AADS;;AAEF;AAFE;;AAGP;AAHO;;AAIF;AAJE;;AAKK;AALL;;AAMQ;AANR;;AAOE;AAPF;;AAQD;AARC;AAAA,UASsB;;;AATtB,O;;;;;;;;;;;;;;;;;;;;;;;;;iBAKF,K;;;;;;;iBACI,I;;;;;;;iBACP,K;;;;;;;iBACA,E;;;;;;;iBACA,IAAIE,WAAJ,E;;sBAGnC;;;mCACaG,iB,aAEVF,IAAI,CAAC;AAAEG,QAAAA,GAAG,EAAEF;AAAP,OAAD,C,WAGJD,IAAI,CAAC,CAAC,QAAD,CAAD,C,WAGJA,IAAI,CAAC,QAAD,C,WAGJA,IAAI,CAAC,QAAD,C,WAGJA,IAAI,CAAC,QAAD,C,WAGJA,IAAI,CAAC,QAAD,C,WAGJA,IAAI,CAAC,QAAD,C,WAGJA,IAAI,CAAC,QAAD,C,WAGJA,IAAI,CAAC,QAAD,C,WAGJA,IAAI,CAAC,QAAD,C,WAGJA,IAAI,CAAC,QAAD,C,WAGJA,IAAI,CAAC,SAAD,C,aAnCA,MAAME,iBAAN,SAAgCL,MAAhC,CAAuC;AAAA;AAAA;;AAC5C;AAD4C;;AAI5C;AAJ4C;;AAO5C;AAP4C;;AAU5C;AAV4C;;AAWC;AAE7C;AAb4C;;AAcC;AAE7C;AAhB4C;;AAiBM;AAElD;AAnB4C;;AAsB5C;AAtB4C;;AAuBP;AAErC;AAzB4C;;AA4B5C;AA5B4C;;AA+B5C;AA/B4C;;AAgCF;AAE1C;AAlC4C;AAAA,UAmCY;;;AAnCZ,O;;;;;iBAEN,IAAIC,SAAJ,E;;;;;;;iBAGF,IAAIC,WAAJ,E;;;;;;;iBAGS,C;;;;;;;iBAGH,C;;;;;;;iBAGA,C;;;;;;;iBAGI,E;;;;;;;iBAGb,S;;;;;;;iBAGA,E;;;;;;;iBAGK,C;;;;;;;iBAGD,C;;;;;;;iBAGC,E;;;;;;;iBAGW,K","sourcesContent":["import { Schema, MapSchema, ArraySchema, type } from \"@colyseus/schema\";\r\n\r\n// 定义单个玩家的状态\r\nexport class PlayerState extends Schema {\r\n  @type(\"string\") id!: string; // 玩家唯一 ID (可以是数据库 ID 或生成的 UUID)\r\n  @type(\"string\") sessionId!: string; // Colyseus 客户端连接的 Session ID\r\n  @type(\"string\") name!: string; // 玩家昵称\r\n  @type(\"number\") diceCount!: number; // 玩家当前拥有的骰子数量\r\n  @type(\"boolean\") isReady: boolean = false; // 玩家是否准备开始游戏\r\n  @type(\"boolean\") isConnected: boolean = true; // 玩家是否连接 (onLeave 时可以设为 false)\r\n  @type(\"boolean\") isAI: boolean = false; // 是否是 AI 玩家\r\n  @type(\"string\") aiType: string = \"\"; // AI 类型 (如果 isAI 为 true)，不使用可选类型\r\n  @type([\"number\"]) currentDices = new ArraySchema<number>(); // 玩家当前回合的骰子点数 (仅自己可见，考虑是否放在这里或单独发送)\r\n}\r\n\r\n// 定义整个游戏房间的状态\r\nexport class LiarDiceRoomState extends Schema {\r\n  // 玩家列表: key 是 sessionId\r\n  @type({ map: PlayerState }) players = new MapSchema<PlayerState>();\r\n\r\n  // 参与当前游戏回合的玩家 sessionId 列表 (按顺序)\r\n  @type([\"string\"]) activePlayerIds = new ArraySchema<string>();\r\n\r\n  // 当前轮到的玩家在 activePlayerIds 中的索引\r\n  @type(\"number\") currentPlayerIndex: number = 0;\r\n\r\n  // 当前叫价的点数 (1-6)\r\n  @type(\"number\") currentBidValue: number = 0; // 0 表示尚未开始叫价\r\n\r\n  // 当前叫价的数量\r\n  @type(\"number\") currentBidCount: number = 0; // 0 表示尚未开始叫价\r\n\r\n  // 上一个叫价的玩家 sessionId (用于质疑判断)\r\n  @type(\"string\") lastBidderSessionId: string = \"\"; // 提供默认值\r\n\r\n  // 游戏状态: waiting, playing, challenging, roundOver, finished\r\n  @type(\"string\") status: string = \"waiting\";\r\n\r\n  // 房主 sessionId (用于开始游戏、踢人等权限)\r\n  @type(\"string\") hostId: string = \"\"; // 提供默认值\r\n\r\n  // 当前游戏回合数\r\n  @type(\"number\") roundNumber: number = 0;\r\n\r\n  // 当前回合叫价次数 (用于判断是否可以质疑)\r\n  @type(\"number\") moveNumber: number = 0;\r\n\r\n  // 回合结算信息 (用于显示谁输了，输了多少骰子等)\r\n  @type(\"string\") roundResult: string = \"\"; // 提供默认值\r\n\r\n  // 本回合是否已经叫过 1 点 (影响 1 点是否为万能骰)\r\n  @type(\"boolean\") isOneCalledThisRound: boolean = false; // v2.1 新增\r\n}\r\n"]}