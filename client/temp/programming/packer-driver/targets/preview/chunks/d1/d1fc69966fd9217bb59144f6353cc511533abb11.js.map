{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/shared/schemas/liar-dice-room-state-client.ts"],"names":["LiarDiceRoomState","PlayerState","constructor","data","players","Map","activePlayerIds","currentPlayerIndex","currentBidValue","currentBidCount","lastBidderSessionId","status","hostId","roundNumber","moveNumber","roundResult","isOneCalledThisRound","update","undefined","clear","forEach","playerData","sessionId","set","Object","prototype","hasOwnProperty","call","getCurrentPlayer","length","currentPlayerId","get","getLastBidder","getAllPlayers","Array","from","values","getActivePlayers","map","id","filter","player"],"mappings":"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","sourcesContent":["/**\n * 客户端专用的LiarDiceRoomState定义\n * 用于解决Colyseus Schema导入问题\n */\nimport { PlayerState } from './player-state-client';\n\n// 客户端使用的房间状态类，不使用装饰器\nexport class LiarDiceRoomState {\n  // 玩家列表: key 是 sessionId\n  players: Map<string, PlayerState> = new Map<string, PlayerState>();\n  \n  // 参与当前游戏回合的玩家 sessionId 列表 (按顺序)\n  activePlayerIds: string[] = [];\n  \n  // 当前轮到的玩家在 activePlayerIds 中的索引\n  currentPlayerIndex: number = 0;\n  \n  // 当前叫价的点数 (1-6)\n  currentBidValue: number = 0; // 0 表示尚未开始叫价\n  \n  // 当前叫价的数量\n  currentBidCount: number = 0; // 0 表示尚未开始叫价\n  \n  // 上一个叫价的玩家 sessionId (用于质疑判断)\n  lastBidderSessionId: string = \"\";\n  \n  // 游戏状态: waiting, playing, challenging, roundOver, finished\n  status: string = \"waiting\";\n  \n  // 房主 sessionId (用于开始游戏、踢人等权限)\n  hostId: string = \"\";\n  \n  // 当前游戏回合数\n  roundNumber: number = 0;\n  \n  // 当前回合叫价次数 (用于判断是否可以质疑)\n  moveNumber: number = 0;\n  \n  // 回合结算信息 (用于显示谁输了，输了多少骰子等)\n  roundResult: string = \"\";\n  \n  // 本回合是否已经叫过 1 点 (影响 1 点是否为万能骰)\n  isOneCalledThisRound: boolean = false;\n  \n  // 从服务器数据构造\n  constructor(data?: any) {\n    if (data) {\n      this.update(data);\n    }\n  }\n  \n  // 从服务器数据更新\n  update(data: any): void {\n    if (!data) return;\n    \n    // 更新基本属性\n    if (data.currentPlayerIndex !== undefined) this.currentPlayerIndex = data.currentPlayerIndex;\n    if (data.currentBidValue !== undefined) this.currentBidValue = data.currentBidValue;\n    if (data.currentBidCount !== undefined) this.currentBidCount = data.currentBidCount;\n    if (data.lastBidderSessionId !== undefined) this.lastBidderSessionId = data.lastBidderSessionId;\n    if (data.status !== undefined) this.status = data.status;\n    if (data.hostId !== undefined) this.hostId = data.hostId;\n    if (data.roundNumber !== undefined) this.roundNumber = data.roundNumber;\n    if (data.moveNumber !== undefined) this.moveNumber = data.moveNumber;\n    if (data.roundResult !== undefined) this.roundResult = data.roundResult;\n    if (data.isOneCalledThisRound !== undefined) this.isOneCalledThisRound = data.isOneCalledThisRound;\n    \n    // 更新玩家ID列表\n    if (data.activePlayerIds) {\n      this.activePlayerIds = [...data.activePlayerIds];\n    }\n    \n    // 更新玩家列表\n    if (data.players) {\n      // 清空当前玩家列表\n      this.players.clear();\n      \n      // 处理不同类型的players对象\n      if (typeof data.players.forEach === 'function') {\n        // 如果是MapSchema或类似Map的对象\n        data.players.forEach((playerData: any, sessionId: string) => {\n          this.players.set(sessionId, new PlayerState(playerData));\n        });\n      } else if (typeof data.players === 'object') {\n        // 如果是普通对象\n        for (const sessionId in data.players) {\n          if (Object.prototype.hasOwnProperty.call(data.players, sessionId)) {\n            this.players.set(sessionId, new PlayerState(data.players[sessionId]));\n          }\n        }\n      }\n    }\n  }\n  \n  // 获取当前玩家\n  getCurrentPlayer(): PlayerState | undefined {\n    if (this.activePlayerIds.length === 0 || this.currentPlayerIndex < 0 || \n        this.currentPlayerIndex >= this.activePlayerIds.length) {\n      return undefined;\n    }\n    \n    const currentPlayerId = this.activePlayerIds[this.currentPlayerIndex];\n    return this.players.get(currentPlayerId);\n  }\n  \n  // 获取上一个叫价的玩家\n  getLastBidder(): PlayerState | undefined {\n    if (!this.lastBidderSessionId) {\n      return undefined;\n    }\n    \n    return this.players.get(this.lastBidderSessionId);\n  }\n  \n  // 获取所有玩家数组\n  getAllPlayers(): PlayerState[] {\n    return Array.from(this.players.values());\n  }\n  \n  // 获取活跃玩家数组（按照游戏顺序）\n  getActivePlayers(): PlayerState[] {\n    return this.activePlayerIds\n      .map(id => this.players.get(id))\n      .filter((player): player is PlayerState => player !== undefined);\n  }\n}\n"]}