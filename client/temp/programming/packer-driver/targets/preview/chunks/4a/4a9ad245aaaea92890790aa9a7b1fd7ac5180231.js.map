{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/debug/colyseus-tester.ts"],"names":["_decorator","Component","Label","Button","loadColyseusClient","isColyseusLoaded","NetworkManager","LoginManager","ccclass","property","ColyseusTestTool","_logs","_maxLogs","start","updateStatus","testButton","node","on","EventType","CLICK","onTestButtonClick","clearButton","onClearButtonClick","onDestroy","off","log","playerName","Math","floor","random","room","getInstance","joinLiarDiceRoom","create","roomId","sessionId","name","send","content","Promise","resolve","setTimeout","leaveRoom","error","Error","message","String","console","push","Date","toLocaleTimeString","length","shift","join","status","statusLabel","string"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, Button } from 'cc';\nimport { loadColyseusClient, isColyseusLoaded } from '../libs/colyseus-loader';\nimport { NetworkManager } from '../core/network';\nimport { LoginManager } from '../core/login-manager';\n\nconst { ccclass, property } = _decorator;\n\n/**\n * Colyseus测试工具\n * 用于测试Colyseus连接和房间加入\n */\n@ccclass('ColyseusTestTool')\nexport class ColyseusTestTool extends Component {\n    @property(Label)\n    statusLabel: Label | null = null;\n\n    @property(Button)\n    testButton: Button | null = null;\n\n    @property(Button)\n    clearButton: Button | null = null;\n\n    @property\n    serverUrl: string = \"ws://localhost:3000\";\n\n    private _logs: string[] = [];\n    private _maxLogs: number = 20;\n\n    start() {\n        this.updateStatus('准备测试Colyseus连接');\n        \n        // 设置按钮事件\n        if (this.testButton) {\n            this.testButton.node.on(Button.EventType.CLICK, this.onTestButtonClick, this);\n        }\n        \n        if (this.clearButton) {\n            this.clearButton.node.on(Button.EventType.CLICK, this.onClearButtonClick, this);\n        }\n    }\n\n    onDestroy() {\n        // 清理按钮事件\n        if (this.testButton) {\n            this.testButton.node.off(Button.EventType.CLICK, this.onTestButtonClick, this);\n        }\n        \n        if (this.clearButton) {\n            this.clearButton.node.off(Button.EventType.CLICK, this.onClearButtonClick, this);\n        }\n    }\n\n    /**\n     * 测试按钮点击事件\n     */\n    async onTestButtonClick() {\n        this.log('开始测试Colyseus连接...');\n        \n        try {\n            // 1. 测试Colyseus客户端加载\n            this.log('1. 测试Colyseus客户端加载');\n            if (!isColyseusLoaded()) {\n                this.log('Colyseus客户端未加载，正在加载...');\n                await loadColyseusClient();\n                this.log('Colyseus客户端加载成功');\n            } else {\n                this.log('Colyseus客户端已加载');\n            }\n            \n            // 2. 测试网络管理器初始化\n            this.log('2. 测试网络管理器初始化');\n            // NetworkManager 不需要显式初始化，它在需要时会自动初始化\n            this.log('网络管理器初始化成功');\n            \n            // 3. 测试加入房间\n            this.log('3. 测试加入房间');\n            const playerName = `测试用户_${Math.floor(Math.random() * 10000)}`;\n            LoginManager.playerName = playerName;\n            this.log(`使用玩家名称: ${playerName}`);\n            \n            const room = await NetworkManager.getInstance().joinLiarDiceRoom({\n                playerName: playerName,\n                create: true\n            });\n            \n            this.log(`房间加入成功: ${room.roomId}`);\n            this.log(`会话ID: ${room.sessionId}`);\n            this.log(`房间名称: ${room.name}`);\n            \n            // 4. 测试发送消息\n            this.log('4. 测试发送消息');\n            NetworkManager.getInstance().send('test_message', { content: '这是一条测试消息' });\n            this.log('测试消息已发送');\n            \n            // 5. 等待3秒后离开房间\n            this.log('5. 等待3秒后离开房间');\n            await new Promise(resolve => setTimeout(resolve, 3000));\n            \n            await NetworkManager.getInstance().leaveRoom();\n            this.log('已离开房间');\n            \n            this.log('测试完成，所有步骤成功');\n        } catch (error) {\n            this.log(`测试失败: ${error instanceof Error ? error.message : String(error)}`);\n            console.error('Colyseus测试失败:', error);\n        }\n    }\n    \n    /**\n     * 清除按钮点击事件\n     */\n    onClearButtonClick() {\n        this._logs = [];\n        this.updateStatus('日志已清除');\n    }\n    \n    /**\n     * 添加日志\n     * @param message 日志消息\n     */\n    private log(message: string) {\n        console.log(`[ColyseusTest] ${message}`);\n        this._logs.push(`${new Date().toLocaleTimeString()}: ${message}`);\n        \n        // 限制日志数量\n        if (this._logs.length > this._maxLogs) {\n            this._logs.shift();\n        }\n        \n        this.updateStatus(this._logs.join('\\n'));\n    }\n    \n    /**\n     * 更新状态标签\n     * @param status 状态文本\n     */\n    private updateStatus(status: string) {\n        if (this.statusLabel) {\n            this.statusLabel.string = status;\n        }\n    }\n}\n"]}