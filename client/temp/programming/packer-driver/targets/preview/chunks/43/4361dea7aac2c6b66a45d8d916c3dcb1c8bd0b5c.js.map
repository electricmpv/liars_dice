{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/game-ui.ts"],"names":["_decorator","Component","Label","Color","director","isValid","NetworkManager","NetworkErrorCode","PlayerDisplayController","BidController","DiceDisplayController","GameHistoryPanel","GameResultPanel","ccclass","property","GameUI","_roomId","_sessionId","_myDices","_currentBid","_isMyTurn","_totalDiceInGame","_onStateUpdateCallback","state","handleStateChange","_onYourDicesCallback","data","handleYourDices","_onNewRoundCallback","handleNewRound","_onNextTurnCallback","handleNextTurn","_onPlayerBidCallback","handlePlayerBidUpdate","_onChallengeRevealCallback","handleChallengeReveal","_onGameFinishedCallback","handleGameFinished","_onDisconnectCallback","code","handleDisconnect","_onErrorCallback","error","handleNetworkError","onLoad","console","log","listenToNetworkEvents","listenToBidControllerEvents","listenToResultPanelEvents","start","initUI","getInstance","roomId","sessionId","gameStatusLabel","string","scheduleOnce","loadScene","playerDisplayController","initialize","roomState","roundLabel","gameResultPanel","hidePanel","bidController","node","active","diceDisplayController","clearDices","on","cleanupNetworkListeners","off","handleLocalPlaceBid","handleLocalChallenge","warn","handleBackToLobbyRequested","players","playersDataArray","Object","entries","map","pState","id","name","isReady","isAI","diceCount","activePlayerIdsArray","activePlayerIds","currentPlayerId","currentPlayerIndex","updatePlayerDisplays","values","reduce","sum","p","currentBidValue","currentBidCount","status","bidForController","updateState","roundNumber","updateGameStatusLabel","winner","undefined","winnerSessionId","dices","displayDices","currentPlayerSessionId","count","value","color","YELLOW","finalState","playersDataForResult","forEach","push","e","e2","showResult","winnerDisplayName","winnerName","substring","RED","message","SERVER_ERROR","bid","send","leaveRoom","finally","isMyTurn","currentPlayerName","getPlayerNameWithAlias","WHITE","onDestroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, Color, Button, director, isValid } from 'cc';\nimport { NetworkManager, NetworkError, NetworkErrorCode } from '../core/network'; // Import Colyseus-based network\nimport { LoginManager } from '../core/login-manager';\nimport { PlayerDisplayController } from './player-display-controller';\nimport { BidController } from './bid-controller';\nimport { DiceDisplayController } from './dice-display-controller';\nimport { GameHistoryPanel } from './game-history-panel';\nimport { GameResultPanel } from './game-result-panel';\nimport { BidValidator } from '../utils/bid-validator';\n// Import new client-side interfaces\nimport type { LiarDiceRoomStateClient } from '../shared/schemas/liar-dice-room-state-client';\nimport type { PlayerStateClient } from '../shared/schemas/player-state-client';\nimport { Face, Bid } from '../../shared/types/game-types'; // Import shared types\n// Import PlayerData type expected by PlayerDisplayController\nimport type { PlayerData } from './player-display-controller'; // Assuming PlayerData is exported or defined here\n\nconst { ccclass, property } = _decorator;\n\n/**\n * 游戏UI主控制器 (适配 Colyseus)\n * 负责协调各个UI组件和处理网络事件/状态更新\n */\n@ccclass('GameUI')\nexport class GameUI extends Component {\n    // --- UI 元素引用 ---\n    @property(Label)\n    private gameStatusLabel: Label | null = null;\n\n    @property(Label)\n    private roundLabel: Label | null = null;\n\n    // --- 控制器引用 ---\n    @property(PlayerDisplayController)\n    private playerDisplayController: PlayerDisplayController | null = null;\n\n    @property(BidController)\n    private bidController: BidController | null = null;\n\n    @property(DiceDisplayController)\n    private diceDisplayController: DiceDisplayController | null = null;\n\n    @property(GameHistoryPanel)\n    private gameHistoryPanel: GameHistoryPanel | null = null;\n\n    @property(GameResultPanel)\n    private gameResultPanel: GameResultPanel | null = null;\n\n    // --- 游戏状态 ---\n    private _roomId: string = '';\n    private _sessionId: string = ''; // Use Colyseus session ID\n    private _myDices: Face[] = []; // Store own dices received via message\n    private _currentBid: Bid | [0, 0] = [0, 0]; // Store current bid from state\n    private _isMyTurn: boolean = false;\n    private _totalDiceInGame: number = 0;\n\n    // --- Network Listener Callbacks ---\n    // Type the state parameter as 'any' to avoid importing the original Schema file at runtime\n    // Cast to the client interface inside the handler\n    private _onStateUpdateCallback = (state: any) => this.handleStateChange(state as LiarDiceRoomStateClient);\n    private _onYourDicesCallback = (data: { dices: number[] }) => this.handleYourDices(data); // Type adjusted\n    private _onNewRoundCallback = (data: any) => this.handleNewRound(data);\n    private _onNextTurnCallback = (data: { currentPlayerSessionId: string }) => this.handleNextTurn(data);\n    private _onPlayerBidCallback = (data: { sessionId: string, value: Face, count: number }) => this.handlePlayerBidUpdate(data);\n    private _onChallengeRevealCallback = (data: any) => this.handleChallengeReveal(data);\n    private _onGameFinishedCallback = (data: { winnerSessionId?: string, winnerName?: string }) => this.handleGameFinished(data);\n    private _onDisconnectCallback = (code: number) => this.handleDisconnect(code);\n    private _onErrorCallback = (error: NetworkError) => this.handleNetworkError(error);\n    // Listener for generic messages (e.g., chat) - can be handled directly or via NetworkManager specific events\n    // private _onMessageCallback = (data: { type: string, message: any }) => this.handleServerMessage(data);\n\n\n    onLoad() {\n        console.log(\"[GameUI] onLoad called.\");\n        this.listenToNetworkEvents();\n        this.listenToBidControllerEvents();\n        this.listenToResultPanelEvents();\n    }\n\n    start() {\n        console.log(\"[GameUI] start called.\");\n        this.initUI();\n\n        this._roomId = NetworkManager.getInstance().roomId;\n        this._sessionId = NetworkManager.getInstance().sessionId; // Get own session ID\n\n        if (!this._roomId || !this._sessionId) {\n            console.error(\"[GameUI] Missing roomId or sessionId from NetworkManager!\");\n            if (this.gameStatusLabel) this.gameStatusLabel.string = \"错误：无法获取游戏信息\";\n            // Consider returning to lobby\n             this.scheduleOnce(() => director.loadScene('LobbyScene'), 3);\n            return;\n        }\n        console.log(`[GameUI] Room ID: ${this._roomId}, Player Session ID: ${this._sessionId}`);\n\n        // Initialize PlayerDisplayController\n        if (this.playerDisplayController) {\n            this.playerDisplayController.initialize(this._sessionId);\n        } else {\n            console.error(\"[GameUI] PlayerDisplayController is not assigned!\");\n        }\n\n        // Initial game state will be received via the 'stateUpdate' event\n        if (this.gameStatusLabel) this.gameStatusLabel.string = \"等待游戏状态...\";\n\n        // Check if state is already cached in NetworkManager\n         if (NetworkManager.getInstance().roomState) {\n             console.log(\"[GameUI] Initial state found in network cache.\");\n             // Cast the cached state before passing to the handler\n             this.handleStateChange(NetworkManager.getInstance().roomState as any as LiarDiceRoomStateClient);\n         }\n    }\n\n    /**\n     * 初始化UI元素状态\n     */\n    private initUI(): void {\n        if (this.gameStatusLabel) this.gameStatusLabel.string = \"连接中...\";\n        if (this.roundLabel) this.roundLabel.string = \"回合: 0\";\n        if (this.gameResultPanel) this.gameResultPanel.hidePanel();\n        if (this.bidController) this.bidController.node.active = false; // Hide bid controls initially\n        if (this.diceDisplayController) this.diceDisplayController.clearDices();\n    }\n\n    /**\n     * 监听网络事件\n     */\n    private listenToNetworkEvents(): void {\n        console.log(\"[GameUI] Registering network listeners.\");\n        NetworkManager.getInstance().on('stateUpdate', this._onStateUpdateCallback);\n        NetworkManager.getInstance().on('yourDices', this._onYourDicesCallback);\n        NetworkManager.getInstance().on('newRound', this._onNewRoundCallback);\n        NetworkManager.getInstance().on('nextTurn', this._onNextTurnCallback);\n        NetworkManager.getInstance().on('playerBid', this._onPlayerBidCallback);\n        NetworkManager.getInstance().on('challengeReveal', this._onChallengeRevealCallback);\n        NetworkManager.getInstance().on('gameFinished', this._onGameFinishedCallback);\n        NetworkManager.getInstance().on('disconnected', this._onDisconnectCallback);\n        NetworkManager.getInstance().on('error', this._onErrorCallback);\n        // network.on('messageReceived', this._onMessageCallback); // For chat etc.\n    }\n\n     /**\n      * 移除网络事件监听\n      */\n    private cleanupNetworkListeners(): void {\n        console.log(\"[GameUI] Cleaning up network listeners.\");\n        NetworkManager.getInstance().off('stateUpdate', this._onStateUpdateCallback);\n        NetworkManager.getInstance().off('yourDices', this._onYourDicesCallback);\n        NetworkManager.getInstance().off('newRound', this._onNewRoundCallback);\n        NetworkManager.getInstance().off('nextTurn', this._onNextTurnCallback);\n        NetworkManager.getInstance().off('playerBid', this._onPlayerBidCallback);\n        NetworkManager.getInstance().off('challengeReveal', this._onChallengeRevealCallback);\n        NetworkManager.getInstance().off('gameFinished', this._onGameFinishedCallback);\n        NetworkManager.getInstance().off('disconnected', this._onDisconnectCallback);\n        NetworkManager.getInstance().off('error', this._onErrorCallback);\n        // network.off('messageReceived', this._onMessageCallback);\n    }\n\n    /**\n     * 监听来自 BidController 的事件\n     */\n    private listenToBidControllerEvents(): void {\n        if (this.bidController) {\n            console.log(\"[GameUI] Registering BidController listeners.\");\n            this.bidController.node.on('place-bid', this.handleLocalPlaceBid, this); // Renamed handler\n            this.bidController.node.on('challenge', this.handleLocalChallenge, this); // Renamed handler\n            // this.bidController.node.on('spot-on', this.handleLocalSpotOn, this); // Add if implemented\n        } else {\n            console.warn(\"[GameUI] BidController not available for event listening.\");\n        }\n    }\n\n    /**\n     * 监听来自 GameResultPanel 的事件\n     */\n    private listenToResultPanelEvents(): void {\n        if (this.gameResultPanel) {\n            this.gameResultPanel.node.on('back-to-lobby-requested', this.handleBackToLobbyRequested, this);\n        }\n    }\n\n    // --- Network Event Handlers ---\n\n     /**\n      * 主状态更新处理\n      * Accepts the state casted to the client-side interface type\n      */\n    private handleStateChange(state: LiarDiceRoomStateClient): void { // Use Client Interface type\n        // console.log(\"[GameUI] Handling State Change:\", JSON.stringify(state).substring(0, 300));\n        if (!this._sessionId) {\n             console.error(\"[GameUI] Cannot handle state change, own sessionId is unknown.\");\n             return;\n        }\n        if (!state) {\n            console.warn(\"[GameUI] Received null state in handleStateChange.\");\n            return;\n        }\n\n        // Update players display\n        if (this.playerDisplayController && state.players) {\n            // CONVERT from Record<string, PlayerStateClient> to PlayerData[]\n            const playersDataArray: PlayerData[] = Object.entries(state.players).map(([sessionId, pState]) => ({\n                id: sessionId, // Use sessionId as the key which maps to PlayerData's id\n                name: pState.name,\n                isReady: pState.isReady,\n                isAI: pState.isAI,\n                diceCount: pState.diceCount,\n            }));\n\n            // activePlayerIds is now string[]\n            const activePlayerIdsArray = state.activePlayerIds;\n            const currentPlayerId = activePlayerIdsArray[state.currentPlayerIndex];\n            // Pass the converted PlayerData[]\n            this.playerDisplayController.updatePlayerDisplays(playersDataArray, currentPlayerId);\n        }\n\n        // Update total dice count using Object.values with Record\n        this._totalDiceInGame = 0;\n        if (state.players) {\n            this._totalDiceInGame = Object.values(state.players).reduce((sum, p) => sum + p.diceCount, 0);\n        }\n\n        // Update current bid\n        this._currentBid = [state.currentBidValue as Face, state.currentBidCount];\n\n        // Check if it's my turn using standard array indexing\n        this._isMyTurn = state.status === 'playing' && state.activePlayerIds[state.currentPlayerIndex] === this._sessionId;\n\n        // Update BidController state\n        if (this.bidController) {\n            this.bidController.node.active = state.status === 'playing'; // Show/hide based on game status\n            if (state.status === 'playing') {\n                 // Use 'any' to bypass strict type check for the bid array if casting doesn't work\n                 const bidForController: any = this._currentBid[1] === 0 ? [0, 0] : [this._currentBid[0], this._currentBid[1]];\n                this.bidController.updateState(this._isMyTurn, bidForController, this._totalDiceInGame);\n            }\n        }\n\n        // Update round label\n        if (this.roundLabel) {\n            this.roundLabel.string = `回合: ${state.roundNumber}`;\n        }\n\n        // Update status label\n        this.updateGameStatusLabel(state);\n\n        // If status is finished, show results (might be redundant with handleGameFinished)\n        if (state.status === 'finished' && !this.gameResultPanel?.node.active && state.players) {\n            console.log(\"[GameUI] State indicates game finished, showing results panel.\");\n             // Find winner using Object.values for Record\n             let winner: PlayerStateClient | undefined = undefined;\n             for (const p of Object.values(state.players)) { // Iterate over values of Record\n                 if (p.diceCount > 0) {\n                     winner = p;\n                     break; // Assuming only one winner, exit loop once found\n                 }\n             }\n             // Pass winnerSessionId safely (it can be undefined)\n             this.handleGameFinished({ winnerSessionId: winner?.sessionId }); // PlayerStateClient has sessionId\n        } else if (state.status !== 'finished' && this.gameResultPanel?.node.active) {\n             this.gameResultPanel.hidePanel(); // Hide result panel if game restarts or returns to waiting\n        }\n    }\n\n    /**\n     * 处理服务器发送的个人骰子信息\n     */\n    private handleYourDices(data: { dices: number[] }): void {\n        console.log(`[GameUI] Received my dices:`, data.dices);\n        this._myDices = data.dices as Face[];\n        this.diceDisplayController?.displayDices(this._myDices);\n\n        // Add history item for dice roll - REMOVED (History logging responsibility moved)\n        // if (this.gameHistoryPanel) { ... }\n    }\n\n    /**\n     * 处理新回合开始的消息\n     */\n    private handleNewRound(data: {\n        roundNumber: number,\n        activePlayerIds: string[],\n        currentPlayerSessionId: string,\n        diceCounts: { [sessionId: string]: number }\n    }): void {\n        console.log(`[GameUI] Handling new round: ${data.roundNumber}`);\n        if (this.roundLabel) this.roundLabel.string = `回合: ${data.roundNumber}`;\n        this._myDices = []; // Clear previous dices\n        this.diceDisplayController?.clearDices(); // Clear display\n        if (this.gameResultPanel?.node.active) this.gameResultPanel.hidePanel(); // Hide previous result\n\n        // Add history item - REMOVED (History logging responsibility moved)\n        // if (this.gameHistoryPanel) { ... }\n        // State update will handle player displays and turn indicator\n    }\n\n    /**\n     * 处理轮到下一玩家的消息\n     */\n    private handleNextTurn(data: { currentPlayerSessionId: string }): void {\n        console.log(`[GameUI] Handling next turn. Current player: ${data.currentPlayerSessionId}`);\n        this._isMyTurn = data.currentPlayerSessionId === this._sessionId;\n        // State update should follow shortly, this is just for quicker UI feedback if needed\n        // We rely on handleStateChange to update most UI elements\n        // Removed call to non-existent updateTurn\n        // if (this.bidController) {\n        //      this.bidController.updateTurn(this._isMyTurn);\n        // }\n\n        // Add history item if turn passed *without* a bid (e.g. after challenge)\n        // We need more context here, maybe rely on state change for history?\n    }\n\n    /**\n     * 处理其他玩家叫价的广播消息\n     */\n    private handlePlayerBidUpdate(data: { sessionId: string, value: Face, count: number }): void {\n        console.log(`[GameUI] Handling player bid update: ${data.sessionId} bids ${data.count}x${data.value}`);\n        this._currentBid = [data.value, data.count]; // Update local cache of current bid\n\n        // Add history item - REMOVED (History logging responsibility moved)\n        // if (this.gameHistoryPanel) { ... }\n         // State update should follow, rely on handleStateChange for BidController update\n         // If state update is slow, could update BidController here:\n         // if (this.bidController) {\n         //    this.bidController.updateCurrentBid(this._currentBid);\n         // }\n    }\n\n    /**\n     * 处理质疑结果揭示的消息\n     */\n    private handleChallengeReveal(data: {\n        challengerId: string, lastBidderId: string,\n        bidValue: Face, bidCount: number,\n        allDice: { [sessionId: string]: number[] }, // Changed to number[]\n        actualCount: number, useWildOnes: boolean,\n        bidCorrect: boolean, loserId: string\n    }): void {\n        console.log(\"[GameUI] Handling challenge reveal:\", data);\n\n        // Display all revealed dice\n        if (this.diceDisplayController) {\n            // Need a way to show all dice temporarily\n            // this.diceDisplayController.showAllDices(data.allDice);\n            // For now, just ensure own dice are correct (already handled by yourDices?)\n             this.diceDisplayController.displayDices(this._myDices); // Re-display own dice\n        }\n\n        // Add detailed history item - REMOVED (History logging responsibility moved)\n        // if (this.gameHistoryPanel) { ... }\n\n        // Update status label temporarily\n        if (this.gameStatusLabel) {\n             this.gameStatusLabel.string = \"质疑结果...\";\n             this.gameStatusLabel.color = Color.YELLOW;\n        }\n\n        // Hide bid controls during reveal/pause\n        if (this.bidController) {\n            this.bidController.node.active = false;\n        }\n\n        // Next round/game end will be triggered by state change after server delay\n    }\n\n    /**\n     * 处理游戏结束的消息\n     */\n    private handleGameFinished(data: { winnerSessionId?: string, winnerName?: string }): void {\n        console.log(\"[GameUI] Handling game finished:\", data);\n\n        // Disable bid controls\n        if (this.bidController) {\n            this.bidController.node.active = false;\n        }\n\n        // Show result panel\n        if (this.gameResultPanel) {\n            // Adapt data if necessary (e.g., get full player list from last state)\n             const finalState: any = NetworkManager.getInstance().roomState; // Treat last known state as 'any'\n             // CONVERT finalState players (likely MapSchema-like) to PlayerData[]\n             const playersDataForResult: PlayerData[] = [];\n             if (finalState && finalState.players) {\n                 try {\n                      // Attempt MapSchema-like iteration first\n                      finalState.players.forEach((pState: any, sessionId: string) => {\n                          playersDataForResult.push({\n                              id: sessionId,\n                              name: pState.name,\n                              isReady: pState.isReady,\n                              isAI: pState.isAI,\n                              diceCount: pState.diceCount,\n                          });\n                      });\n                 } catch (e) {\n                      console.warn(\"[GameUI] Could not iterate finalState.players like MapSchema, trying Object.entries\", e);\n                      // Fallback to Object.entries if forEach fails\n                      try {\n                          Object.entries(finalState.players).forEach(([sessionId, pState]: [string, any]) => {\n                               playersDataForResult.push({\n                                   id: sessionId,\n                                   name: pState.name,\n                                   isReady: pState.isReady,\n                                   isAI: pState.isAI,\n                                   diceCount: pState.diceCount,\n                               });\n                          });\n                      } catch (e2) {\n                           console.error(\"[GameUI] Failed to iterate finalState.players\", e2);\n                      }\n                 }\n             }\n             // Pass winnerSessionId safely as string | undefined\n             this.gameResultPanel.showResult({ winner: data.winnerSessionId ?? '', players: playersDataForResult });\n        }\n\n        // Update status label\n        if (this.gameStatusLabel) {\n            const winnerDisplayName = data.winnerName || (data.winnerSessionId ? `玩家 ${data.winnerSessionId.substring(0,4)}` : \"无\");\n            this.gameStatusLabel.string = `游戏结束! ${winnerDisplayName} 获胜!`;\n            this.gameStatusLabel.color = new Color(255, 215, 0, 255); // Gold color\n        }\n    }\n\n    /**\n     * 处理网络断开连接\n     */\n    private handleDisconnect(code: number): void {\n        console.error(`[GameUI] Network disconnected. Code: ${code}`);\n        if (!isValid(this.node)) return; // Check if component is still valid\n        if (this.gameStatusLabel) {\n            this.gameStatusLabel.string = \"网络连接已断开\";\n            this.gameStatusLabel.color = Color.RED;\n        }\n        // Optionally show result panel with error/disconnect message?\n        // For now, just return to lobby after a delay\n        this.scheduleOnce(() => director.loadScene('LobbyScene'), 3);\n    }\n\n    /**\n     * 处理网络错误\n     */\n    private handleNetworkError(error: NetworkError): void {\n        console.error('[GameUI] Network error:', error);\n         if (!isValid(this.node)) return;\n        if (this.gameStatusLabel) {\n            this.gameStatusLabel.string = `网络错误: ${error.message}`;\n            this.gameStatusLabel.color = Color.RED;\n        }\n        // Consider returning to lobby on critical errors\n        if (error.code !== NetworkErrorCode.SERVER_ERROR) { // Avoid leaving on temporary server issues?\n             this.scheduleOnce(() => director.loadScene('LobbyScene'), 3);\n        }\n    }\n\n\n    // --- UI Action Handlers ---\n\n    /**\n     * 处理本地玩家叫价事件 (from BidController)\n     */\n    private handleLocalPlaceBid(bid: Bid): void {\n        console.log(`[GameUI] handleLocalPlaceBid: Sending bid [${bid[0]}, ${bid[1]}]`);\n        NetworkManager.getInstance().send('bid', { value: bid[0], count: bid[1] });\n        // Temporarily disable controls, server state update will re-enable if necessary\n        // Removed call to non-existent updateTurn\n        // if (this.bidController) this.bidController.updateTurn(false);\n        if (this.gameStatusLabel) this.gameStatusLabel.string = \"等待其他玩家...\";\n    }\n\n    /**\n     * 处理本地玩家质疑事件 (from BidController)\n     */\n    private handleLocalChallenge(): void {\n        console.log(\"[GameUI] handleLocalChallenge: Sending challenge.\");\n        NetworkManager.getInstance().send('challenge', {});\n        // Temporarily disable controls and update status\n        // Removed call to non-existent updateTurn\n        // if (this.bidController) this.bidController.updateTurn(false);\n        if (this.gameStatusLabel) {\n             this.gameStatusLabel.string = \"质疑中...\";\n             this.gameStatusLabel.color = Color.YELLOW;\n        }\n    }\n\n    /**\n     * 处理本地玩家开点事件 (from BidController) - IF IMPLEMENTED\n     */\n    // private handleLocalSpotOn(): void {\n    //     console.log(\"[GameUI] handleLocalSpotOn: Sending spot_on.\");\n    //     network.send('spot_on', {});\n    //     // Temporarily disable controls and update status\n    //     // Removed call to non-existent updateTurn\n    //     // if (this.bidController) this.bidController.updateTurn(false);\n    //     if (this.gameStatusLabel) this.gameStatusLabel.string = \"开点中...\";\n    // }\n\n    /**\n     * 处理点数选择按钮点击 (由编辑器配置调用 - Optional, can be handled within BidController)\n     */\n    // public onBidValueSelect(event: Event, value: string): void {\n    //     this.bidController?.onValueSelect(event, value);\n    // }\n\n    /**\n     * 处理返回大厅请求 (from GameResultPanel)\n     */\n    private handleBackToLobbyRequested(): void {\n        console.log(\"[GameUI] Back to lobby requested.\");\n        // Ensure room is left before changing scene\n        NetworkManager.getInstance().leaveRoom().finally(() => {\n             director.loadScene('LobbyScene');\n        });\n    }\n\n    /**\n     * 更新游戏状态标签 (根据 client interface state)\n     * Accepts the state casted to the client-side interface type\n     */\n    private updateGameStatusLabel(state: LiarDiceRoomStateClient): void { // Use Client Interface type\n        if (!this.gameStatusLabel || !this._sessionId) return;\n\n        // activePlayerIds is now string[]\n        const currentPlayerId = state.activePlayerIds[state.currentPlayerIndex];\n        const isMyTurn = currentPlayerId === this._sessionId;\n\n        if (state.status === 'playing') {\n            if (isMyTurn) {\n                this.gameStatusLabel.string = \"轮到你行动！\";\n                this.gameStatusLabel.color = new Color(0, 255, 0, 255); // Green\n            } else {\n                // Removed duplicate declaration, use the outer scoped variable\n                 const currentPlayerName = this.playerDisplayController?.getPlayerNameWithAlias(currentPlayerId) || `玩家 ${currentPlayerId?.substring(0, 4) ?? '??'}`;\n                this.gameStatusLabel.string = `等待 ${currentPlayerName} 行动...`;\n                this.gameStatusLabel.color = Color.WHITE;\n            }\n        } else if (state.status === 'challenging') {\n             this.gameStatusLabel.string = \"质疑中...\";\n             this.gameStatusLabel.color = Color.YELLOW;\n        } else if (state.status === 'roundOver') {\n             this.gameStatusLabel.string = \"回合结束，等待下一轮...\";\n             this.gameStatusLabel.color = Color.WHITE;\n        } else if (state.status === 'finished') {\n            // Winner determination might need refinement based on final state\n            // Find winner using Object.values for Record\n            let winner: PlayerStateClient | undefined = undefined; // Use client interface\n             if (state.players) {\n                 for (const p of Object.values(state.players)) { // Iterate over values of Record\n                     if (p.diceCount > 0) {\n                         winner = p;\n                         break; // Assuming only one winner\n                     }\n                 }\n             }\n            // Safely get winner name, ensure sessionId is a non-empty string before calling alias lookup\n            let winnerDisplayName = \"无\";\n            const winnerSessionId = winner?.sessionId; // PlayerStateClient has sessionId\n            if (winner && winnerSessionId) { // Check if winner and sessionId are truthy (non-empty string)\n                 // Ensure winnerSessionId is definitely a string before passing\n                 winnerDisplayName = this.playerDisplayController?.getPlayerNameWithAlias(winnerSessionId) || winner.name || \"无\";\n            }\n            this.gameStatusLabel.string = `游戏结束! ${winnerDisplayName} 获胜!`;\n            this.gameStatusLabel.color = new Color(255, 215, 0, 255); // Gold\n        } else if (state.status === 'waiting') {\n             this.gameStatusLabel.string = \"游戏尚未开始\";\n             this.gameStatusLabel.color = Color.WHITE;\n        } else {\n            this.gameStatusLabel.string = `状态: ${state.status}`; // Fallback\n            this.gameStatusLabel.color = Color.WHITE;\n        }\n    }\n\n    // --- 清理 ---\n    onDestroy() {\n        console.log(\"[GameUI] onDestroy called.\");\n        this.cleanupNetworkListeners(); // Ensure network listeners are removed first\n\n        // Remove BidController listeners\n        if (this.bidController && isValid(this.bidController.node, true)) {\n            this.bidController.node.off('place-bid', this.handleLocalPlaceBid, this);\n            this.bidController.node.off('challenge', this.handleLocalChallenge, this);\n            // this.bidController.node.off('spot-on', this.handleLocalSpotOn, this);\n        }\n\n        // Remove ResultPanel listeners\n        if (this.gameResultPanel && isValid(this.gameResultPanel.node, true)) {\n            this.gameResultPanel.node.off('back-to-lobby-requested', this.handleBackToLobbyRequested, this);\n        }\n    }\n}\n"]}