{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/event-handler.ts"],"names":["EventHandler","networkManager","constructor","context","boundHandleStateChange","boundHandleGameStarted","boundHandleKicked","boundHandleDisconnect","boundHandleNetworkError","boundHandlePlayerData","boundHandleFullRoomState","_handleStateChange","bind","_handleGameStarted","_handleKicked","_handleDisconnect","_handleNetworkError","_handlePlayerData","_handleFullRoomState","getInstance","instance","setupEventListeners","console","warn","removeEventListeners","log","node","name","on","off","state","handleStateChange","data","handleGameStarted","handleKicked","code","handleDisconnect","error","handleNetworkError","handlePlayerData","handleFullRoomState"],"mappings":"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","sourcesContent":["import { networkManager } from './network-manager'; // Use the singleton instance\r\nimport { RoomUI } from './room-ui'; // Import RoomUI type for context\r\n// Import the new client-side interface type\r\nimport type { LiarDiceRoomStateClient } from '../shared/schemas/liar-dice-room-state-client';\r\nimport { NetworkError } from '../core/network'; // Import error type\r\n\r\n/**\r\n * EventHandler 单例，负责统一管理 RoomUI 的网络事件监听和分发。\r\n */\r\nexport class EventHandler {\r\n    private static instance: EventHandler;\r\n    private context: RoomUI | null = null; // Store the RoomUI instance\r\n\r\n    // Store bound handlers to ensure 'this' context is correct when called by network events\r\n    // State handler accepts 'any' from network, will be cast later\r\n    private boundHandleStateChange: (state: any) => void;\r\n    private boundHandleGameStarted: (data: { gameId: string }) => void;\r\n    private boundHandleKicked: (data: { reason?: string }) => void;\r\n    private boundHandleDisconnect: (code: number) => void;\r\n    private boundHandleNetworkError: (error: NetworkError) => void;\r\n    private boundHandlePlayerData: (data: any) => void;\r\n    private boundHandleFullRoomState: (data: any) => void;\r\n\r\n\r\n    private constructor() {\r\n        // Bind methods in constructor to ensure 'this' refers to EventHandler instance\r\n        // These bound methods will then call the methods on the stored RoomUI context\r\n        this.boundHandleStateChange = this._handleStateChange.bind(this);\r\n        this.boundHandleGameStarted = this._handleGameStarted.bind(this);\r\n        this.boundHandleKicked = this._handleKicked.bind(this);\r\n        this.boundHandleDisconnect = this._handleDisconnect.bind(this);\r\n        this.boundHandleNetworkError = this._handleNetworkError.bind(this);\r\n        this.boundHandlePlayerData = this._handlePlayerData.bind(this);\r\n        this.boundHandleFullRoomState = this._handleFullRoomState.bind(this);\r\n    }\r\n\r\n    public static getInstance(): EventHandler {\r\n        if (!EventHandler.instance) {\r\n            EventHandler.instance = new EventHandler();\r\n        }\r\n        return EventHandler.instance;\r\n    }\r\n\r\n    // Setup listeners, storing the RoomUI context\r\n    public setupEventListeners(context: RoomUI): void {\r\n        if (this.context) {\r\n            console.warn(\"[EventHandler] Listeners already set up for a context. Overwriting.\");\r\n            this.removeEventListeners(); // Remove old listeners first\r\n        }\r\n        this.context = context;\r\n        console.log(\"[EventHandler] Setting up listeners for context:\", context?.node?.name);\r\n\r\n        networkManager.on('stateUpdate', this.boundHandleStateChange);\r\n        networkManager.on('gameStarted', this.boundHandleGameStarted);\r\n        networkManager.on('kicked', this.boundHandleKicked);\r\n        networkManager.on('disconnected', this.boundHandleDisconnect);\r\n        networkManager.on('error', this.boundHandleNetworkError);\r\n        networkManager.on('playerData', this.boundHandlePlayerData);\r\n        networkManager.on('fullRoomState', this.boundHandleFullRoomState);\r\n    }\r\n\r\n    // Remove listeners and clear context\r\n    public removeEventListeners(): void {\r\n        if (!this.context) {\r\n            // console.warn(\"[EventHandler] No context found, cannot remove listeners effectively.\");\r\n             // Still try to remove listeners from networkManager in case they were somehow added without context\r\n        }\r\n         console.log(\"[EventHandler] Removing listeners.\");\r\n\r\n        networkManager.off('stateUpdate', this.boundHandleStateChange);\r\n        networkManager.off('gameStarted', this.boundHandleGameStarted);\r\n        networkManager.off('kicked', this.boundHandleKicked);\r\n        networkManager.off('disconnected', this.boundHandleDisconnect);\r\n        networkManager.off('error', this.boundHandleNetworkError);\r\n        networkManager.off('playerData', this.boundHandlePlayerData);\r\n        networkManager.off('fullRoomState', this.boundHandleFullRoomState);\r\n\r\n        this.context = null; // Clear the context\r\n    }\r\n\r\n    // --- Internal Handlers ---\r\n    // These call the corresponding public methods on the stored RoomUI context\r\n\r\n    // Accepts 'any' from the bound listener, casts to client interface before forwarding\r\n    private _handleStateChange(state: any): void {\r\n        if (this.context) {\r\n            // Forward the call to the RoomUI instance's method, casting state\r\n            // Need to ensure handleStateChange is public in RoomUI and accepts LiarDiceRoomStateClient\r\n            (this.context as any).handleStateChange(state as LiarDiceRoomStateClient);\r\n        } else {\r\n            console.warn(\"[EventHandler] Received stateUpdate but no context is set.\");\r\n        }\r\n    }\r\n\r\n    private _handleGameStarted(data: { gameId: string }): void {\r\n        if (this.context) {\r\n            (this.context as any).handleGameStarted(data);\r\n        } else {\r\n            console.warn(\"[EventHandler] Received gameStarted but no context is set.\");\r\n        }\r\n    }\r\n\r\n    private _handleKicked(data: { reason?: string }): void {\r\n         if (this.context) {\r\n            (this.context as any).handleKicked(data);\r\n        } else {\r\n            console.warn(\"[EventHandler] Received kicked but no context is set.\");\r\n        }\r\n    }\r\n\r\n    private _handleDisconnect(code: number): void {\r\n         if (this.context) {\r\n            (this.context as any).handleDisconnect(code);\r\n        } else {\r\n            console.warn(\"[EventHandler] Received disconnected but no context is set.\");\r\n        }\r\n    }\r\n\r\n    private _handleNetworkError(error: NetworkError): void {\r\n         if (this.context) {\r\n            (this.context as any).handleNetworkError(error);\r\n        } else {\r\n            console.warn(\"[EventHandler] Received error but no context is set.\");\r\n        }\r\n    }\r\n\r\n     private _handlePlayerData(data: any): void {\r\n         if (this.context) {\r\n            (this.context as any).handlePlayerData(data);\r\n        } else {\r\n            console.warn(\"[EventHandler] Received playerData but no context is set.\");\r\n        }\r\n    }\r\n\r\n     private _handleFullRoomState(data: any): void {\r\n         if (this.context) {\r\n            (this.context as any).handleFullRoomState(data);\r\n        } else {\r\n            console.warn(\"[EventHandler] Received fullRoomState but no context is set.\");\r\n        }\r\n    }\r\n}\r\n"]}