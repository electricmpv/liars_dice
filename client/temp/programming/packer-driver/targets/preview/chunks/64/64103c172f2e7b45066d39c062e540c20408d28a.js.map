{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/connection-status.ts"],"names":["_decorator","Component","Node","Label","Color","Sprite","NetworkManager","NetworkStatus","ccclass","property","ConnectionStatus","isManualDisconnect","start","registerNetworkEvents","updateConnectionStatus","getInstance","status","reconnectButton","on","EventType","TOUCH_END","onReconnectClick","onDestroy","unregisterNetworkEvents","off","onConnected","onConnecting","onDisconnected","onStatusChange","error","onNetworkError","onReconnectFailed","CONNECTED","CONNECTING","DISCONNECTED","console","statusLabel","string","message","color","disconnectedColor","active","statusIcon","statusText","statusColor","showReconnectButton","connectedColor","connectingColor","RECONNECTING","reconnectingColor","log","disconnect","connect"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, Color, Sprite } from 'cc';\nimport { NetworkManager, NetworkStatus } from '../core/network';\n\nconst { ccclass, property } = _decorator;\n\n/**\n * 网络连接状态UI组件\n */\n@ccclass('ConnectionStatus')\nexport class ConnectionStatus extends Component {\n    @property(Label)\n    private statusLabel: Label | null = null;\n    \n    @property(Sprite)\n    private statusIcon: Sprite | null = null;\n    \n    @property(Node)\n    private reconnectButton: Node | null = null;\n    \n    @property(Color)\n    private connectedColor: Color = new Color(0, 255, 0);\n    \n    @property(Color)\n    private connectingColor: Color = new Color(255, 165, 0);\n    \n    @property(Color)\n    private disconnectedColor: Color = new Color(255, 0, 0);\n    \n    @property(Color)\n    private reconnectingColor: Color = new Color(0, 191, 255);\n    \n    private isManualDisconnect: boolean = false;\n    \n    start() {\n        // 注册网络事件监听器\n        this.registerNetworkEvents();\n        \n        // 初始化UI状态\n        this.updateConnectionStatus(NetworkManager.getInstance().status);\n        \n        // 设置重连按钮点击事件\n        if (this.reconnectButton) {\n            this.reconnectButton.on(Node.EventType.TOUCH_END, this.onReconnectClick, this);\n        }\n    }\n    \n    onDestroy() {\n        // 移除事件监听器\n        this.unregisterNetworkEvents();\n        \n        // 移除按钮点击事件\n        if (this.reconnectButton) {\n            this.reconnectButton.off(Node.EventType.TOUCH_END, this.onReconnectClick, this);\n        }\n    }\n    \n    /**\n     * 注册网络事件监听器\n     */\n    private registerNetworkEvents(): void {\n        NetworkManager.getInstance().on('connected', () => this.onConnected());\n        NetworkManager.getInstance().on('connecting', () => this.onConnecting());\n        NetworkManager.getInstance().on('disconnected', () => this.onDisconnected());\n        NetworkManager.getInstance().on('status', (status: NetworkStatus) => this.onStatusChange(status));\n        NetworkManager.getInstance().on('error', (error: any) => this.onNetworkError(error));\n        NetworkManager.getInstance().on('reconnect_failed', () => this.onReconnectFailed());\n    }\n    \n    /**\n     * 移除网络事件监听器\n     */\n    private unregisterNetworkEvents(): void {\n        // 由于SocketAdapter要求同样的回调引用，我们需要重新创建之前注册的匿名函数的空白处理程序\n        NetworkManager.getInstance().off('connected', () => {});\n        NetworkManager.getInstance().off('connecting', () => {});\n        NetworkManager.getInstance().off('disconnected', () => {});\n        NetworkManager.getInstance().off('status', () => {});\n        NetworkManager.getInstance().off('error', () => {});\n        NetworkManager.getInstance().off('reconnect_failed', () => {});\n    }\n    \n    /**\n     * 连接成功事件处理\n     */\n    private onConnected(): void {\n        this.updateConnectionStatus(NetworkStatus.CONNECTED);\n        this.isManualDisconnect = false;\n    }\n    \n    /**\n     * 连接中事件处理\n     */\n    private onConnecting(): void {\n        this.updateConnectionStatus(NetworkStatus.CONNECTING);\n    }\n    \n    /**\n     * 断开连接事件处理\n     */\n    private onDisconnected(): void {\n        this.updateConnectionStatus(NetworkStatus.DISCONNECTED);\n    }\n    \n    /**\n     * 状态变化事件处理\n     */\n    private onStatusChange(status: NetworkStatus): void {\n        this.updateConnectionStatus(status);\n    }\n    \n    /**\n     * 网络错误事件处理\n     */\n    private onNetworkError(error: any): void {\n        console.error('[ConnectionStatus] 网络错误:', error);\n        \n        // 更新UI显示错误消息\n        if (this.statusLabel) {\n            this.statusLabel.string = `连接错误: ${error.message}`;\n            this.statusLabel.color = this.disconnectedColor;\n        }\n        \n        // 显示重连按钮\n        if (this.reconnectButton && !this.isManualDisconnect) {\n            this.reconnectButton.active = true;\n        }\n    }\n    \n    /**\n     * 重连失败事件处理\n     */\n    private onReconnectFailed(): void {\n        console.error('[ConnectionStatus] 重连失败，已达到最大重试次数');\n        \n        // 更新UI显示重连失败消息\n        if (this.statusLabel) {\n            this.statusLabel.string = '重连失败，请手动重连';\n            this.statusLabel.color = this.disconnectedColor;\n        }\n        \n        // 显示重连按钮\n        if (this.reconnectButton) {\n            this.reconnectButton.active = true;\n        }\n    }\n    \n    /**\n     * 更新连接状态UI\n     */\n    private updateConnectionStatus(status: NetworkStatus): void {\n        if (!this.statusLabel || !this.statusIcon) return;\n        \n        let statusText = '';\n        let statusColor = this.disconnectedColor;\n        let showReconnectButton = false;\n        \n        switch (status) {\n            case NetworkStatus.CONNECTED:\n                statusText = '已连接';\n                statusColor = this.connectedColor;\n                showReconnectButton = false;\n                break;\n            case NetworkStatus.CONNECTING:\n                statusText = '连接中...';\n                statusColor = this.connectingColor;\n                showReconnectButton = false;\n                break;\n            case NetworkStatus.RECONNECTING:\n                statusText = '重新连接中...';\n                statusColor = this.reconnectingColor;\n                showReconnectButton = false;\n                break;\n            case NetworkStatus.DISCONNECTED:\n                statusText = '未连接';\n                statusColor = this.disconnectedColor;\n                showReconnectButton = !this.isManualDisconnect;\n                break;\n            default:\n                statusText = '未知状态';\n                statusColor = this.disconnectedColor;\n                showReconnectButton = true;\n                break;\n        }\n        \n        // 更新状态文本和颜色\n        this.statusLabel.string = statusText;\n        this.statusLabel.color = statusColor;\n        \n        // 更新状态图标颜色\n        this.statusIcon.color = statusColor;\n        \n        // 显示/隐藏重连按钮\n        if (this.reconnectButton) {\n            this.reconnectButton.active = showReconnectButton;\n        }\n    }\n    \n    /**\n     * 重连按钮点击处理\n     */\n    private onReconnectClick(): void {\n        console.log('[ConnectionStatus] 手动重连');\n        \n        // 更新UI状态\n        if (this.statusLabel) {\n            this.statusLabel.string = '连接中...';\n            this.statusLabel.color = this.connectingColor;\n        }\n        \n        // 隐藏重连按钮\n        if (this.reconnectButton) {\n            this.reconnectButton.active = false;\n        }\n        \n        // 尝试重新连接\n        // 注意：NetworkManager 不需要 connect 方法，它在需要时会自动初始化和连接\n        NetworkManager.getInstance();\n    }\n    \n    /**\n     * 断开连接（用于外部调用）\n     */\n    public disconnect(): void {\n        this.isManualDisconnect = true;\n        NetworkManager.getInstance().disconnect();\n    }\n    \n    /**\n     * 连接（用于外部调用）\n     */\n    public connect(): void {\n        this.isManualDisconnect = false;\n        // NetworkManager 不需要 connect 方法，它在需要时会自动初始化和连接\n        NetworkManager.getInstance();\n    }\n}\n"]}