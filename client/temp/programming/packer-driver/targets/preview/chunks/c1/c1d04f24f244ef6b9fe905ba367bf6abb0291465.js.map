{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/ui-updater.ts"],"names":["UIUpdater","instantiate","Layout","Color","PlayerItem","constructor","getInstance","instance","updateRoomIdLabel","roomIdLabel","roomId","string","updatePlayerCountLabel","playerCountLabel","currentCount","maxCount","updateInviteAIButton","inviteAIButton","canInvite","interactable","updateReadyButtonLabel","readyButtonLabel","isReady","updateStartGameButton","startGameButton","isHost","canStart","isWaiting","node","active","updatePlayerList","playerListContent","playerItemPrefab","players","currentSessionId","hostId","console","log","error","warn","removeAllChildren","name","forEach","playerData","key","sessionId","createPlayerItem","playersList","Object","values","layout","getComponent","updateLayout","parent","prefab","playerNode","playerComp","setPlayerId","setPlayerName","setIsReady","setIsAI","isAI","showHostIndicator","isSelf","highlightSelf","addChild","checkIfCanStartGame","state","status","activeConnectedPlayerCount","allReady","activePlayersLog","p","isConnected","diceCount","push","join","showError","statusLabel","message","persistent","component","isValid","color","RED","timerKey","nodeWithTimer","unschedule","scheduleOnce","showInfo","WHITE"],"mappings":"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","sourcesContent":["import { Label, Node, Button, Prefab, instantiate, Layout, Color, director, Component } from 'cc'; // Import director and Component\r\n\r\nimport { PlayerState } from '../../shared/schemas/player-state-client';\r\nimport { LiarDiceRoomState } from '../../shared/schemas/liar-dice-room-state-client'; // 使用客户端专用类型定义\r\n// 不再需要导入 MapSchema，改用原生 Map 类型\r\nimport { PlayerItem } from '../prefabs/player-item'; // Import PlayerItem\r\n\r\nexport class UIUpdater {\r\n    private static instance: UIUpdater;\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): UIUpdater {\r\n        if (!UIUpdater.instance) {\r\n            UIUpdater.instance = new UIUpdater();\r\n        }\r\n        return UIUpdater.instance;\r\n    }\r\n\r\n    // --- Existing Methods ---\r\n    public updateRoomIdLabel(roomIdLabel: Label | null, roomId: string): void {\r\n        if (roomIdLabel) {\r\n            roomIdLabel.string = `房间号: ${roomId}`;\r\n        }\r\n    }\r\n\r\n    public updatePlayerCountLabel(playerCountLabel: Label | null, currentCount: number, maxCount: number): void {\r\n        if (playerCountLabel) {\r\n            // Corrected the label text to match the original intent if needed, or keep as is.\r\n            // Example: playerCountLabel.string = `玩家数: ${currentCount}/${maxCount}`;\r\n            playerCountLabel.string = `房间人数: ${currentCount}/${maxCount}`; // Keeping original text\r\n        }\r\n    }\r\n\r\n    public updateInviteAIButton(inviteAIButton: Button | null, canInvite: boolean): void {\r\n        if (inviteAIButton) {\r\n            inviteAIButton.interactable = canInvite;\r\n        }\r\n    }\r\n\r\n    // Updated updateReadyButton to only handle the label text, interactability is complex\r\n    public updateReadyButtonLabel(readyButtonLabel: Label | null, isReady: boolean): void {\r\n        if (readyButtonLabel) {\r\n            readyButtonLabel.string = isReady ? '取消准备' : '准备';\r\n        }\r\n    }\r\n\r\n    // Updated updateStartGameButton to handle active state and interactability based on conditions\r\n    public updateStartGameButton(startGameButton: Button | null, isHost: boolean, canStart: boolean, isWaiting: boolean): void {\r\n        if (!startGameButton) return;\r\n        startGameButton.node.active = isHost && isWaiting; // Show only if host and waiting\r\n        if (startGameButton.node.active) {\r\n            startGameButton.interactable = canStart; // Enable only if conditions met\r\n        } else {\r\n            startGameButton.interactable = false; // Ensure disabled if not active\r\n        }\r\n    }\r\n\r\n    // --- New Methods Moved from RoomUI ---\r\n\r\n    public updatePlayerList(\r\n        playerListContent: Node,\r\n        playerItemPrefab: Prefab,\r\n        // 接受任何类型的 players 对象\r\n        players: any,\r\n        currentSessionId: string,\r\n        hostId: string\r\n    ): void {\r\n        console.log(`[UIUpdater] 开始更新玩家列表...`);\r\n        \r\n        // 检查必要组件\r\n        if (!playerListContent || !playerItemPrefab) {\r\n            console.error(\"[UIUpdater] 玩家列表容器或预制体缺失!\");\r\n            return;\r\n        }\r\n        \r\n        // 检查 players 对象\r\n        if (!players) {\r\n            console.warn(\"[UIUpdater] updatePlayerList 被调用时传入了空的 players 对象\");\r\n            playerListContent.removeAllChildren(); // 清空列表\r\n            return;\r\n        }\r\n\r\n        // 清空现有项目\r\n        playerListContent.removeAllChildren();\r\n        \r\n        // 记录 players 对象的类型信息，用于调试\r\n        console.log(`[UIUpdater] players 类型: ${typeof players}, 构造函数: ${players.constructor?.name || '未知'}`);\r\n        \r\n        // 处理不同类型的 players 对象\r\n        try {\r\n            // 方法1: 如果 players 有 forEach 方法 (MapSchema)\r\n            if (typeof players.forEach === 'function') {\r\n                console.log('[UIUpdater] 使用 forEach 方法处理 players');\r\n                players.forEach((playerData: PlayerState, key: string) => {\r\n                    // 使用 sessionId 或 key 作为标识符\r\n                    const sessionId = playerData.sessionId || key;\r\n                    this.createPlayerItem(\r\n                        playerListContent,\r\n                        playerItemPrefab,\r\n                        sessionId,\r\n                        playerData,\r\n                        currentSessionId,\r\n                        hostId\r\n                    );\r\n                });\r\n            }\r\n            // 方法2: 如果 players 是普通对象\r\n            else if (typeof players === 'object') {\r\n                console.log('[UIUpdater] 使用 Object.values 方法处理 players');\r\n                const playersList = Object.values(players);\r\n                playersList.forEach((playerData: any) => {\r\n                    // 使用 sessionId 作为标识符\r\n                    const sessionId = playerData.sessionId || '';\r\n                    this.createPlayerItem(\r\n                        playerListContent,\r\n                        playerItemPrefab,\r\n                        sessionId,\r\n                        playerData,\r\n                        currentSessionId,\r\n                        hostId\r\n                    );\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('[UIUpdater] 处理 players 对象时出错:', error);\r\n        }\r\n\r\n        // 强制更新布局\r\n        const layout = playerListContent.getComponent(Layout);\r\n        if (layout) {\r\n            layout.updateLayout();\r\n        }\r\n        \r\n        console.log(`[UIUpdater] 玩家列表更新完成`);\r\n    }\r\n\r\n    private createPlayerItem(\r\n        parent: Node,\r\n        prefab: Prefab,\r\n        sessionId: string,\r\n        playerData: PlayerState,\r\n        currentSessionId: string,\r\n        hostId: string\r\n    ): void {\r\n        console.log(`[UIUpdater] Creating list item for player: ${sessionId} (${playerData.name})`);\r\n        const playerNode = instantiate(prefab);\r\n        const playerComp = playerNode.getComponent(PlayerItem);\r\n\r\n        if (playerComp) {\r\n            playerComp.setPlayerId(sessionId);\r\n            playerComp.setPlayerName(playerData.name || `玩家...`);\r\n            playerComp.setIsReady(playerData.isReady);\r\n            playerComp.setIsAI(playerData.isAI);\r\n\r\n            // Show host indicator (assuming PlayerItem has showHostIndicator method)\r\n            const isHost = hostId === sessionId;\r\n            if (typeof (playerComp as any).showHostIndicator === 'function') {\r\n                 (playerComp as any).showHostIndicator(isHost);\r\n            } else if (isHost) {\r\n                 console.log(`[UIUpdater] Player ${playerData.name} is host (indicator method missing)`);\r\n            }\r\n\r\n\r\n            // Highlight current player (assuming PlayerItem has highlightSelf method)\r\n            const isSelf = sessionId === currentSessionId;\r\n             if (typeof (playerComp as any).highlightSelf === 'function') {\r\n                 (playerComp as any).highlightSelf(isSelf);\r\n             } else if (isSelf) {\r\n                 console.log(`[UIUpdater] Highlighting current player: ${playerData.name} (highlight method missing)`);\r\n             }\r\n\r\n        } else {\r\n            console.error(`[UIUpdater] Prefab is missing PlayerItem component!`);\r\n        }\r\n        parent.addChild(playerNode);\r\n    }\r\n\r\n    public checkIfCanStartGame(isHost: boolean, state: LiarDiceRoomState | null): boolean {\r\n        // Must be host and state must exist\r\n        if (!isHost || !state) {\r\n            // console.log(`[UIUpdater] Cannot start: Not host (${isHost}) or state missing (${!state})`);\r\n            return false;\r\n        }\r\n        // Must be in 'waiting' state\r\n        if (state.status !== 'waiting') {\r\n             // console.log(`[UIUpdater] Cannot start: Game status is not 'waiting' (${state.status})`);\r\n             return false;\r\n        }\r\n\r\n        // Must have at least 2 players connected and with dice\r\n        let activeConnectedPlayerCount = 0;\r\n        let allReady = true;\r\n        let activePlayersLog: string[] = []; // For logging\r\n\r\n        // Iterate using Object.values for native object, add null check for state.players\r\n        if (state.players) {\r\n            Object.values(state.players).forEach((p: PlayerState) => {\r\n                if (p.isConnected && p.diceCount > 0) {\r\n                    activeConnectedPlayerCount++;\r\n                    // Use sessionId for logging\r\n                    activePlayersLog.push(`${p.sessionId}(${p.name}): Ready=${p.isReady}`);\r\n                    if (!p.isReady) {\r\n                        allReady = false;\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n             // If state.players is null/undefined, cannot start\r\n             console.log(`[UIUpdater] Cannot start: state.players is missing.`);\r\n             return false;\r\n        }\r\n\r\n\r\n        if (activeConnectedPlayerCount < 2) {\r\n            console.log(`[UIUpdater] Cannot start: Not enough active players (${activeConnectedPlayerCount}). Players: ${activePlayersLog.join(', ')}`);\r\n            return false;\r\n        }\r\n\r\n        if (!allReady) {\r\n            console.log(`[UIUpdater] Cannot start: Not all active players are ready. Players: ${activePlayersLog.join(', ')}`);\r\n            return false;\r\n        }\r\n\r\n        console.log(`[UIUpdater] Can start game: Host=${isHost}, Status=${state.status}, Players=${activeConnectedPlayerCount}, AllReady=${allReady}`);\r\n        return true; // All conditions met\r\n    }\r\n\r\n    // --- Status Display Methods ---\r\n    // Pass the Component instance (e.g., RoomUI) to use its scheduler\r\n    public showError(statusLabel: Label | null, message: string, persistent: boolean = false, component: Component) {\r\n        if (statusLabel && statusLabel.node && statusLabel.node.isValid) { // Check validity\r\n            statusLabel.string = message;\r\n            statusLabel.color = Color.RED;\r\n            statusLabel.node.active = true;\r\n            const timerKey = 'statusLabelHideTimer_Error'; // Unique key\r\n            const nodeWithTimer = statusLabel.node as any;\r\n\r\n            // Clear previous timer if exists using the component's scheduler\r\n            component.unschedule(nodeWithTimer[timerKey]);\r\n            delete nodeWithTimer[timerKey]; // Remove old key reference\r\n\r\n            if (!persistent) {\r\n                nodeWithTimer[timerKey] = () => {\r\n                    if (statusLabel && statusLabel.node.isValid) { // Check validity again before hiding\r\n                         statusLabel.node.active = false;\r\n                    }\r\n                     delete nodeWithTimer[timerKey]; // Clean up timer reference\r\n                };\r\n                 // Use component's scheduleOnce\r\n                 component.scheduleOnce(nodeWithTimer[timerKey], 3);\r\n            }\r\n        } else {\r\n             console.error(`[UIUpdater] Cannot show error - StatusLabel invalid or null.`);\r\n        }\r\n        console.error(`[UIUpdater] Error: ${message}`);\r\n    }\r\n\r\n    public showInfo(statusLabel: Label | null, message: string, persistent: boolean = false, component: Component) {\r\n         if (statusLabel && statusLabel.node && statusLabel.node.isValid) { // Check validity\r\n            statusLabel.string = message;\r\n            statusLabel.color = Color.WHITE; // Use default white color for info\r\n            statusLabel.node.active = true;\r\n            const timerKey = 'statusLabelHideTimer_Info'; // Unique key\r\n            const nodeWithTimer = statusLabel.node as any;\r\n\r\n            // Clear previous timer if exists using the component's scheduler\r\n            component.unschedule(nodeWithTimer[timerKey]);\r\n            delete nodeWithTimer[timerKey];\r\n\r\n            if (!persistent) {\r\n                 nodeWithTimer[timerKey] = () => {\r\n                     if (statusLabel && statusLabel.node.isValid) { // Check validity again\r\n                         statusLabel.node.active = false;\r\n                     }\r\n                      delete nodeWithTimer[timerKey];\r\n                 };\r\n                  // Use component's scheduleOnce\r\n                  component.scheduleOnce(nodeWithTimer[timerKey], 3);\r\n            }\r\n        } else {\r\n             console.warn(`[UIUpdater] Cannot show info - StatusLabel invalid or null.`);\r\n        }\r\n        console.log(`[UIUpdater] Info: ${message}`);\r\n    }\r\n}\r\n"]}