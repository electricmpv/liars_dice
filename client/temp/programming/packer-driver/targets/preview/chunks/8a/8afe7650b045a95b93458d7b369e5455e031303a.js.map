{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/ui/network-manager.ts"],"names":["NetworkManager","NetworkManagerCore","constructor","getInstance","instance","roomId","sessionId","roomState","on","event","handler","off","send","type","payload","leaveRoom","networkManager"],"mappings":";;;kDAKaA,c;;;;;;;;;;;;;;AALcC,MAAAA,kB,iBAAlBD,c;;;;;;;AAET;AACA;AACA;gCACaA,c,GAAN,MAAMA,cAAN,CAAqB;AAGhBE,QAAAA,WAAW,GAAG,CAAE;;AAEC,eAAXC,WAAW,GAAmB;AACxC,cAAI,CAACH,cAAc,CAACI,QAApB,EAA8B;AAC1BJ,YAAAA,cAAc,CAACI,QAAf,GAA0B,IAAIJ,cAAJ,EAA1B;AACH;;AACD,iBAAOA,cAAc,CAACI,QAAtB;AACH;;AAEgB,YAANC,MAAM,GAAW;AACxB,iBAAO;AAAA;AAAA,wDAAmBF,WAAnB,GAAiCE,MAAxC;AACH;;AAEmB,YAATC,SAAS,GAAW;AAC3B,iBAAO;AAAA;AAAA,wDAAmBH,WAAnB,GAAiCG,SAAxC;AACH;;AAEmB,YAATC,SAAS,GAAQ;AACxB,iBAAO;AAAA;AAAA,wDAAmBJ,WAAnB,GAAiCI,SAAxC;AACH;;AAEMC,QAAAA,EAAE,CAACC,KAAD,EAAgBC,OAAhB,EAAyD;AAC9D;AAAA;AAAA,wDAAmBP,WAAnB,GAAiCK,EAAjC,CAAoCC,KAApC,EAA2CC,OAA3C;AACH;;AAEMC,QAAAA,GAAG,CAACF,KAAD,EAAgBC,OAAhB,EAAyD;AAC/D;AAAA;AAAA,wDAAmBP,WAAnB,GAAiCQ,GAAjC,CAAqCF,KAArC,EAA4CC,OAA5C;AACH;;AAEME,QAAAA,IAAI,CAACC,IAAD,EAAeC,OAAf,EAAoC;AAC3C;AAAA;AAAA,wDAAmBX,WAAnB,GAAiCS,IAAjC,CAAsCC,IAAtC,EAA4CC,OAA5C;AACH;;AAEMC,QAAAA,SAAS,GAAkB;AAC9B,iBAAO;AAAA;AAAA,wDAAmBZ,WAAnB,GAAiCY,SAAjC,EAAP;AACH,SAtCuB,CAwCxB;;;AAxCwB,O;;AAAff,MAAAA,c,CACMI,Q;;gCA0CNY,c,GAAiBhB,cAAc,CAACG,WAAf,E","sourcesContent":["import { NetworkManager as NetworkManagerCore, NetworkError, NetworkErrorCode } from '../core/network';\n\n/**\n * NetworkManager 单例，负责封装网络相关操作，便于 UI 层调用和解耦。\n */\nexport class NetworkManager {\n    private static instance: NetworkManager;\n\n    private constructor() {}\n\n    public static getInstance(): NetworkManager {\n        if (!NetworkManager.instance) {\n            NetworkManager.instance = new NetworkManager();\n        }\n        return NetworkManager.instance;\n    }\n\n    public get roomId(): string {\n        return NetworkManagerCore.getInstance().roomId;\n    }\n\n    public get sessionId(): string {\n        return NetworkManagerCore.getInstance().sessionId;\n    }\n\n    public get roomState(): any {\n        return NetworkManagerCore.getInstance().roomState;\n    }\n\n    public on(event: string, handler: (...args: any[]) => void): void {\n        NetworkManagerCore.getInstance().on(event, handler);\n    }\n\n    public off(event: string, handler: (...args: any[]) => void): void {\n        NetworkManagerCore.getInstance().off(event, handler);\n    }\n\n    public send(type: string, payload?: any): void {\n        NetworkManagerCore.getInstance().send(type, payload);\n    }\n\n    public leaveRoom(): Promise<void> {\n        return NetworkManagerCore.getInstance().leaveRoom();\n    }\n\n    // 可根据需要扩展更多网络操作方法\n}\n\nexport const networkManager = NetworkManager.getInstance();"]}