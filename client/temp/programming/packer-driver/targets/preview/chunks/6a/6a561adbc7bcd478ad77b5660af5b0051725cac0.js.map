{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/scripts/libs/events-browser.ts"],"names":["EventEmitter","constructor","_events","_eventsCount","_maxListeners","setMaxListeners","n","getMaxListeners","eventNames","Object","keys","listeners","type","events","listenerCount","length","emit","args","handlers","forEach","handler","apply","on","listener","addListener","push","once","onceWrapper","removeListener","off","filter","l","removeAllListeners","window","require","name","Error"],"mappings":"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","sourcesContent":["/**\n * 浏览器环境中的事件模块模拟\n * 为Colyseus提供兼容性支持\n */\n\n// 创建全局EventEmitter类\nexport class EventEmitter {\n  private _events: Record<string, Function[]> = {};\n  private _eventsCount = 0;\n  private _maxListeners = 10;\n\n  constructor() {\n    this._events = {};\n    this._eventsCount = 0;\n  }\n\n  setMaxListeners(n: number): this {\n    this._maxListeners = n;\n    return this;\n  }\n\n  getMaxListeners(): number {\n    return this._maxListeners;\n  }\n\n  eventNames(): string[] {\n    return Object.keys(this._events);\n  }\n\n  listeners(type: string): Function[] {\n    const events = this._events;\n    return events[type] ? [...events[type]] : [];\n  }\n\n  listenerCount(type: string): number {\n    const events = this._events;\n    return events[type] ? events[type].length : 0;\n  }\n\n  emit(type: string, ...args: any[]): boolean {\n    const events = this._events;\n    if (!events[type]) return false;\n\n    const handlers = events[type];\n    handlers.forEach(handler => {\n      handler.apply(this, args);\n    });\n\n    return true;\n  }\n\n  on(type: string, listener: Function): this {\n    return this.addListener(type, listener);\n  }\n\n  addListener(type: string, listener: Function): this {\n    const events = this._events;\n    \n    if (!events[type]) {\n      events[type] = [];\n      this._eventsCount++;\n    }\n    \n    events[type].push(listener);\n    \n    return this;\n  }\n\n  once(type: string, listener: Function): this {\n    const onceWrapper = (...args: any[]) => {\n      this.removeListener(type, onceWrapper);\n      listener.apply(this, args);\n    };\n    \n    this.on(type, onceWrapper);\n    return this;\n  }\n\n  off(type: string, listener: Function): this {\n    return this.removeListener(type, listener);\n  }\n\n  removeListener(type: string, listener: Function): this {\n    const events = this._events;\n    if (!events[type]) return this;\n\n    events[type] = events[type].filter(l => l !== listener);\n    \n    if (events[type].length === 0) {\n      delete events[type];\n      this._eventsCount--;\n    }\n    \n    return this;\n  }\n\n  removeAllListeners(type?: string): this {\n    const events = this._events;\n    \n    if (type) {\n      if (events[type]) {\n        delete events[type];\n        this._eventsCount--;\n      }\n    } else {\n      this._events = {};\n      this._eventsCount = 0;\n    }\n    \n    return this;\n  }\n}\n\n// 导出全局EventEmitter\n(window as any).EventEmitter = EventEmitter;\n\n// 导出模拟的events模块接口\nconst events = {\n  EventEmitter\n};\n\n// 确保全局可访问\n(window as any).events = events;\n(window as any).require = function(name: string) {\n  if (name === 'events') {\n    return events;\n  }\n  throw new Error(`Cannot find module '${name}'`);\n};\n\nexport default events;\n"]}