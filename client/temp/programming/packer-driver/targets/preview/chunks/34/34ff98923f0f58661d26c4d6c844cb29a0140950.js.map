{"version":3,"sources":["file:///D:/editors/liars_dice_demo/client/assets/shared/protocols/room-protocol.ts"],"names":["z","PlayerSchema","object","id","string","name","isReady","boolean","isAI","aiType","optional","RoomSchema","hostId","players","array","playerCount","number","maxPlayers","status","enum","hasPassword","isPrivate","hasFriends","createdAt","date","updatedAt","ChatMessageSchema","roomId","senderId","senderName","content","min","max","timestamp","HeartbeatSchema","clientTime","CreateRoomRequestSchema","playerName","JoinRoomRequestSchema","LeaveRoomRequestSchema","playerId","GetRoomInfoRequestSchema"],"mappings":"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","sourcesContent":["import { z } from \"zod\";\n\n// 玩家接口定义\nexport interface Player {\n  id: string;\n  name: string;\n  isReady: boolean;\n  isAI: boolean; // Added for AI player identification\n  aiType?: string; // Optional: Specifies the type of AI (e.g., 'coward')\n}\n\n// 房间状态定义\nexport type RoomStatus = \"waiting\" | \"gaming\" | \"closed\";\n\n// 房间接口定义\nexport interface Room {\n  id: string;\n  hostId: string; // 添加房主ID\n  name?: string;\n  players: Player[]; // 修改为 Player 对象数组\n  playerCount: number;\n  maxPlayers: number;\n  status: RoomStatus;\n  hasPassword: boolean;\n  isPrivate: boolean;\n  hasFriends: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n// 玩家验证Schema\nexport const PlayerSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  isReady: z.boolean(),\n  isAI: z.boolean(), // Added for AI player identification\n  aiType: z.string().optional() // Optional: Specifies the type of AI\n});\n\n// 聊天消息接口\nexport interface ChatMessage {\n  roomId: string;\n  senderId: string;\n  senderName: string;\n  content: string;\n  timestamp: number;\n}\n\n// 心跳检测接口\nexport interface Heartbeat {\n  timestamp: number;\n  clientTime?: number;\n}\n\n// 房间验证Schema\nexport const RoomSchema = z.object({\n  id: z.string(),\n  hostId: z.string(), // 添加 hostId 验证\n  name: z.string().optional(),\n  players: z.array(PlayerSchema), // 修改为 PlayerSchema 数组验证\n  playerCount: z.number(),\n  maxPlayers: z.number(),\n  status: z.enum([\"waiting\", \"gaming\", \"closed\"]),\n  hasPassword: z.boolean(),\n  isPrivate: z.boolean(),\n  hasFriends: z.boolean(),\n  createdAt: z.date().optional(),\n  updatedAt: z.date().optional()\n});\n\n// 聊天消息验证Schema\nexport const ChatMessageSchema = z.object({\n  roomId: z.string(),\n  senderId: z.string(),\n  senderName: z.string(),\n  content: z.string().min(1).max(500),\n  timestamp: z.number()\n});\n\n// 心跳验证Schema\nexport const HeartbeatSchema = z.object({\n  timestamp: z.number(),\n  clientTime: z.number().optional()\n});\n\n// 创建房间请求验证\nexport const CreateRoomRequestSchema = z.object({\n  playerName: z.string().min(1).max(20)\n});\n\n// 加入房间请求验证\nexport const JoinRoomRequestSchema = z.object({\n  roomId: z.string(),\n  playerName: z.string().min(1).max(20)\n});\n\n// 离开房间请求验证\nexport const LeaveRoomRequestSchema = z.object({\n  roomId: z.string(),\n  playerId: z.string()\n});\n\n// 获取房间信息请求验证\nexport const GetRoomInfoRequestSchema = z.object({\n  roomId: z.string(),\n});\n"]}